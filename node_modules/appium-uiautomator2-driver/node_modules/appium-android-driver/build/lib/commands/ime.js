"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _baseDriver = require("@appium/base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.isIMEActivated = async function isIMEActivated() {
  return true;
};

commands.availableIMEEngines = async function availableIMEEngines() {
  this.log.debug('Retrieving available IMEs');
  let engines = await this.adb.availableIMEs();
  this.log.debug(`Engines: ${JSON.stringify(engines)}`);
  return engines;
};

commands.getActiveIMEEngine = async function getActiveIMEEngine() {
  this.log.debug('Retrieving current default IME');
  return await this.adb.defaultIME();
};

commands.activateIMEEngine = async function activateIMEEngine(imeId) {
  this.log.debug(`Attempting to activate IME ${imeId}`);
  let availableEngines = await this.adb.availableIMEs();

  if (availableEngines.indexOf(imeId) === -1) {
    this.log.debug('IME not found, failing');
    throw new _baseDriver.errors.IMENotAvailableError();
  }

  this.log.debug('Found installed IME, attempting to activate');
  await this.adb.enableIME(imeId);
  await this.adb.setIME(imeId);
};

commands.deactivateIMEEngine = async function deactivateIMEEngine() {
  let currentEngine = await this.getActiveIMEEngine();
  this.log.debug(`Attempting to deactivate ${currentEngine}`);
  await this.adb.disableIME(currentEngine);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL2ltZS5qcyIsIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJpc0lNRUFjdGl2YXRlZCIsImF2YWlsYWJsZUlNRUVuZ2luZXMiLCJsb2ciLCJkZWJ1ZyIsImVuZ2luZXMiLCJhZGIiLCJhdmFpbGFibGVJTUVzIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEFjdGl2ZUlNRUVuZ2luZSIsImRlZmF1bHRJTUUiLCJhY3RpdmF0ZUlNRUVuZ2luZSIsImltZUlkIiwiYXZhaWxhYmxlRW5naW5lcyIsImluZGV4T2YiLCJlcnJvcnMiLCJJTUVOb3RBdmFpbGFibGVFcnJvciIsImVuYWJsZUlNRSIsInNldElNRSIsImRlYWN0aXZhdGVJTUVFbmdpbmUiLCJjdXJyZW50RW5naW5lIiwiZGlzYWJsZUlNRSIsIk9iamVjdCIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9pbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuaXNJTUVBY3RpdmF0ZWQgPSBhc3luYyBmdW5jdGlvbiBpc0lNRUFjdGl2YXRlZCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAvLyBJTUUgaXMgYWx3YXlzIGFjdGl2YXRlZCBvbiBBbmRyb2lkIGRldmljZXNcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb21tYW5kcy5hdmFpbGFibGVJTUVFbmdpbmVzID0gYXN5bmMgZnVuY3Rpb24gYXZhaWxhYmxlSU1FRW5naW5lcyAoKSB7XG4gIHRoaXMubG9nLmRlYnVnKCdSZXRyaWV2aW5nIGF2YWlsYWJsZSBJTUVzJyk7XG4gIGxldCBlbmdpbmVzID0gYXdhaXQgdGhpcy5hZGIuYXZhaWxhYmxlSU1FcygpO1xuICB0aGlzLmxvZy5kZWJ1ZyhgRW5naW5lczogJHtKU09OLnN0cmluZ2lmeShlbmdpbmVzKX1gKTtcbiAgcmV0dXJuIGVuZ2luZXM7XG59O1xuXG5jb21tYW5kcy5nZXRBY3RpdmVJTUVFbmdpbmUgPSBhc3luYyBmdW5jdGlvbiBnZXRBY3RpdmVJTUVFbmdpbmUgKCkge1xuICB0aGlzLmxvZy5kZWJ1ZygnUmV0cmlldmluZyBjdXJyZW50IGRlZmF1bHQgSU1FJyk7XG4gIHJldHVybiBhd2FpdCB0aGlzLmFkYi5kZWZhdWx0SU1FKCk7XG59O1xuXG5jb21tYW5kcy5hY3RpdmF0ZUlNRUVuZ2luZSA9IGFzeW5jIGZ1bmN0aW9uIGFjdGl2YXRlSU1FRW5naW5lIChpbWVJZCkge1xuICB0aGlzLmxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBhY3RpdmF0ZSBJTUUgJHtpbWVJZH1gKTtcbiAgbGV0IGF2YWlsYWJsZUVuZ2luZXMgPSBhd2FpdCB0aGlzLmFkYi5hdmFpbGFibGVJTUVzKCk7XG4gIGlmIChhdmFpbGFibGVFbmdpbmVzLmluZGV4T2YoaW1lSWQpID09PSAtMSkge1xuICAgIHRoaXMubG9nLmRlYnVnKCdJTUUgbm90IGZvdW5kLCBmYWlsaW5nJyk7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JTUVOb3RBdmFpbGFibGVFcnJvcigpO1xuICB9XG4gIHRoaXMubG9nLmRlYnVnKCdGb3VuZCBpbnN0YWxsZWQgSU1FLCBhdHRlbXB0aW5nIHRvIGFjdGl2YXRlJyk7XG4gIGF3YWl0IHRoaXMuYWRiLmVuYWJsZUlNRShpbWVJZCk7XG4gIGF3YWl0IHRoaXMuYWRiLnNldElNRShpbWVJZCk7XG59O1xuXG5jb21tYW5kcy5kZWFjdGl2YXRlSU1FRW5naW5lID0gYXN5bmMgZnVuY3Rpb24gZGVhY3RpdmF0ZUlNRUVuZ2luZSAoKSB7XG4gIGxldCBjdXJyZW50RW5naW5lID0gYXdhaXQgdGhpcy5nZXRBY3RpdmVJTUVFbmdpbmUoKTtcbiAgdGhpcy5sb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gZGVhY3RpdmF0ZSAke2N1cnJlbnRFbmdpbmV9YCk7XG4gIGF3YWl0IHRoaXMuYWRiLmRpc2FibGVJTUUoY3VycmVudEVuZ2luZSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFGLFFBQVEsQ0FBQ0csY0FBVCxHQUEwQixlQUFlQSxjQUFmLEdBQWlDO0VBRXpELE9BQU8sSUFBUDtBQUNELENBSEQ7O0FBS0FILFFBQVEsQ0FBQ0ksbUJBQVQsR0FBK0IsZUFBZUEsbUJBQWYsR0FBc0M7RUFDbkUsS0FBS0MsR0FBTCxDQUFTQyxLQUFULENBQWUsMkJBQWY7RUFDQSxJQUFJQyxPQUFPLEdBQUcsTUFBTSxLQUFLQyxHQUFMLENBQVNDLGFBQVQsRUFBcEI7RUFDQSxLQUFLSixHQUFMLENBQVNDLEtBQVQsQ0FBZ0IsWUFBV0ksSUFBSSxDQUFDQyxTQUFMLENBQWVKLE9BQWYsQ0FBd0IsRUFBbkQ7RUFDQSxPQUFPQSxPQUFQO0FBQ0QsQ0FMRDs7QUFPQVAsUUFBUSxDQUFDWSxrQkFBVCxHQUE4QixlQUFlQSxrQkFBZixHQUFxQztFQUNqRSxLQUFLUCxHQUFMLENBQVNDLEtBQVQsQ0FBZSxnQ0FBZjtFQUNBLE9BQU8sTUFBTSxLQUFLRSxHQUFMLENBQVNLLFVBQVQsRUFBYjtBQUNELENBSEQ7O0FBS0FiLFFBQVEsQ0FBQ2MsaUJBQVQsR0FBNkIsZUFBZUEsaUJBQWYsQ0FBa0NDLEtBQWxDLEVBQXlDO0VBQ3BFLEtBQUtWLEdBQUwsQ0FBU0MsS0FBVCxDQUFnQiw4QkFBNkJTLEtBQU0sRUFBbkQ7RUFDQSxJQUFJQyxnQkFBZ0IsR0FBRyxNQUFNLEtBQUtSLEdBQUwsQ0FBU0MsYUFBVCxFQUE3Qjs7RUFDQSxJQUFJTyxnQkFBZ0IsQ0FBQ0MsT0FBakIsQ0FBeUJGLEtBQXpCLE1BQW9DLENBQUMsQ0FBekMsRUFBNEM7SUFDMUMsS0FBS1YsR0FBTCxDQUFTQyxLQUFULENBQWUsd0JBQWY7SUFDQSxNQUFNLElBQUlZLGtCQUFBLENBQU9DLG9CQUFYLEVBQU47RUFDRDs7RUFDRCxLQUFLZCxHQUFMLENBQVNDLEtBQVQsQ0FBZSw2Q0FBZjtFQUNBLE1BQU0sS0FBS0UsR0FBTCxDQUFTWSxTQUFULENBQW1CTCxLQUFuQixDQUFOO0VBQ0EsTUFBTSxLQUFLUCxHQUFMLENBQVNhLE1BQVQsQ0FBZ0JOLEtBQWhCLENBQU47QUFDRCxDQVZEOztBQVlBZixRQUFRLENBQUNzQixtQkFBVCxHQUErQixlQUFlQSxtQkFBZixHQUFzQztFQUNuRSxJQUFJQyxhQUFhLEdBQUcsTUFBTSxLQUFLWCxrQkFBTCxFQUExQjtFQUNBLEtBQUtQLEdBQUwsQ0FBU0MsS0FBVCxDQUFnQiw0QkFBMkJpQixhQUFjLEVBQXpEO0VBQ0EsTUFBTSxLQUFLZixHQUFMLENBQVNnQixVQUFULENBQW9CRCxhQUFwQixDQUFOO0FBQ0QsQ0FKRDs7QUFNQUUsTUFBTSxDQUFDQyxNQUFQLENBQWN4QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSJ9
