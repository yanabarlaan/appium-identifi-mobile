"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.parseWindowProperties = parseWindowProperties;
exports.parseWindows = parseWindows;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

const WINDOW_TITLE_PATTERN = /^\s+Window\s#\d+\sWindow\{[0-9a-f]+\s\w+\s([\w-]+)\}:$/;
const FRAME_PATTERN = /^\s+mFrame=\[([0-9.-]+),([0-9.-]+)\]\[([0-9.-]+),([0-9.-]+)\]/m;
const SURFACE_PATTERN = /^\s+Surface:\sshown=(true|false)/m;
const STATUS_BAR_WINDOW_NAME_PREFIX = 'StatusBar';
const NAVIGATION_BAR_WINDOW_NAME_PREFIX = 'NavigationBar';
const DEFAULT_WINDOW_PROPERTIES = {
  visible: false,
  x: 0,
  y: 0,
  width: 0,
  height: 0
};
const commands = {};

function parseWindowProperties(name, props, log = null) {
  const result = _lodash.default.cloneDeep(DEFAULT_WINDOW_PROPERTIES);

  const propLines = props.join('\n');
  const frameMatch = FRAME_PATTERN.exec(propLines);

  if (!frameMatch) {
    log === null || log === void 0 ? void 0 : log.debug(propLines);
    throw new Error(`Cannot parse the frame size from '${name}' window properties`);
  }

  result.x = parseFloat(frameMatch[1]);
  result.y = parseFloat(frameMatch[2]);
  result.width = parseFloat(frameMatch[3]) - result.x;
  result.height = parseFloat(frameMatch[4]) - result.y;
  const visibilityMatch = SURFACE_PATTERN.exec(propLines);

  if (!visibilityMatch) {
    log === null || log === void 0 ? void 0 : log.debug(propLines);
    throw new Error(`Cannot parse the visibility value from '${name}' window properties`);
  }

  result.visible = visibilityMatch[1] === 'true';
  return result;
}

function parseWindows(lines, log = null) {
  const windows = {};
  let currentWindowName = null;
  let windowNameRowIndent = null;

  for (const line of lines.split('\n').map(_lodash.default.trimEnd)) {
    const currentIndent = line.length - _lodash.default.trimStart(line).length;

    if (_lodash.default.isNil(windowNameRowIndent) || currentIndent <= windowNameRowIndent) {
      const match = WINDOW_TITLE_PATTERN.exec(line);

      if (!match) {
        currentWindowName = null;
        continue;
      }

      currentWindowName = match[1];

      if (_lodash.default.isNil(windowNameRowIndent)) {
        windowNameRowIndent = currentIndent;
      }

      continue;
    }

    if (!currentWindowName || currentIndent <= windowNameRowIndent) {
      continue;
    }

    if (!_lodash.default.isArray(windows[currentWindowName])) {
      windows[currentWindowName] = [];
    }

    windows[currentWindowName].push(line);
  }

  if (_lodash.default.isEmpty(windows)) {
    log === null || log === void 0 ? void 0 : log.debug(lines.join('\n'));
    throw new Error('Cannot parse any window information from the dumpsys output');
  }

  const result = {
    statusBar: null,
    navigationBar: null
  };

  for (const [name, props] of _lodash.default.toPairs(windows)) {
    if (name.startsWith(STATUS_BAR_WINDOW_NAME_PREFIX)) {
      result.statusBar = parseWindowProperties(name, props, log);
    } else if (name.startsWith(NAVIGATION_BAR_WINDOW_NAME_PREFIX)) {
      result.navigationBar = parseWindowProperties(name, props, log);
    }
  }

  const unmatchedWindows = [['statusBar', STATUS_BAR_WINDOW_NAME_PREFIX], ['navigationBar', NAVIGATION_BAR_WINDOW_NAME_PREFIX]].filter(([name]) => _lodash.default.isNil(result[name]));

  for (const [window, namePrefix] of unmatchedWindows) {
    log === null || log === void 0 ? void 0 : log.info(`No windows have been found whose title matches to ` + `'${namePrefix}'. Assuming it is invisible. ` + `Only the following windows are available: ${_lodash.default.keys(windows)}`);
    result[window] = _lodash.default.cloneDeep(DEFAULT_WINDOW_PROPERTIES);
  }

  return result;
}

commands.getSystemBars = async function getSystemBars() {
  let stdout;

  try {
    stdout = await this.adb.shell(['dumpsys', 'window', 'windows']);
  } catch (e) {
    throw new Error(`Cannot retrieve system bars details. Original error: ${e.message}`);
  }

  return parseWindows(stdout, this.log);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
