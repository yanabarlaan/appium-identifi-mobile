"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _support = require("@appium/support");

var _baseDriver = require("@appium/base-driver");

const ADB_SHELL_FEATURE = 'adb_shell';
let commands = {};
exports.commands = commands;

commands.mobileShell = async function mobileShell(opts = {}) {
  this.ensureFeatureEnabled(ADB_SHELL_FEATURE);
  const {
    command,
    args = [],
    timeout = 20000,
    includeStderr
  } = opts;

  if (!_lodash.default.isString(command)) {
    throw new _baseDriver.errors.InvalidArgumentError(`The 'command' argument is mandatory`);
  }

  const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];
  this.log.debug(`Running '${this.adb.executable.path} ${_support.util.quote(adbArgs)}'`);

  try {
    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
      timeout
    });

    if (includeStderr) {
      return {
        stdout,
        stderr
      };
    }

    return stdout;
  } catch (err) {
    this.log.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL3NoZWxsLmpzIiwibmFtZXMiOlsiQURCX1NIRUxMX0ZFQVRVUkUiLCJjb21tYW5kcyIsIm1vYmlsZVNoZWxsIiwib3B0cyIsImVuc3VyZUZlYXR1cmVFbmFibGVkIiwiY29tbWFuZCIsImFyZ3MiLCJ0aW1lb3V0IiwiaW5jbHVkZVN0ZGVyciIsIl8iLCJpc1N0cmluZyIsImVycm9ycyIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiYWRiQXJncyIsImFkYiIsImV4ZWN1dGFibGUiLCJkZWZhdWx0QXJncyIsImlzQXJyYXkiLCJsb2ciLCJkZWJ1ZyIsInBhdGgiLCJ1dGlsIiwicXVvdGUiLCJzdGRvdXQiLCJzdGRlcnIiLCJleGVjIiwiZXJyIiwiZXJyb3JBbmRUaHJvdyIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvY29tbWFuZHMvc2hlbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcblxuY29uc3QgQURCX1NIRUxMX0ZFQVRVUkUgPSAnYWRiX3NoZWxsJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLm1vYmlsZVNoZWxsID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlU2hlbGwgKG9wdHMgPSB7fSkge1xuICB0aGlzLmVuc3VyZUZlYXR1cmVFbmFibGVkKEFEQl9TSEVMTF9GRUFUVVJFKTtcblxuICBjb25zdCB7XG4gICAgY29tbWFuZCxcbiAgICBhcmdzID0gW10sXG4gICAgdGltZW91dCA9IDIwMDAwLFxuICAgIGluY2x1ZGVTdGRlcnIsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghXy5pc1N0cmluZyhjb21tYW5kKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYFRoZSAnY29tbWFuZCcgYXJndW1lbnQgaXMgbWFuZGF0b3J5YCk7XG4gIH1cblxuICBjb25zdCBhZGJBcmdzID0gW1xuICAgIC4uLnRoaXMuYWRiLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MsXG4gICAgJ3NoZWxsJyxcbiAgICBjb21tYW5kLFxuICAgIC4uLihfLmlzQXJyYXkoYXJncykgPyBhcmdzIDogW2FyZ3NdKVxuICBdO1xuICB0aGlzLmxvZy5kZWJ1ZyhgUnVubmluZyAnJHt0aGlzLmFkYi5leGVjdXRhYmxlLnBhdGh9ICR7dXRpbC5xdW90ZShhZGJBcmdzKX0nYCk7XG4gIHRyeSB7XG4gICAgY29uc3Qge3N0ZG91dCwgc3RkZXJyfSA9IGF3YWl0IGV4ZWModGhpcy5hZGIuZXhlY3V0YWJsZS5wYXRoLCBhZGJBcmdzLCB7dGltZW91dH0pO1xuICAgIGlmIChpbmNsdWRlU3RkZXJyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGRvdXQsXG4gICAgICAgIHN0ZGVyclxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ZG91dDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhpcy5sb2cuZXJyb3JBbmRUaHJvdyhgQ2Fubm90IGV4ZWN1dGUgdGhlICcke2NvbW1hbmR9JyBzaGVsbCBjb21tYW5kLiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX0uIGAgK1xuICAgICAgYFN0ZE91dDogJHtlcnIuc3Rkb3V0fS4gU3RkRXJyOiAke2Vyci5zdGRlcnJ9YCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxpQkFBaUIsR0FBRyxXQUExQjtBQUVBLElBQUlDLFFBQVEsR0FBRyxFQUFmOzs7QUFFQUEsUUFBUSxDQUFDQyxXQUFULEdBQXVCLGVBQWVBLFdBQWYsQ0FBNEJDLElBQUksR0FBRyxFQUFuQyxFQUF1QztFQUM1RCxLQUFLQyxvQkFBTCxDQUEwQkosaUJBQTFCO0VBRUEsTUFBTTtJQUNKSyxPQURJO0lBRUpDLElBQUksR0FBRyxFQUZIO0lBR0pDLE9BQU8sR0FBRyxLQUhOO0lBSUpDO0VBSkksSUFLRkwsSUFMSjs7RUFPQSxJQUFJLENBQUNNLGVBQUEsQ0FBRUMsUUFBRixDQUFXTCxPQUFYLENBQUwsRUFBMEI7SUFDeEIsTUFBTSxJQUFJTSxrQkFBQSxDQUFPQyxvQkFBWCxDQUFpQyxxQ0FBakMsQ0FBTjtFQUNEOztFQUVELE1BQU1DLE9BQU8sR0FBRyxDQUNkLEdBQUcsS0FBS0MsR0FBTCxDQUFTQyxVQUFULENBQW9CQyxXQURULEVBRWQsT0FGYyxFQUdkWCxPQUhjLEVBSWQsSUFBSUksZUFBQSxDQUFFUSxPQUFGLENBQVVYLElBQVYsSUFBa0JBLElBQWxCLEdBQXlCLENBQUNBLElBQUQsQ0FBN0IsQ0FKYyxDQUFoQjtFQU1BLEtBQUtZLEdBQUwsQ0FBU0MsS0FBVCxDQUFnQixZQUFXLEtBQUtMLEdBQUwsQ0FBU0MsVUFBVCxDQUFvQkssSUFBSyxJQUFHQyxhQUFBLENBQUtDLEtBQUwsQ0FBV1QsT0FBWCxDQUFvQixHQUEzRTs7RUFDQSxJQUFJO0lBQ0YsTUFBTTtNQUFDVSxNQUFEO01BQVNDO0lBQVQsSUFBbUIsTUFBTSxJQUFBQyxrQkFBQSxFQUFLLEtBQUtYLEdBQUwsQ0FBU0MsVUFBVCxDQUFvQkssSUFBekIsRUFBK0JQLE9BQS9CLEVBQXdDO01BQUNOO0lBQUQsQ0FBeEMsQ0FBL0I7O0lBQ0EsSUFBSUMsYUFBSixFQUFtQjtNQUNqQixPQUFPO1FBQ0xlLE1BREs7UUFFTEM7TUFGSyxDQUFQO0lBSUQ7O0lBQ0QsT0FBT0QsTUFBUDtFQUNELENBVEQsQ0FTRSxPQUFPRyxHQUFQLEVBQVk7SUFDWixLQUFLUixHQUFMLENBQVNTLGFBQVQsQ0FBd0IsdUJBQXNCdEIsT0FBUSxtQkFBL0IsR0FDcEIsbUJBQWtCcUIsR0FBRyxDQUFDRSxPQUFRLElBRFYsR0FFcEIsV0FBVUYsR0FBRyxDQUFDSCxNQUFPLGFBQVlHLEdBQUcsQ0FBQ0YsTUFBTyxFQUYvQztFQUdEO0FBQ0YsQ0FuQ0Q7O2VBc0NldkIsUSJ9
