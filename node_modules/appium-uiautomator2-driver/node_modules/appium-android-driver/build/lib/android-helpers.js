"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SETTINGS_HELPER_PKG_ID = exports.APP_STATE = void 0;
exports.ensureNetworkSpeed = ensureNetworkSpeed;
exports.helpers = void 0;
exports.prepareAvdArgs = prepareAvdArgs;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _support = require("@appium/support");

var _ioAppium = require("io.appium.settings");

var _bootstrap = _interopRequireDefault(require("./bootstrap"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumAdb = _interopRequireDefault(require("appium-adb"));

var _unlockHelpers = _interopRequireWildcard(require("./unlock-helpers"));

var _os = require("os");

var _semver = _interopRequireDefault(require("semver"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const PACKAGE_INSTALL_TIMEOUT = 90000;
const CHROME_BROWSER_PACKAGE_ACTIVITY = {
  chrome: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  chromium: {
    pkg: 'org.chromium.chrome.shell',
    activity: '.ChromeShellActivity'
  },
  chromebeta: {
    pkg: 'com.chrome.beta',
    activity: 'com.google.android.apps.chrome.Main'
  },
  browser: {
    pkg: 'com.android.browser',
    activity: 'com.android.browser.BrowserActivity'
  },
  'chromium-browser': {
    pkg: 'org.chromium.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  'chromium-webview': {
    pkg: 'org.chromium.webview_shell',
    activity: 'org.chromium.webview_shell.WebViewBrowserActivity'
  },
  default: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  }
};
const SETTINGS_HELPER_PKG_ID = 'io.appium.settings';
exports.SETTINGS_HELPER_PKG_ID = SETTINGS_HELPER_PKG_ID;
const SETTINGS_HELPER_UNLOCK_ACTIVITY = '.Unlock';
const EMULATOR_PATTERN = /\bemulator\b/i;
const APP_STATE = Object.freeze({
  NOT_INSTALLED: 0,
  NOT_RUNNING: 1,
  RUNNING_IN_BACKGROUND: 3,
  RUNNING_IN_FOREGROUND: 4
});
exports.APP_STATE = APP_STATE;

function ensureNetworkSpeed(adb, networkSpeed) {
  if (_lodash.default.values(adb.NETWORK_SPEED).includes(networkSpeed)) {
    return networkSpeed;
  }

  _logger.default.warn(`Wrong network speed param '${networkSpeed}', using default: ${adb.NETWORK_SPEED.FULL}. ` + `Supported values: ${_lodash.default.values(adb.NETWORK_SPEED)}`);

  return adb.NETWORK_SPEED.FULL;
}

function prepareAvdArgs(adb, opts) {
  const {
    networkSpeed,
    isHeadless,
    avdArgs
  } = opts;
  const result = [];

  if (avdArgs) {
    if (_lodash.default.isArray(avdArgs)) {
      result.push(...avdArgs);
    } else {
      result.push(..._support.util.shellParse(`${avdArgs}`));
    }
  }

  if (networkSpeed) {
    result.push('-netspeed', ensureNetworkSpeed(adb, networkSpeed));
  }

  if (isHeadless) {
    result.push('-no-window');
  }

  return result;
}

function toCredentialType(unlockType) {
  const result = {
    [_unlockHelpers.PIN_UNLOCK]: 'pin',
    [_unlockHelpers.PIN_UNLOCK_KEY_EVENT]: 'pin',
    [_unlockHelpers.PASSWORD_UNLOCK]: 'password',
    [_unlockHelpers.PATTERN_UNLOCK]: 'pattern'
  }[unlockType];

  if (result) {
    return result;
  }

  throw new Error(`Unlock type '${unlockType}' is not known`);
}

const helpers = {};
exports.helpers = helpers;

helpers.createBaseADB = async function createBaseADB(opts = {}) {
  const {
    adbPort,
    suppressKillServer,
    remoteAdbHost,
    clearDeviceLogsOnStart,
    adbExecTimeout,
    useKeystore,
    keystorePath,
    keystorePassword,
    keyAlias,
    keyPassword,
    remoteAppsCacheLimit,
    buildToolsVersion,
    allowOfflineDevices,
    allowDelayAdb
  } = opts;
  return await _appiumAdb.default.createADB({
    adbPort,
    suppressKillServer,
    remoteAdbHost,
    clearDeviceLogsOnStart,
    adbExecTimeout,
    useKeystore,
    keystorePath,
    keystorePassword,
    keyAlias,
    keyPassword,
    remoteAppsCacheLimit,
    buildToolsVersion,
    allowOfflineDevices,
    allowDelayAdb
  });
};

helpers.prepareEmulator = async function prepareEmulator(adb, opts) {
  const {
    avd,
    avdEnv: env,
    language,
    locale: country,
    avdLaunchTimeout: launchTimeout,
    avdReadyTimeout: readyTimeout
  } = opts;

  if (!avd) {
    throw new Error('Cannot launch AVD without AVD name');
  }

  const avdName = avd.replace('@', '');
  const runningAVD = await adb.getRunningAVD(avdName);
  const args = prepareAvdArgs(adb, opts);

  if (runningAVD) {
    if (args.includes('-wipe-data')) {
      _logger.default.debug(`Killing '${avdName}' because it needs to be wiped at start.`);

      await adb.killEmulator(avdName);
    } else {
      _logger.default.debug('Not launching AVD because it is already running.');

      return;
    }
  }

  await adb.launchAVD(avd, {
    args,
    env,
    language,
    country,
    launchTimeout,
    readyTimeout
  });
};

helpers.ensureDeviceLocale = async function ensureDeviceLocale(adb, language, country, script = null) {
  if (!_lodash.default.isString(language) && !_lodash.default.isString(country)) {
    _logger.default.warn(`setDeviceLanguageCountry requires language or country.`);

    _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

    return;
  }

  await adb.setDeviceLanguageCountry(language, country, script);

  if (!(await adb.ensureCurrentLocale(language, country, script))) {
    const message = script ? `language: ${language}, country: ${country} and script: ${script}` : `language: ${language} and country: ${country}`;
    throw new Error(`Failed to set ${message}`);
  }
};

helpers.getDeviceInfoFromCaps = async function getDeviceInfoFromCaps(opts = {}) {
  const adb = await helpers.createBaseADB(opts);
  let udid = opts.udid;
  let emPort = null;

  if (opts.avd) {
    await helpers.prepareEmulator(adb, opts);
    udid = adb.curDeviceId;
    emPort = adb.emulatorPort;
  } else {
    _logger.default.info('Retrieving device list');

    let devices = await adb.getDevicesWithRetry();

    if (udid) {
      if (!_lodash.default.includes(_lodash.default.map(devices, 'udid'), udid)) {
        _logger.default.errorAndThrow(`Device ${udid} was not in the list of connected devices`);
      }

      emPort = adb.getPortFromEmulatorString(udid);
    } else if (opts.platformVersion) {
      opts.platformVersion = `${opts.platformVersion}`.trim();
      const platformVersion = _semver.default.coerce(opts.platformVersion) || opts.platformVersion;

      _logger.default.info(`Looking for a device with Android '${platformVersion}'`);

      const availDevices = [];
      let partialMatchCandidate = null;

      for (const device of devices) {
        await adb.setDeviceId(device.udid);
        const rawDeviceOS = await adb.getPlatformVersion();
        availDevices.push(`${device.udid} (${rawDeviceOS})`);
        const deviceOS = _semver.default.coerce(rawDeviceOS) || rawDeviceOS;

        if (!deviceOS) {
          continue;
        }

        const bothVersionsCanBeCoerced = _semver.default.valid(deviceOS) && _semver.default.valid(platformVersion);

        const bothVersionsAreStrings = _lodash.default.isString(deviceOS) && _lodash.default.isString(platformVersion);

        if (bothVersionsCanBeCoerced && deviceOS.version === platformVersion.version || bothVersionsAreStrings && _lodash.default.toLower(deviceOS) === _lodash.default.toLower(platformVersion)) {
          udid = device.udid;
          break;
        } else if (!bothVersionsCanBeCoerced) {
          continue;
        }

        if ((!_lodash.default.includes(opts.platformVersion, '.') && platformVersion.major === deviceOS.major || platformVersion.major === deviceOS.major && platformVersion.minor === deviceOS.minor) && (partialMatchCandidate && _semver.default.gt(deviceOS, _lodash.default.values(partialMatchCandidate)[0]) || !partialMatchCandidate)) {
          partialMatchCandidate = {
            [device.udid]: deviceOS
          };
        }
      }

      if (!udid && partialMatchCandidate) {
        udid = _lodash.default.keys(partialMatchCandidate)[0];
        await adb.setDeviceId(udid);
      }

      if (!udid) {
        _logger.default.errorAndThrow(`Unable to find an active device or emulator ` + `with OS ${opts.platformVersion}. The following are available: ` + availDevices.join(', '));
      }

      emPort = adb.getPortFromEmulatorString(udid);
    } else {
      udid = devices[0].udid;
      emPort = adb.getPortFromEmulatorString(udid);
    }
  }

  _logger.default.info(`Using device: ${udid}`);

  return {
    udid,
    emPort
  };
};

helpers.createADB = async function createADB(opts = {}) {
  const {
    udid,
    emPort
  } = opts;
  const adb = await helpers.createBaseADB(opts);
  adb.setDeviceId(udid);

  if (emPort) {
    adb.setEmulatorPort(emPort);
  }

  return adb;
};

helpers.validatePackageActivityNames = function validatePackageActivityNames(opts) {
  for (const key of ['appPackage', 'appActivity', 'appWaitPackage', 'appWaitActivity']) {
    const name = opts[key];

    if (!name) {
      continue;
    }

    const match = /([^\w.*,])+/.exec(name);

    if (!match) {
      continue;
    }

    _logger.default.warn(`Capability '${key}' is expected to only include latin letters, digits, underscore, dot, comma and asterisk characters.`);

    _logger.default.warn(`Current value '${name}' has non-matching character at index ${match.index}: '${name.substring(0, match.index + 1)}'`);
  }
};

helpers.getLaunchInfo = async function getLaunchInfo(adb, opts) {
  let {
    app,
    appPackage,
    appActivity,
    appWaitPackage,
    appWaitActivity
  } = opts;

  if (!app) {
    _logger.default.warn('No app sent in, not parsing package/activity');

    return;
  }

  this.validatePackageActivityNames(opts);

  if (appPackage && appActivity) {
    return;
  }

  _logger.default.debug('Parsing package and activity from app manifest');

  let {
    apkPackage,
    apkActivity
  } = await adb.packageAndLaunchActivityFromManifest(app);

  if (apkPackage && !appPackage) {
    appPackage = apkPackage;
  }

  if (!appWaitPackage) {
    appWaitPackage = appPackage;
  }

  if (apkActivity && !appActivity) {
    appActivity = apkActivity;
  }

  if (!appWaitActivity) {
    appWaitActivity = appActivity;
  }

  _logger.default.debug(`Parsed package and activity are: ${apkPackage}/${apkActivity}`);

  return {
    appPackage,
    appWaitPackage,
    appActivity,
    appWaitActivity
  };
};

helpers.resetApp = async function resetApp(adb, opts = {}) {
  const {
    app,
    appPackage,
    fastReset,
    fullReset,
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages
  } = opts;

  if (!appPackage) {
    throw new Error("'appPackage' option is required");
  }

  const isInstalled = await adb.isAppInstalled(appPackage);

  if (isInstalled) {
    try {
      await adb.forceStop(appPackage);
    } catch (ign) {}

    if (!fullReset && fastReset) {
      const output = await adb.clear(appPackage);

      if (_lodash.default.isString(output) && output.toLowerCase().includes('failed')) {
        throw new Error(`Cannot clear the application data of '${appPackage}'. Original error: ${output}`);
      }

      if (autoGrantPermissions) {
        try {
          await adb.grantAllPermissions(appPackage);
        } catch (error) {
          _logger.default.error(`Unable to grant permissions requested. Original error: ${error.message}`);
        }
      }

      _logger.default.debug(`Performed fast reset on the installed '${appPackage}' application (stop and clear)`);

      return;
    }
  }

  if (!app) {
    throw new Error("'app' option is required for reinstall");
  }

  _logger.default.debug(`Running full reset on '${appPackage}' (reinstall)`);

  if (isInstalled) {
    await adb.uninstallApk(appPackage);
  }

  await adb.install(app, {
    grantPermissions: autoGrantPermissions,
    timeout: androidInstallTimeout,
    allowTestPackages
  });
};

helpers.installApk = async function installApk(adb, opts = {}) {
  const {
    app,
    appPackage,
    fastReset,
    fullReset,
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages,
    enforceAppInstall
  } = opts;

  if (!app || !appPackage) {
    throw new Error("'app' and 'appPackage' options are required");
  }

  if (fullReset) {
    await this.resetApp(adb, opts);
    return;
  }

  const {
    appState,
    wasUninstalled
  } = await adb.installOrUpgrade(app, appPackage, {
    grantPermissions: autoGrantPermissions,
    timeout: androidInstallTimeout,
    allowTestPackages,
    enforceCurrentBuild: enforceAppInstall
  });
  const isInstalledOverExistingApp = !wasUninstalled && appState !== adb.APP_INSTALL_STATE.NOT_INSTALLED;

  if (fastReset && isInstalledOverExistingApp) {
    _logger.default.info(`Performing fast reset on '${appPackage}'`);

    await this.resetApp(adb, opts);
  }
};

helpers.installOtherApks = async function installOtherApks(otherApps, adb, opts) {
  let {
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages
  } = opts;
  await _bluebird.default.all(otherApps.map(otherApp => {
    _logger.default.debug(`Installing app: ${otherApp}`);

    return adb.installOrUpgrade(otherApp, null, {
      grantPermissions: autoGrantPermissions,
      timeout: androidInstallTimeout,
      allowTestPackages
    });
  }));
};

helpers.uninstallOtherPackages = async function uninstallOtherPackages(adb, appPackages, filterPackages = []) {
  if (appPackages.includes('*')) {
    _logger.default.debug('Uninstall third party packages');

    appPackages = await this.getThirdPartyPackages(adb, filterPackages);
  }

  _logger.default.debug(`Uninstalling packages: ${appPackages}`);

  await _bluebird.default.all(appPackages.map(appPackage => adb.uninstallApk(appPackage)));
};

helpers.getThirdPartyPackages = async function getThirdPartyPackages(adb, filterPackages = []) {
  try {
    const packagesString = await adb.shell(['pm', 'list', 'packages', '-3']);
    const appPackagesArray = packagesString.trim().replace(/package:/g, '').split(_os.EOL);

    _logger.default.debug(`'${appPackagesArray}' filtered with '${filterPackages}'`);

    return _lodash.default.difference(appPackagesArray, filterPackages);
  } catch (err) {
    _logger.default.warn(`Unable to get packages with 'adb shell pm list packages -3': ${err.message}`);

    return [];
  }
};

helpers.initUnicodeKeyboard = async function initUnicodeKeyboard(adb) {
  _logger.default.debug('Enabling Unicode keyboard support');

  let defaultIME = await adb.defaultIME();

  _logger.default.debug(`Unsetting previous IME ${defaultIME}`);

  const appiumIME = `${SETTINGS_HELPER_PKG_ID}/.UnicodeIME`;

  _logger.default.debug(`Setting IME to '${appiumIME}'`);

  await adb.enableIME(appiumIME);
  await adb.setIME(appiumIME);
  return defaultIME;
};

helpers.setMockLocationApp = async function setMockLocationApp(adb, app) {
  try {
    if ((await adb.getApiLevel()) < 23) {
      await adb.shell(['settings', 'put', 'secure', 'mock_location', '1']);
    } else {
      await adb.shell(['appops', 'set', app, 'android:mock_location', 'allow']);
    }
  } catch (err) {
    _logger.default.warn(`Unable to set mock location for app '${app}': ${err.message}`);
  }
};

helpers.installHelperApp = async function installHelperApp(adb, apkPath, packageId) {
  await (0, _asyncbox.retry)(2, async function retryInstallHelperApp() {
    await adb.installOrUpgrade(apkPath, packageId, {
      grantPermissions: true
    });
  });
};

helpers.pushSettingsApp = async function pushSettingsApp(adb, throwError = false) {
  _logger.default.debug('Pushing settings apk to device...');

  try {
    await helpers.installHelperApp(adb, _ioAppium.path, SETTINGS_HELPER_PKG_ID, throwError);
  } catch (err) {
    if (throwError) {
      throw err;
    }

    _logger.default.warn(`Ignored error while installing '${_ioAppium.path}': ` + `'${err.message}'. Features that rely on this helper ` + 'require the apk such as toggle WiFi and getting location ' + 'will raise an error if you try to use them.');
  }

  if (await adb.processExists(SETTINGS_HELPER_PKG_ID)) {
    _logger.default.debug(`${SETTINGS_HELPER_PKG_ID} is already running. ` + `There is no need to reset its permissions.`);

    return;
  }

  if ((await adb.getApiLevel()) <= 23) {
    const perms = ['SET_ANIMATION_SCALE', 'CHANGE_CONFIGURATION', 'ACCESS_FINE_LOCATION'];

    _logger.default.info(`Granting permissions ${perms} to '${SETTINGS_HELPER_PKG_ID}'`);

    await adb.grantPermissions(SETTINGS_HELPER_PKG_ID, perms.map(x => `android.permission.${x}`));
  }

  try {
    await adb.requireRunningSettingsApp();
  } catch (err) {
    _logger.default.debug(err);

    if (throwError) {
      throw err;
    }
  }
};

helpers.pushStrings = async function pushStrings(language, adb, opts) {
  const remoteDir = '/data/local/tmp';
  const stringsJson = 'strings.json';

  const remoteFile = _path.default.posix.resolve(remoteDir, stringsJson);

  await adb.rimraf(remoteFile);
  let app;

  try {
    app = opts.app || (await adb.pullApk(opts.appPackage, opts.tmpDir));
  } catch (err) {
    _logger.default.info(`Failed to pull an apk from '${opts.appPackage}' to '${opts.tmpDir}'. Original error: ${err.message}`);
  }

  if (_lodash.default.isEmpty(opts.appPackage) || !(await _support.fs.exists(app))) {
    _logger.default.debug(`No app or package specified. Returning empty strings`);

    return {};
  }

  const stringsTmpDir = _path.default.resolve(opts.tmpDir, opts.appPackage);

  try {
    _logger.default.debug('Extracting strings from apk', app, language, stringsTmpDir);

    const {
      apkStrings,
      localPath
    } = await adb.extractStringsFromApk(app, language, stringsTmpDir);
    await adb.push(localPath, remoteDir);
    return apkStrings;
  } catch (err) {
    _logger.default.warn(`Could not get strings, continuing anyway. Original error: ${err.message}`);

    await adb.shell('echo', [`'{}' > ${remoteFile}`]);
  } finally {
    await _support.fs.rimraf(stringsTmpDir);
  }

  return {};
};

helpers.unlockWithHelperApp = async function unlockWithHelperApp(adb) {
  _logger.default.info('Unlocking screen');

  let firstRun = true;
  await (0, _asyncbox.retry)(3, async function launchHelper() {
    if (firstRun) {
      firstRun = false;
    } else {
      try {
        if (!(await adb.isScreenLocked())) {
          return;
        }
      } catch (e) {
        _logger.default.warn(`Error in isScreenLocked: ${e.message}`);

        _logger.default.warn('"adb shell dumpsys window" command has timed out.');

        _logger.default.warn('The reason of this timeout is the delayed adb response. Resetting adb server can improve it.');
      }
    }

    _logger.default.info(`Launching ${SETTINGS_HELPER_UNLOCK_ACTIVITY}`);

    await adb.shell(['am', 'start', '-n', `${SETTINGS_HELPER_PKG_ID}/${SETTINGS_HELPER_UNLOCK_ACTIVITY}`, '-c', 'android.intent.category.LAUNCHER', '-a', 'android.intent.action.MAIN', '-f', '0x10200000']);
    await _bluebird.default.delay(1000);
  });
};

helpers.unlock = async function unlock(driver, adb, capabilities) {
  if (!(await adb.isScreenLocked())) {
    _logger.default.info('Screen already unlocked, doing nothing');

    return;
  }

  _logger.default.debug('Screen is locked, trying to unlock');

  if (!capabilities.unlockType && !capabilities.unlockKey) {
    _logger.default.warn('Using app unlock, this is going to be deprecated!');

    await helpers.unlockWithHelperApp(adb);
    return;
  }

  const {
    unlockType,
    unlockKey,
    unlockStrategy,
    unlockSuccessTimeout
  } = _unlockHelpers.default.validateUnlockCapabilities(capabilities);

  if (unlockKey && unlockType !== _unlockHelpers.FINGERPRINT_UNLOCK && (_lodash.default.isNil(unlockStrategy) || _lodash.default.toLower(unlockStrategy) === 'locksettings') && (await adb.isLockManagementSupported())) {
    await _unlockHelpers.default.fastUnlock(adb, {
      credential: unlockKey,
      credentialType: toCredentialType(unlockType)
    });
  } else {
    const unlockMethod = {
      [_unlockHelpers.PIN_UNLOCK]: _unlockHelpers.default.pinUnlock,
      [_unlockHelpers.PIN_UNLOCK_KEY_EVENT]: _unlockHelpers.default.pinUnlockWithKeyEvent,
      [_unlockHelpers.PASSWORD_UNLOCK]: _unlockHelpers.default.passwordUnlock,
      [_unlockHelpers.PATTERN_UNLOCK]: _unlockHelpers.default.patternUnlock,
      [_unlockHelpers.FINGERPRINT_UNLOCK]: _unlockHelpers.default.fingerprintUnlock
    }[unlockType];
    await unlockMethod(adb, driver, capabilities);
  }

  await helpers.verifyUnlock(adb, unlockSuccessTimeout);
};

helpers.verifyUnlock = async function verifyUnlock(adb, timeoutMs = null) {
  try {
    await (0, _asyncbox.waitForCondition)(async () => !(await adb.isScreenLocked()), {
      waitMs: timeoutMs !== null && timeoutMs !== void 0 ? timeoutMs : 2000,
      intervalMs: 500
    });
  } catch (ign) {
    throw new Error('The device has failed to be unlocked');
  }

  _logger.default.info('The device has been successfully unlocked');
};

helpers.initDevice = async function initDevice(adb, opts) {
  const {
    skipDeviceInitialization,
    locale,
    language,
    localeScript,
    unicodeKeyboard,
    disableWindowAnimation,
    skipUnlock,
    mockLocationApp,
    skipLogcatCapture,
    logcatFormat,
    logcatFilterSpecs
  } = opts;

  if (skipDeviceInitialization) {
    _logger.default.info(`'skipDeviceInitialization' is set. Skipping device initialization.`);
  } else {
    await adb.waitForDevice();
    const shouldThrowError = language || locale || localeScript || unicodeKeyboard || disableWindowAnimation || !skipUnlock;
    await helpers.pushSettingsApp(adb, shouldThrowError);
  }

  if (!helpers.isEmulator(adb, opts) && (mockLocationApp || _lodash.default.isUndefined(mockLocationApp))) {
    await helpers.setMockLocationApp(adb, mockLocationApp || SETTINGS_HELPER_PKG_ID);
  }

  if (language || locale) {
    await helpers.ensureDeviceLocale(adb, language, locale, localeScript);
  }

  if (skipLogcatCapture) {
    _logger.default.info(`'skipLogcatCapture' is set. Skipping starting logcat capture.`);
  } else {
    await adb.startLogcat({
      format: logcatFormat,
      filterSpecs: logcatFilterSpecs
    });
  }

  if (unicodeKeyboard) {
    return await helpers.initUnicodeKeyboard(adb);
  }
};

helpers.removeNullProperties = function removeNullProperties(obj) {
  for (let key of _lodash.default.keys(obj)) {
    if (_lodash.default.isNull(obj[key]) || _lodash.default.isUndefined(obj[key])) {
      delete obj[key];
    }
  }
};

helpers.truncateDecimals = function truncateDecimals(number, digits) {
  let multiplier = Math.pow(10, digits),
      adjustedNum = number * multiplier,
      truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);
  return truncatedNum / multiplier;
};

helpers.isChromeBrowser = function isChromeBrowser(browser) {
  return _lodash.default.includes(Object.keys(CHROME_BROWSER_PACKAGE_ACTIVITY), (browser || '').toLowerCase());
};

helpers.getChromePkg = function getChromePkg(browser) {
  return CHROME_BROWSER_PACKAGE_ACTIVITY[browser.toLowerCase()] || CHROME_BROWSER_PACKAGE_ACTIVITY.default;
};

helpers.removeAllSessionWebSocketHandlers = async function removeAllSessionWebSocketHandlers(server, sessionId) {
  if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
    return;
  }

  const activeHandlers = await server.getWebSocketHandlers(sessionId);

  for (const pathname of _lodash.default.keys(activeHandlers)) {
    await server.removeWebSocketHandler(pathname);
  }
};

helpers.parseArray = function parseArray(cap) {
  let parsedCaps;

  try {
    parsedCaps = JSON.parse(cap);
  } catch (ign) {}

  if (_lodash.default.isArray(parsedCaps)) {
    return parsedCaps;
  } else if (_lodash.default.isString(cap)) {
    return [cap];
  }

  throw new Error(`must provide a string or JSON Array; received ${cap}`);
};

helpers.validateDesiredCaps = function validateDesiredCaps(caps) {
  if (caps.browserName) {
    if (caps.app) {
      _logger.default.warn(`The desired capabilities should generally not include both an 'app' and a 'browserName'`);
    }

    if (caps.appPackage) {
      _logger.default.errorAndThrow(`The desired should not include both of an 'appPackage' and a 'browserName'`);
    }
  }

  if (caps.uninstallOtherPackages) {
    try {
      this.parseArray(caps.uninstallOtherPackages);
    } catch (e) {
      _logger.default.errorAndThrow(`Could not parse "uninstallOtherPackages" capability: ${e.message}`);
    }
  }

  return true;
};

helpers.adjustBrowserSessionCaps = function adjustBrowserSessionCaps(caps = {}) {
  const {
    browserName
  } = caps;

  _logger.default.info(`The current session is considered browser-based`);

  _logger.default.info(`Supported browser names: ${JSON.stringify(_lodash.default.keys(CHROME_BROWSER_PACKAGE_ACTIVITY))}`);

  if (caps.appPackage || caps.appActivity) {
    _logger.default.info(`Not overriding appPackage/appActivity capability values for '${browserName}' ` + 'because some of them have been already provided');

    return caps;
  }

  const {
    pkg,
    activity
  } = this.getChromePkg(browserName);
  caps.appPackage = pkg;
  caps.appActivity = activity;

  _logger.default.info(`appPackage/appActivity capabilities have been automatically set to ${pkg}/${activity} ` + `for '${browserName}'`);

  _logger.default.info(`Consider changing the browserName to the one from the list of supported browser names ` + `or provide custom appPackage/appActivity capability values if the automatically assigned ones do ` + `not make sense`);

  return caps;
};

helpers.isEmulator = function isEmulator(adb, opts) {
  const possibleNames = [opts.udid, adb === null || adb === void 0 ? void 0 : adb.curDeviceId];
  return !!opts.avd || possibleNames.some(x => EMULATOR_PATTERN.test(x));
};

helpers.bootstrap = _bootstrap.default;
helpers.unlocker = _unlockHelpers.default;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2FuZHJvaWQtaGVscGVycy5qcyIsIm5hbWVzIjpbIlBBQ0tBR0VfSU5TVEFMTF9USU1FT1VUIiwiQ0hST01FX0JST1dTRVJfUEFDS0FHRV9BQ1RJVklUWSIsImNocm9tZSIsInBrZyIsImFjdGl2aXR5IiwiY2hyb21pdW0iLCJjaHJvbWViZXRhIiwiYnJvd3NlciIsImRlZmF1bHQiLCJTRVRUSU5HU19IRUxQRVJfUEtHX0lEIiwiU0VUVElOR1NfSEVMUEVSX1VOTE9DS19BQ1RJVklUWSIsIkVNVUxBVE9SX1BBVFRFUk4iLCJBUFBfU1RBVEUiLCJPYmplY3QiLCJmcmVlemUiLCJOT1RfSU5TVEFMTEVEIiwiTk9UX1JVTk5JTkciLCJSVU5OSU5HX0lOX0JBQ0tHUk9VTkQiLCJSVU5OSU5HX0lOX0ZPUkVHUk9VTkQiLCJlbnN1cmVOZXR3b3JrU3BlZWQiLCJhZGIiLCJuZXR3b3JrU3BlZWQiLCJfIiwidmFsdWVzIiwiTkVUV09SS19TUEVFRCIsImluY2x1ZGVzIiwibG9nZ2VyIiwid2FybiIsIkZVTEwiLCJwcmVwYXJlQXZkQXJncyIsIm9wdHMiLCJpc0hlYWRsZXNzIiwiYXZkQXJncyIsInJlc3VsdCIsImlzQXJyYXkiLCJwdXNoIiwidXRpbCIsInNoZWxsUGFyc2UiLCJ0b0NyZWRlbnRpYWxUeXBlIiwidW5sb2NrVHlwZSIsIlBJTl9VTkxPQ0siLCJQSU5fVU5MT0NLX0tFWV9FVkVOVCIsIlBBU1NXT1JEX1VOTE9DSyIsIlBBVFRFUk5fVU5MT0NLIiwiRXJyb3IiLCJoZWxwZXJzIiwiY3JlYXRlQmFzZUFEQiIsImFkYlBvcnQiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJyZW1vdGVBZGJIb3N0IiwiY2xlYXJEZXZpY2VMb2dzT25TdGFydCIsImFkYkV4ZWNUaW1lb3V0IiwidXNlS2V5c3RvcmUiLCJrZXlzdG9yZVBhdGgiLCJrZXlzdG9yZVBhc3N3b3JkIiwia2V5QWxpYXMiLCJrZXlQYXNzd29yZCIsInJlbW90ZUFwcHNDYWNoZUxpbWl0IiwiYnVpbGRUb29sc1ZlcnNpb24iLCJhbGxvd09mZmxpbmVEZXZpY2VzIiwiYWxsb3dEZWxheUFkYiIsIkFEQiIsImNyZWF0ZUFEQiIsInByZXBhcmVFbXVsYXRvciIsImF2ZCIsImF2ZEVudiIsImVudiIsImxhbmd1YWdlIiwibG9jYWxlIiwiY291bnRyeSIsImF2ZExhdW5jaFRpbWVvdXQiLCJsYXVuY2hUaW1lb3V0IiwiYXZkUmVhZHlUaW1lb3V0IiwicmVhZHlUaW1lb3V0IiwiYXZkTmFtZSIsInJlcGxhY2UiLCJydW5uaW5nQVZEIiwiZ2V0UnVubmluZ0FWRCIsImFyZ3MiLCJkZWJ1ZyIsImtpbGxFbXVsYXRvciIsImxhdW5jaEFWRCIsImVuc3VyZURldmljZUxvY2FsZSIsInNjcmlwdCIsImlzU3RyaW5nIiwic2V0RGV2aWNlTGFuZ3VhZ2VDb3VudHJ5IiwiZW5zdXJlQ3VycmVudExvY2FsZSIsIm1lc3NhZ2UiLCJnZXREZXZpY2VJbmZvRnJvbUNhcHMiLCJ1ZGlkIiwiZW1Qb3J0IiwiY3VyRGV2aWNlSWQiLCJlbXVsYXRvclBvcnQiLCJpbmZvIiwiZGV2aWNlcyIsImdldERldmljZXNXaXRoUmV0cnkiLCJtYXAiLCJlcnJvckFuZFRocm93IiwiZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyIsInBsYXRmb3JtVmVyc2lvbiIsInRyaW0iLCJzZW12ZXIiLCJjb2VyY2UiLCJhdmFpbERldmljZXMiLCJwYXJ0aWFsTWF0Y2hDYW5kaWRhdGUiLCJkZXZpY2UiLCJzZXREZXZpY2VJZCIsInJhd0RldmljZU9TIiwiZ2V0UGxhdGZvcm1WZXJzaW9uIiwiZGV2aWNlT1MiLCJib3RoVmVyc2lvbnNDYW5CZUNvZXJjZWQiLCJ2YWxpZCIsImJvdGhWZXJzaW9uc0FyZVN0cmluZ3MiLCJ2ZXJzaW9uIiwidG9Mb3dlciIsIm1ham9yIiwibWlub3IiLCJndCIsImtleXMiLCJqb2luIiwic2V0RW11bGF0b3JQb3J0IiwidmFsaWRhdGVQYWNrYWdlQWN0aXZpdHlOYW1lcyIsImtleSIsIm5hbWUiLCJtYXRjaCIsImV4ZWMiLCJpbmRleCIsInN1YnN0cmluZyIsImdldExhdW5jaEluZm8iLCJhcHAiLCJhcHBQYWNrYWdlIiwiYXBwQWN0aXZpdHkiLCJhcHBXYWl0UGFja2FnZSIsImFwcFdhaXRBY3Rpdml0eSIsImFwa1BhY2thZ2UiLCJhcGtBY3Rpdml0eSIsInBhY2thZ2VBbmRMYXVuY2hBY3Rpdml0eUZyb21NYW5pZmVzdCIsInJlc2V0QXBwIiwiZmFzdFJlc2V0IiwiZnVsbFJlc2V0IiwiYW5kcm9pZEluc3RhbGxUaW1lb3V0IiwiYXV0b0dyYW50UGVybWlzc2lvbnMiLCJhbGxvd1Rlc3RQYWNrYWdlcyIsImlzSW5zdGFsbGVkIiwiaXNBcHBJbnN0YWxsZWQiLCJmb3JjZVN0b3AiLCJpZ24iLCJvdXRwdXQiLCJjbGVhciIsInRvTG93ZXJDYXNlIiwiZ3JhbnRBbGxQZXJtaXNzaW9ucyIsImVycm9yIiwidW5pbnN0YWxsQXBrIiwiaW5zdGFsbCIsImdyYW50UGVybWlzc2lvbnMiLCJ0aW1lb3V0IiwiaW5zdGFsbEFwayIsImVuZm9yY2VBcHBJbnN0YWxsIiwiYXBwU3RhdGUiLCJ3YXNVbmluc3RhbGxlZCIsImluc3RhbGxPclVwZ3JhZGUiLCJlbmZvcmNlQ3VycmVudEJ1aWxkIiwiaXNJbnN0YWxsZWRPdmVyRXhpc3RpbmdBcHAiLCJBUFBfSU5TVEFMTF9TVEFURSIsImluc3RhbGxPdGhlckFwa3MiLCJvdGhlckFwcHMiLCJCIiwiYWxsIiwib3RoZXJBcHAiLCJ1bmluc3RhbGxPdGhlclBhY2thZ2VzIiwiYXBwUGFja2FnZXMiLCJmaWx0ZXJQYWNrYWdlcyIsImdldFRoaXJkUGFydHlQYWNrYWdlcyIsInBhY2thZ2VzU3RyaW5nIiwic2hlbGwiLCJhcHBQYWNrYWdlc0FycmF5Iiwic3BsaXQiLCJFT0wiLCJkaWZmZXJlbmNlIiwiZXJyIiwiaW5pdFVuaWNvZGVLZXlib2FyZCIsImRlZmF1bHRJTUUiLCJhcHBpdW1JTUUiLCJlbmFibGVJTUUiLCJzZXRJTUUiLCJzZXRNb2NrTG9jYXRpb25BcHAiLCJnZXRBcGlMZXZlbCIsImluc3RhbGxIZWxwZXJBcHAiLCJhcGtQYXRoIiwicGFja2FnZUlkIiwicmV0cnkiLCJyZXRyeUluc3RhbGxIZWxwZXJBcHAiLCJwdXNoU2V0dGluZ3NBcHAiLCJ0aHJvd0Vycm9yIiwic2V0dGluZ3NBcGtQYXRoIiwicHJvY2Vzc0V4aXN0cyIsInBlcm1zIiwieCIsInJlcXVpcmVSdW5uaW5nU2V0dGluZ3NBcHAiLCJwdXNoU3RyaW5ncyIsInJlbW90ZURpciIsInN0cmluZ3NKc29uIiwicmVtb3RlRmlsZSIsInBhdGgiLCJwb3NpeCIsInJlc29sdmUiLCJyaW1yYWYiLCJwdWxsQXBrIiwidG1wRGlyIiwiaXNFbXB0eSIsImZzIiwiZXhpc3RzIiwic3RyaW5nc1RtcERpciIsImFwa1N0cmluZ3MiLCJsb2NhbFBhdGgiLCJleHRyYWN0U3RyaW5nc0Zyb21BcGsiLCJ1bmxvY2tXaXRoSGVscGVyQXBwIiwiZmlyc3RSdW4iLCJsYXVuY2hIZWxwZXIiLCJpc1NjcmVlbkxvY2tlZCIsImUiLCJkZWxheSIsInVubG9jayIsImRyaXZlciIsImNhcGFiaWxpdGllcyIsInVubG9ja0tleSIsInVubG9ja1N0cmF0ZWd5IiwidW5sb2NrU3VjY2Vzc1RpbWVvdXQiLCJ1bmxvY2tlciIsInZhbGlkYXRlVW5sb2NrQ2FwYWJpbGl0aWVzIiwiRklOR0VSUFJJTlRfVU5MT0NLIiwiaXNOaWwiLCJpc0xvY2tNYW5hZ2VtZW50U3VwcG9ydGVkIiwiZmFzdFVubG9jayIsImNyZWRlbnRpYWwiLCJjcmVkZW50aWFsVHlwZSIsInVubG9ja01ldGhvZCIsInBpblVubG9jayIsInBpblVubG9ja1dpdGhLZXlFdmVudCIsInBhc3N3b3JkVW5sb2NrIiwicGF0dGVyblVubG9jayIsImZpbmdlcnByaW50VW5sb2NrIiwidmVyaWZ5VW5sb2NrIiwidGltZW91dE1zIiwid2FpdEZvckNvbmRpdGlvbiIsIndhaXRNcyIsImludGVydmFsTXMiLCJpbml0RGV2aWNlIiwic2tpcERldmljZUluaXRpYWxpemF0aW9uIiwibG9jYWxlU2NyaXB0IiwidW5pY29kZUtleWJvYXJkIiwiZGlzYWJsZVdpbmRvd0FuaW1hdGlvbiIsInNraXBVbmxvY2siLCJtb2NrTG9jYXRpb25BcHAiLCJza2lwTG9nY2F0Q2FwdHVyZSIsImxvZ2NhdEZvcm1hdCIsImxvZ2NhdEZpbHRlclNwZWNzIiwid2FpdEZvckRldmljZSIsInNob3VsZFRocm93RXJyb3IiLCJpc0VtdWxhdG9yIiwiaXNVbmRlZmluZWQiLCJzdGFydExvZ2NhdCIsImZvcm1hdCIsImZpbHRlclNwZWNzIiwicmVtb3ZlTnVsbFByb3BlcnRpZXMiLCJvYmoiLCJpc051bGwiLCJ0cnVuY2F0ZURlY2ltYWxzIiwibnVtYmVyIiwiZGlnaXRzIiwibXVsdGlwbGllciIsIk1hdGgiLCJwb3ciLCJhZGp1c3RlZE51bSIsInRydW5jYXRlZE51bSIsImlzQ2hyb21lQnJvd3NlciIsImdldENocm9tZVBrZyIsInJlbW92ZUFsbFNlc3Npb25XZWJTb2NrZXRIYW5kbGVycyIsInNlcnZlciIsInNlc3Npb25JZCIsImlzRnVuY3Rpb24iLCJnZXRXZWJTb2NrZXRIYW5kbGVycyIsImFjdGl2ZUhhbmRsZXJzIiwicGF0aG5hbWUiLCJyZW1vdmVXZWJTb2NrZXRIYW5kbGVyIiwicGFyc2VBcnJheSIsImNhcCIsInBhcnNlZENhcHMiLCJKU09OIiwicGFyc2UiLCJ2YWxpZGF0ZURlc2lyZWRDYXBzIiwiY2FwcyIsImJyb3dzZXJOYW1lIiwiYWRqdXN0QnJvd3NlclNlc3Npb25DYXBzIiwic3RyaW5naWZ5IiwicG9zc2libGVOYW1lcyIsInNvbWUiLCJ0ZXN0IiwiYm9vdHN0cmFwIiwiQm9vdHN0cmFwIl0sInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXMiOlsibGliL2FuZHJvaWQtaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZXRyeSwgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZnMsIHV0aWwgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgcGF0aCBhcyBzZXR0aW5nc0Fwa1BhdGggfSBmcm9tICdpby5hcHBpdW0uc2V0dGluZ3MnO1xuaW1wb3J0IEJvb3RzdHJhcCBmcm9tICcuL2Jvb3RzdHJhcCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgQURCIGZyb20gJ2FwcGl1bS1hZGInO1xuaW1wb3J0IHtcbiAgZGVmYXVsdCBhcyB1bmxvY2tlciwgUElOX1VOTE9DSywgUElOX1VOTE9DS19LRVlfRVZFTlQsXG4gIFBBU1NXT1JEX1VOTE9DSywgUEFUVEVSTl9VTkxPQ0ssIEZJTkdFUlBSSU5UX1VOTE9DS1xufSBmcm9tICcuL3VubG9jay1oZWxwZXJzJztcbmltcG9ydCB7IEVPTCB9IGZyb20gJ29zJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxuY29uc3QgUEFDS0FHRV9JTlNUQUxMX1RJTUVPVVQgPSA5MDAwMDsgLy8gbWlsbGlzZWNvbmRzXG4vLyBodHRwczovL2NzLmNocm9taXVtLm9yZy9jaHJvbWl1bS9zcmMvY2hyb21lL2Jyb3dzZXIvZGV2dG9vbHMvZGV2aWNlL2FuZHJvaWRfZGV2aWNlX2luZm9fcXVlcnkuY2NcbmNvbnN0IENIUk9NRV9CUk9XU0VSX1BBQ0tBR0VfQUNUSVZJVFkgPSB7XG4gIGNocm9tZToge1xuICAgIHBrZzogJ2NvbS5hbmRyb2lkLmNocm9tZScsXG4gICAgYWN0aXZpdHk6ICdjb20uZ29vZ2xlLmFuZHJvaWQuYXBwcy5jaHJvbWUuTWFpbicsXG4gIH0sXG4gIGNocm9taXVtOiB7XG4gICAgcGtnOiAnb3JnLmNocm9taXVtLmNocm9tZS5zaGVsbCcsXG4gICAgYWN0aXZpdHk6ICcuQ2hyb21lU2hlbGxBY3Rpdml0eScsXG4gIH0sXG4gIGNocm9tZWJldGE6IHtcbiAgICBwa2c6ICdjb20uY2hyb21lLmJldGEnLFxuICAgIGFjdGl2aXR5OiAnY29tLmdvb2dsZS5hbmRyb2lkLmFwcHMuY2hyb21lLk1haW4nLFxuICB9LFxuICBicm93c2VyOiB7XG4gICAgcGtnOiAnY29tLmFuZHJvaWQuYnJvd3NlcicsXG4gICAgYWN0aXZpdHk6ICdjb20uYW5kcm9pZC5icm93c2VyLkJyb3dzZXJBY3Rpdml0eScsXG4gIH0sXG4gICdjaHJvbWl1bS1icm93c2VyJzoge1xuICAgIHBrZzogJ29yZy5jaHJvbWl1bS5jaHJvbWUnLFxuICAgIGFjdGl2aXR5OiAnY29tLmdvb2dsZS5hbmRyb2lkLmFwcHMuY2hyb21lLk1haW4nLFxuICB9LFxuICAnY2hyb21pdW0td2Vidmlldyc6IHtcbiAgICBwa2c6ICdvcmcuY2hyb21pdW0ud2Vidmlld19zaGVsbCcsXG4gICAgYWN0aXZpdHk6ICdvcmcuY2hyb21pdW0ud2Vidmlld19zaGVsbC5XZWJWaWV3QnJvd3NlckFjdGl2aXR5JyxcbiAgfSxcbiAgZGVmYXVsdDoge1xuICAgIHBrZzogJ2NvbS5hbmRyb2lkLmNocm9tZScsXG4gICAgYWN0aXZpdHk6ICdjb20uZ29vZ2xlLmFuZHJvaWQuYXBwcy5jaHJvbWUuTWFpbicsXG4gIH0sXG59O1xuY29uc3QgU0VUVElOR1NfSEVMUEVSX1BLR19JRCA9ICdpby5hcHBpdW0uc2V0dGluZ3MnO1xuY29uc3QgU0VUVElOR1NfSEVMUEVSX1VOTE9DS19BQ1RJVklUWSA9ICcuVW5sb2NrJztcbmNvbnN0IEVNVUxBVE9SX1BBVFRFUk4gPSAvXFxiZW11bGF0b3JcXGIvaTtcbi8vIFRoZXNlIGNvbnN0YW50cyBhcmUgaW4gc3luYyB3aXRoXG4vLyBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWFwcGxpY2F0aW9uc3RhdGUveGN1aWFwcGxpY2F0aW9uc3RhdGVydW5uaW5nYmFja2dyb3VuZD9sYW5ndWFnZT1vYmpjXG5jb25zdCBBUFBfU1RBVEUgPSBPYmplY3QuZnJlZXplKHtcbiAgTk9UX0lOU1RBTExFRDogMCxcbiAgTk9UX1JVTk5JTkc6IDEsXG4gIFJVTk5JTkdfSU5fQkFDS0dST1VORDogMyxcbiAgUlVOTklOR19JTl9GT1JFR1JPVU5EOiA0XG59KTtcblxuXG5mdW5jdGlvbiBlbnN1cmVOZXR3b3JrU3BlZWQgKGFkYiwgbmV0d29ya1NwZWVkKSB7XG4gIGlmIChfLnZhbHVlcyhhZGIuTkVUV09SS19TUEVFRCkuaW5jbHVkZXMobmV0d29ya1NwZWVkKSkge1xuICAgIHJldHVybiBuZXR3b3JrU3BlZWQ7XG4gIH1cbiAgbG9nZ2VyLndhcm4oYFdyb25nIG5ldHdvcmsgc3BlZWQgcGFyYW0gJyR7bmV0d29ya1NwZWVkfScsIHVzaW5nIGRlZmF1bHQ6ICR7YWRiLk5FVFdPUktfU1BFRUQuRlVMTH0uIGAgK1xuICAgIGBTdXBwb3J0ZWQgdmFsdWVzOiAke18udmFsdWVzKGFkYi5ORVRXT1JLX1NQRUVEKX1gKTtcbiAgcmV0dXJuIGFkYi5ORVRXT1JLX1NQRUVELkZVTEw7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVBdmRBcmdzIChhZGIsIG9wdHMpIHtcbiAgY29uc3Qge1xuICAgIG5ldHdvcmtTcGVlZCxcbiAgICBpc0hlYWRsZXNzLFxuICAgIGF2ZEFyZ3MsXG4gIH0gPSBvcHRzO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgaWYgKGF2ZEFyZ3MpIHtcbiAgICBpZiAoXy5pc0FycmF5KGF2ZEFyZ3MpKSB7XG4gICAgICByZXN1bHQucHVzaCguLi5hdmRBcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goLi4uKHV0aWwuc2hlbGxQYXJzZShgJHthdmRBcmdzfWApKSk7XG4gICAgfVxuICB9XG4gIGlmIChuZXR3b3JrU3BlZWQpIHtcbiAgICByZXN1bHQucHVzaCgnLW5ldHNwZWVkJywgZW5zdXJlTmV0d29ya1NwZWVkKGFkYiwgbmV0d29ya1NwZWVkKSk7XG4gIH1cbiAgaWYgKGlzSGVhZGxlc3MpIHtcbiAgICByZXN1bHQucHVzaCgnLW5vLXdpbmRvdycpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHRvQ3JlZGVudGlhbFR5cGUgKHVubG9ja1R5cGUpIHtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIFtQSU5fVU5MT0NLXTogJ3BpbicsXG4gICAgW1BJTl9VTkxPQ0tfS0VZX0VWRU5UXTogJ3BpbicsXG4gICAgW1BBU1NXT1JEX1VOTE9DS106ICdwYXNzd29yZCcsXG4gICAgW1BBVFRFUk5fVU5MT0NLXTogJ3BhdHRlcm4nLFxuICB9W3VubG9ja1R5cGVdO1xuICBpZiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYFVubG9jayB0eXBlICcke3VubG9ja1R5cGV9JyBpcyBub3Qga25vd25gKTtcbn1cblxuXG5jb25zdCBoZWxwZXJzID0ge307XG5cbmhlbHBlcnMuY3JlYXRlQmFzZUFEQiA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUJhc2VBREIgKG9wdHMgPSB7fSkge1xuICAvLyBmaWx0ZXIgb3V0IGFueSB1bndhbnRlZCBvcHRpb25zIHNlbnQgaW5cbiAgLy8gdGhpcyBsaXN0IHNob3VsZCBiZSB1cGRhdGVkIGFzIEFEQiB0YWtlcyBtb3JlIGFyZ3VtZW50c1xuICBjb25zdCB7XG4gICAgYWRiUG9ydCxcbiAgICBzdXBwcmVzc0tpbGxTZXJ2ZXIsXG4gICAgcmVtb3RlQWRiSG9zdCxcbiAgICBjbGVhckRldmljZUxvZ3NPblN0YXJ0LFxuICAgIGFkYkV4ZWNUaW1lb3V0LFxuICAgIHVzZUtleXN0b3JlLFxuICAgIGtleXN0b3JlUGF0aCxcbiAgICBrZXlzdG9yZVBhc3N3b3JkLFxuICAgIGtleUFsaWFzLFxuICAgIGtleVBhc3N3b3JkLFxuICAgIHJlbW90ZUFwcHNDYWNoZUxpbWl0LFxuICAgIGJ1aWxkVG9vbHNWZXJzaW9uLFxuICAgIGFsbG93T2ZmbGluZURldmljZXMsXG4gICAgYWxsb3dEZWxheUFkYixcbiAgfSA9IG9wdHM7XG4gIHJldHVybiBhd2FpdCBBREIuY3JlYXRlQURCKHtcbiAgICBhZGJQb3J0LFxuICAgIHN1cHByZXNzS2lsbFNlcnZlcixcbiAgICByZW1vdGVBZGJIb3N0LFxuICAgIGNsZWFyRGV2aWNlTG9nc09uU3RhcnQsXG4gICAgYWRiRXhlY1RpbWVvdXQsXG4gICAgdXNlS2V5c3RvcmUsXG4gICAga2V5c3RvcmVQYXRoLFxuICAgIGtleXN0b3JlUGFzc3dvcmQsXG4gICAga2V5QWxpYXMsXG4gICAga2V5UGFzc3dvcmQsXG4gICAgcmVtb3RlQXBwc0NhY2hlTGltaXQsXG4gICAgYnVpbGRUb29sc1ZlcnNpb24sXG4gICAgYWxsb3dPZmZsaW5lRGV2aWNlcyxcbiAgICBhbGxvd0RlbGF5QWRiLFxuICB9KTtcbn07XG5cbmhlbHBlcnMucHJlcGFyZUVtdWxhdG9yID0gYXN5bmMgZnVuY3Rpb24gcHJlcGFyZUVtdWxhdG9yIChhZGIsIG9wdHMpIHtcbiAgY29uc3Qge1xuICAgIGF2ZCxcbiAgICBhdmRFbnY6IGVudixcbiAgICBsYW5ndWFnZSxcbiAgICBsb2NhbGU6IGNvdW50cnksXG4gICAgYXZkTGF1bmNoVGltZW91dDogbGF1bmNoVGltZW91dCxcbiAgICBhdmRSZWFkeVRpbWVvdXQ6IHJlYWR5VGltZW91dCxcbiAgfSA9IG9wdHM7XG4gIGlmICghYXZkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbGF1bmNoIEFWRCB3aXRob3V0IEFWRCBuYW1lJyk7XG4gIH1cblxuICBjb25zdCBhdmROYW1lID0gYXZkLnJlcGxhY2UoJ0AnLCAnJyk7XG4gIGNvbnN0IHJ1bm5pbmdBVkQgPSBhd2FpdCBhZGIuZ2V0UnVubmluZ0FWRChhdmROYW1lKTtcbiAgY29uc3QgYXJncyA9IHByZXBhcmVBdmRBcmdzKGFkYiwgb3B0cyk7XG4gIGlmIChydW5uaW5nQVZEKSB7XG4gICAgaWYgKGFyZ3MuaW5jbHVkZXMoJy13aXBlLWRhdGEnKSkge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBLaWxsaW5nICcke2F2ZE5hbWV9JyBiZWNhdXNlIGl0IG5lZWRzIHRvIGJlIHdpcGVkIGF0IHN0YXJ0LmApO1xuICAgICAgYXdhaXQgYWRiLmtpbGxFbXVsYXRvcihhdmROYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdOb3QgbGF1bmNoaW5nIEFWRCBiZWNhdXNlIGl0IGlzIGFscmVhZHkgcnVubmluZy4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgYXdhaXQgYWRiLmxhdW5jaEFWRChhdmQsIHtcbiAgICBhcmdzLFxuICAgIGVudixcbiAgICBsYW5ndWFnZSxcbiAgICBjb3VudHJ5LFxuICAgIGxhdW5jaFRpbWVvdXQsXG4gICAgcmVhZHlUaW1lb3V0LFxuICB9KTtcbn07XG5cbi8qKlxuICogU2V0IGFuZCBlbnN1cmUgdGhlIGxvY2FsZSBuYW1lIG9mIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYWRiIC0gVGhlIGFkYiBtb2R1bGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2UgLSBMYW5ndWFnZS4gVGhlIGxhbmd1YWdlIGZpZWxkIGlzIGNhc2UgaW5zZW5zaXRpdmUsIGJ1dCBMb2NhbGUgYWx3YXlzIGNhbm9uaWNhbGl6ZXMgdG8gbG93ZXIgY2FzZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogW2EtekEtWl17Miw4fS4gZS5nLiBlbiwgamEgOiBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvamF2YS91dGlsL0xvY2FsZS5odG1sXG4gKiBAcGFyYW0ge3N0cmluZ30gY291bnRyeSAtIENvdW50cnkuIFRoZSBjb3VudHJ5IChyZWdpb24pIGZpZWxkIGlzIGNhc2UgaW5zZW5zaXRpdmUsIGJ1dCBMb2NhbGUgYWx3YXlzIGNhbm9uaWNhbGl6ZXMgdG8gdXBwZXIgY2FzZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogW2EtekEtWl17Mn0gfCBbMC05XXszfS4gZS5nLiBVUywgSlAgOiBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvamF2YS91dGlsL0xvY2FsZS5odG1sXG4gKiBAcGFyYW0gez9zdHJpbmd9IHNjcmlwdCAtIFNjcmlwdC4gVGhlIHNjcmlwdCBmaWVsZCBpcyBjYXNlIGluc2Vuc2l0aXZlIGJ1dCBMb2NhbGUgYWx3YXlzIGNhbm9uaWNhbGl6ZXMgdG8gdGl0bGUgY2FzZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogW2EtekEtWl17NH0uIGUuZy4gSGFucyBpbiB6aC1IYW5zLUNOIDogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmEvdXRpbC9Mb2NhbGUuaHRtbFxuICogQHRocm93cyB7RXJyb3J9IElmIGl0IGZhaWxlZCB0byBzZXQgbG9jYWxlIHByb3Blcmx5XG4gKi9cbmhlbHBlcnMuZW5zdXJlRGV2aWNlTG9jYWxlID0gYXN5bmMgZnVuY3Rpb24gZW5zdXJlRGV2aWNlTG9jYWxlIChhZGIsIGxhbmd1YWdlLCBjb3VudHJ5LCBzY3JpcHQgPSBudWxsKSB7XG4gIGlmICghXy5pc1N0cmluZyhsYW5ndWFnZSkgJiYgIV8uaXNTdHJpbmcoY291bnRyeSkpIHtcbiAgICBsb2dnZXIud2Fybihgc2V0RGV2aWNlTGFuZ3VhZ2VDb3VudHJ5IHJlcXVpcmVzIGxhbmd1YWdlIG9yIGNvdW50cnkuYCk7XG4gICAgbG9nZ2VyLndhcm4oYEdvdCBsYW5ndWFnZTogJyR7bGFuZ3VhZ2V9JyBhbmQgY291bnRyeTogJyR7Y291bnRyeX0nYCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXdhaXQgYWRiLnNldERldmljZUxhbmd1YWdlQ291bnRyeShsYW5ndWFnZSwgY291bnRyeSwgc2NyaXB0KTtcblxuICBpZiAoIWF3YWl0IGFkYi5lbnN1cmVDdXJyZW50TG9jYWxlKGxhbmd1YWdlLCBjb3VudHJ5LCBzY3JpcHQpKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHNjcmlwdCA/IGBsYW5ndWFnZTogJHtsYW5ndWFnZX0sIGNvdW50cnk6ICR7Y291bnRyeX0gYW5kIHNjcmlwdDogJHtzY3JpcHR9YCA6IGBsYW5ndWFnZTogJHtsYW5ndWFnZX0gYW5kIGNvdW50cnk6ICR7Y291bnRyeX1gO1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHNldCAke21lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmhlbHBlcnMuZ2V0RGV2aWNlSW5mb0Zyb21DYXBzID0gYXN5bmMgZnVuY3Rpb24gZ2V0RGV2aWNlSW5mb0Zyb21DYXBzIChvcHRzID0ge30pIHtcbiAgLy8gd2UgY2FuIGNyZWF0ZSBhIHRocm93YXdheSBBREIgaW5zdGFuY2UgaGVyZSwgc28gdGhlcmUgaXMgbm8gZGVwZW5kZW5jeVxuICAvLyBvbiBpbnN0YW50aWF0aW5nIG9uIGVhcmxpZXIgKGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgbm8gdWRpZClcbiAgLy8gd2UgY2FuIG9ubHkgdXNlIHRoaXMgQURCIG9iamVjdCBmb3IgY29tbWFuZHMgdGhhdCB3b3VsZCBub3QgYmUgY29uZnVzZWRcbiAgLy8gaWYgbXVsdGlwbGUgZGV2aWNlcyBhcmUgY29ubmVjdGVkXG4gIGNvbnN0IGFkYiA9IGF3YWl0IGhlbHBlcnMuY3JlYXRlQmFzZUFEQihvcHRzKTtcbiAgbGV0IHVkaWQgPSBvcHRzLnVkaWQ7XG4gIGxldCBlbVBvcnQgPSBudWxsO1xuXG4gIC8vIGEgc3BlY2lmaWMgYXZkIG5hbWUgd2FzIGdpdmVuLiB0cnkgdG8gaW5pdGlhbGl6ZSB3aXRoIHRoYXRcbiAgaWYgKG9wdHMuYXZkKSB7XG4gICAgYXdhaXQgaGVscGVycy5wcmVwYXJlRW11bGF0b3IoYWRiLCBvcHRzKTtcbiAgICB1ZGlkID0gYWRiLmN1ckRldmljZUlkO1xuICAgIGVtUG9ydCA9IGFkYi5lbXVsYXRvclBvcnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm8gYXZkIGdpdmVuLiBsZXRzIHRyeSB3aGF0ZXZlcidzIHBsdWdnZWQgaW4gZGV2aWNlcy9lbXVsYXRvcnNcbiAgICBsb2dnZXIuaW5mbygnUmV0cmlldmluZyBkZXZpY2UgbGlzdCcpO1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgYWRiLmdldERldmljZXNXaXRoUmV0cnkoKTtcblxuICAgIC8vIHVkaWQgd2FzIGdpdmVuLCBsZXRzIHRyeSB0byBpbml0IHdpdGggdGhhdCBkZXZpY2VcbiAgICBpZiAodWRpZCkge1xuICAgICAgaWYgKCFfLmluY2x1ZGVzKF8ubWFwKGRldmljZXMsICd1ZGlkJyksIHVkaWQpKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGBEZXZpY2UgJHt1ZGlkfSB3YXMgbm90IGluIHRoZSBsaXN0IG9mIGNvbm5lY3RlZCBkZXZpY2VzYCk7XG4gICAgICB9XG4gICAgICBlbVBvcnQgPSBhZGIuZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyh1ZGlkKTtcbiAgICB9IGVsc2UgaWYgKG9wdHMucGxhdGZvcm1WZXJzaW9uKSB7XG4gICAgICBvcHRzLnBsYXRmb3JtVmVyc2lvbiA9IGAke29wdHMucGxhdGZvcm1WZXJzaW9ufWAudHJpbSgpO1xuXG4gICAgICAvLyBhIHBsYXRmb3JtIHZlcnNpb24gd2FzIGdpdmVuLiBsZXRzIHRyeSB0byBmaW5kIGEgZGV2aWNlIHdpdGggdGhlIHNhbWUgb3NcbiAgICAgIGNvbnN0IHBsYXRmb3JtVmVyc2lvbiA9IHNlbXZlci5jb2VyY2Uob3B0cy5wbGF0Zm9ybVZlcnNpb24pIHx8IG9wdHMucGxhdGZvcm1WZXJzaW9uO1xuICAgICAgbG9nZ2VyLmluZm8oYExvb2tpbmcgZm9yIGEgZGV2aWNlIHdpdGggQW5kcm9pZCAnJHtwbGF0Zm9ybVZlcnNpb259J2ApO1xuXG4gICAgICAvLyBpbiBjYXNlIHdlIGZhaWwgdG8gZmluZCBzb21ldGhpbmcsIGdpdmUgdGhlIHVzZXIgYSB1c2VmdWwgbG9nIHRoYXQgaGFzXG4gICAgICAvLyB0aGUgZGV2aWNlIHVkaWRzIGFuZCBvcyB2ZXJzaW9ucyBzbyB0aGV5IGtub3cgd2hhdCdzIGF2YWlsYWJsZVxuICAgICAgY29uc3QgYXZhaWxEZXZpY2VzID0gW107XG4gICAgICBsZXQgcGFydGlhbE1hdGNoQ2FuZGlkYXRlID0gbnVsbDtcbiAgICAgIC8vIGZpcnN0IHRyeSBzdGFydGVkIGRldmljZXMvZW11bGF0b3JzXG4gICAgICBmb3IgKGNvbnN0IGRldmljZSBvZiBkZXZpY2VzKSB7XG4gICAgICAgIC8vIGRpcmVjdCBhZGIgY2FsbHMgdG8gdGhlIHNwZWNpZmljIGRldmljZVxuICAgICAgICBhd2FpdCBhZGIuc2V0RGV2aWNlSWQoZGV2aWNlLnVkaWQpO1xuICAgICAgICBjb25zdCByYXdEZXZpY2VPUyA9IGF3YWl0IGFkYi5nZXRQbGF0Zm9ybVZlcnNpb24oKTtcbiAgICAgICAgLy8gVGhlIGRldmljZSBPUyBjb3VsZCBlaXRoZXIgYmUgYSBudW1iZXIsIGxpa2UgYDYuMGBcbiAgICAgICAgLy8gb3IgYW4gYWJicmV2aWF0aW9uLCBsaWtlIGBSYFxuICAgICAgICBhdmFpbERldmljZXMucHVzaChgJHtkZXZpY2UudWRpZH0gKCR7cmF3RGV2aWNlT1N9KWApO1xuICAgICAgICBjb25zdCBkZXZpY2VPUyA9IHNlbXZlci5jb2VyY2UocmF3RGV2aWNlT1MpIHx8IHJhd0RldmljZU9TO1xuICAgICAgICBpZiAoIWRldmljZU9TKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBib3RoVmVyc2lvbnNDYW5CZUNvZXJjZWQgPSBzZW12ZXIudmFsaWQoZGV2aWNlT1MpICYmIHNlbXZlci52YWxpZChwbGF0Zm9ybVZlcnNpb24pO1xuICAgICAgICBjb25zdCBib3RoVmVyc2lvbnNBcmVTdHJpbmdzID0gXy5pc1N0cmluZyhkZXZpY2VPUykgJiYgXy5pc1N0cmluZyhwbGF0Zm9ybVZlcnNpb24pO1xuICAgICAgICBpZiAoYm90aFZlcnNpb25zQ2FuQmVDb2VyY2VkICYmIGRldmljZU9TLnZlcnNpb24gPT09IHBsYXRmb3JtVmVyc2lvbi52ZXJzaW9uXG4gICAgICAgICAgICB8fCBib3RoVmVyc2lvbnNBcmVTdHJpbmdzICYmIF8udG9Mb3dlcihkZXZpY2VPUykgPT09IF8udG9Mb3dlcihwbGF0Zm9ybVZlcnNpb24pKSB7XG4gICAgICAgICAgLy8gR290IGFuIGV4YWN0IG1hdGNoIC0gcHJvY2VlZCBpbW1lZGlhdGVseVxuICAgICAgICAgIHVkaWQgPSBkZXZpY2UudWRpZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmICghYm90aFZlcnNpb25zQ2FuQmVDb2VyY2VkKSB7XG4gICAgICAgICAgLy8gVGhlcmUgaXMgbm8gcG9pbnQgdG8gY2hlY2sgZm9yIHBhcnRpYWwgbWF0Y2ggaWYgZWl0aGVyIG9mIHZlcnNpb24gbnVtYmVycyBpcyBub3QgY29lcmNpYmxlXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKCFfLmluY2x1ZGVzKG9wdHMucGxhdGZvcm1WZXJzaW9uLCAnLicpICYmIHBsYXRmb3JtVmVyc2lvbi5tYWpvciA9PT0gZGV2aWNlT1MubWFqb3JcbiAgICAgICAgICAgIHx8IHBsYXRmb3JtVmVyc2lvbi5tYWpvciA9PT0gZGV2aWNlT1MubWFqb3IgJiYgcGxhdGZvcm1WZXJzaW9uLm1pbm9yID09PSBkZXZpY2VPUy5taW5vcilcbiAgICAgICAgICAgIC8vIEdvdCBhIHBhcnRpYWwgbWF0Y2ggLSBtYWtlIHN1cmUgd2UgY29uc2lkZXIgdGhlIG1vc3QgcmVjZW50XG4gICAgICAgICAgICAvLyBkZXZpY2UgdmVyc2lvbiBhdmFpbGFibGUgb24gdGhlIGhvc3Qgc3lzdGVtXG4gICAgICAgICAgICAmJiAocGFydGlhbE1hdGNoQ2FuZGlkYXRlICYmIHNlbXZlci5ndChkZXZpY2VPUywgXy52YWx1ZXMocGFydGlhbE1hdGNoQ2FuZGlkYXRlKVswXSlcbiAgICAgICAgICAgICAgICB8fCAhcGFydGlhbE1hdGNoQ2FuZGlkYXRlKSkge1xuICAgICAgICAgIHBhcnRpYWxNYXRjaENhbmRpZGF0ZSA9IHtbZGV2aWNlLnVkaWRdOiBkZXZpY2VPU307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdWRpZCAmJiBwYXJ0aWFsTWF0Y2hDYW5kaWRhdGUpIHtcbiAgICAgICAgdWRpZCA9IF8ua2V5cyhwYXJ0aWFsTWF0Y2hDYW5kaWRhdGUpWzBdO1xuICAgICAgICBhd2FpdCBhZGIuc2V0RGV2aWNlSWQodWRpZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdWRpZCkge1xuICAgICAgICAvLyB3ZSBjb3VsZG4ndCBmaW5kIGFueXRoaW5nISBxdWl0XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGBVbmFibGUgdG8gZmluZCBhbiBhY3RpdmUgZGV2aWNlIG9yIGVtdWxhdG9yIGAgK1xuICAgICAgICAgIGB3aXRoIE9TICR7b3B0cy5wbGF0Zm9ybVZlcnNpb259LiBUaGUgZm9sbG93aW5nIGFyZSBhdmFpbGFibGU6IGAgK1xuICAgICAgICAgIGF2YWlsRGV2aWNlcy5qb2luKCcsICcpKTtcbiAgICAgIH1cblxuICAgICAgZW1Qb3J0ID0gYWRiLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcodWRpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGEgdWRpZCB3YXMgbm90IGdpdmVuLCBncmFiIHRoZSBmaXJzdCBkZXZpY2Ugd2Ugc2VlXG4gICAgICB1ZGlkID0gZGV2aWNlc1swXS51ZGlkO1xuICAgICAgZW1Qb3J0ID0gYWRiLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcodWRpZCk7XG4gICAgfVxuICB9XG5cbiAgbG9nZ2VyLmluZm8oYFVzaW5nIGRldmljZTogJHt1ZGlkfWApO1xuICByZXR1cm4ge3VkaWQsIGVtUG9ydH07XG59O1xuXG4vLyByZXR1cm5zIGEgbmV3IGFkYiBpbnN0YW5jZSB3aXRoIGRldmljZUlkIHNldFxuaGVscGVycy5jcmVhdGVBREIgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVBREIgKG9wdHMgPSB7fSkge1xuICBjb25zdCB7dWRpZCwgZW1Qb3J0fSA9IG9wdHM7XG4gIGNvbnN0IGFkYiA9IGF3YWl0IGhlbHBlcnMuY3JlYXRlQmFzZUFEQihvcHRzKTtcbiAgYWRiLnNldERldmljZUlkKHVkaWQpO1xuICBpZiAoZW1Qb3J0KSB7XG4gICAgYWRiLnNldEVtdWxhdG9yUG9ydChlbVBvcnQpO1xuICB9XG5cbiAgcmV0dXJuIGFkYjtcbn07XG5cbmhlbHBlcnMudmFsaWRhdGVQYWNrYWdlQWN0aXZpdHlOYW1lcyA9IGZ1bmN0aW9uIHZhbGlkYXRlUGFja2FnZUFjdGl2aXR5TmFtZXMgKG9wdHMpIHtcbiAgZm9yIChjb25zdCBrZXkgb2YgWydhcHBQYWNrYWdlJywgJ2FwcEFjdGl2aXR5JywgJ2FwcFdhaXRQYWNrYWdlJywgJ2FwcFdhaXRBY3Rpdml0eSddKSB7XG4gICAgY29uc3QgbmFtZSA9IG9wdHNba2V5XTtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1hdGNoID0gLyhbXlxcdy4qLF0pKy8uZXhlYyhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsb2dnZXIud2FybihgQ2FwYWJpbGl0eSAnJHtrZXl9JyBpcyBleHBlY3RlZCB0byBvbmx5IGluY2x1ZGUgbGF0aW4gbGV0dGVycywgZGlnaXRzLCB1bmRlcnNjb3JlLCBkb3QsIGNvbW1hIGFuZCBhc3RlcmlzayBjaGFyYWN0ZXJzLmApO1xuICAgIGxvZ2dlci53YXJuKGBDdXJyZW50IHZhbHVlICcke25hbWV9JyBoYXMgbm9uLW1hdGNoaW5nIGNoYXJhY3RlciBhdCBpbmRleCAke21hdGNoLmluZGV4fTogJyR7bmFtZS5zdWJzdHJpbmcoMCwgbWF0Y2guaW5kZXggKyAxKX0nYCk7XG4gIH1cbn07XG5cbmhlbHBlcnMuZ2V0TGF1bmNoSW5mbyA9IGFzeW5jIGZ1bmN0aW9uIGdldExhdW5jaEluZm8gKGFkYiwgb3B0cykge1xuICBsZXQge2FwcCwgYXBwUGFja2FnZSwgYXBwQWN0aXZpdHksIGFwcFdhaXRQYWNrYWdlLCBhcHBXYWl0QWN0aXZpdHl9ID0gb3B0cztcbiAgaWYgKCFhcHApIHtcbiAgICBsb2dnZXIud2FybignTm8gYXBwIHNlbnQgaW4sIG5vdCBwYXJzaW5nIHBhY2thZ2UvYWN0aXZpdHknKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnZhbGlkYXRlUGFja2FnZUFjdGl2aXR5TmFtZXMob3B0cyk7XG5cbiAgaWYgKGFwcFBhY2thZ2UgJiYgYXBwQWN0aXZpdHkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2dnZXIuZGVidWcoJ1BhcnNpbmcgcGFja2FnZSBhbmQgYWN0aXZpdHkgZnJvbSBhcHAgbWFuaWZlc3QnKTtcbiAgbGV0IHthcGtQYWNrYWdlLCBhcGtBY3Rpdml0eX0gPVxuICAgIGF3YWl0IGFkYi5wYWNrYWdlQW5kTGF1bmNoQWN0aXZpdHlGcm9tTWFuaWZlc3QoYXBwKTtcbiAgaWYgKGFwa1BhY2thZ2UgJiYgIWFwcFBhY2thZ2UpIHtcbiAgICBhcHBQYWNrYWdlID0gYXBrUGFja2FnZTtcbiAgfVxuICBpZiAoIWFwcFdhaXRQYWNrYWdlKSB7XG4gICAgYXBwV2FpdFBhY2thZ2UgPSBhcHBQYWNrYWdlO1xuICB9XG4gIGlmIChhcGtBY3Rpdml0eSAmJiAhYXBwQWN0aXZpdHkpIHtcbiAgICBhcHBBY3Rpdml0eSA9IGFwa0FjdGl2aXR5O1xuICB9XG4gIGlmICghYXBwV2FpdEFjdGl2aXR5KSB7XG4gICAgYXBwV2FpdEFjdGl2aXR5ID0gYXBwQWN0aXZpdHk7XG4gIH1cbiAgbG9nZ2VyLmRlYnVnKGBQYXJzZWQgcGFja2FnZSBhbmQgYWN0aXZpdHkgYXJlOiAke2Fwa1BhY2thZ2V9LyR7YXBrQWN0aXZpdHl9YCk7XG4gIHJldHVybiB7YXBwUGFja2FnZSwgYXBwV2FpdFBhY2thZ2UsIGFwcEFjdGl2aXR5LCBhcHBXYWl0QWN0aXZpdHl9O1xufTtcblxuaGVscGVycy5yZXNldEFwcCA9IGFzeW5jIGZ1bmN0aW9uIHJlc2V0QXBwIChhZGIsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgYXBwLFxuICAgIGFwcFBhY2thZ2UsXG4gICAgZmFzdFJlc2V0LFxuICAgIGZ1bGxSZXNldCxcbiAgICBhbmRyb2lkSW5zdGFsbFRpbWVvdXQgPSBQQUNLQUdFX0lOU1RBTExfVElNRU9VVCxcbiAgICBhdXRvR3JhbnRQZXJtaXNzaW9ucyxcbiAgICBhbGxvd1Rlc3RQYWNrYWdlc1xuICB9ID0gb3B0cztcblxuICBpZiAoIWFwcFBhY2thZ2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCInYXBwUGFja2FnZScgb3B0aW9uIGlzIHJlcXVpcmVkXCIpO1xuICB9XG5cbiAgY29uc3QgaXNJbnN0YWxsZWQgPSBhd2FpdCBhZGIuaXNBcHBJbnN0YWxsZWQoYXBwUGFja2FnZSk7XG5cbiAgaWYgKGlzSW5zdGFsbGVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGFkYi5mb3JjZVN0b3AoYXBwUGFja2FnZSk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIC8vIGZ1bGxSZXNldCBoYXMgcHJpb3JpdHkgb3ZlciBmYXN0UmVzZXRcbiAgICBpZiAoIWZ1bGxSZXNldCAmJiBmYXN0UmVzZXQpIHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGFkYi5jbGVhcihhcHBQYWNrYWdlKTtcbiAgICAgIGlmIChfLmlzU3RyaW5nKG91dHB1dCkgJiYgb3V0cHV0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2ZhaWxlZCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNsZWFyIHRoZSBhcHBsaWNhdGlvbiBkYXRhIG9mICcke2FwcFBhY2thZ2V9Jy4gT3JpZ2luYWwgZXJyb3I6ICR7b3V0cHV0fWApO1xuICAgICAgfVxuICAgICAgLy8gZXhlY3V0aW5nIGBzaGVsbCBwbSBjbGVhcmAgcmVzZXRzIHByZXZpb3VzbHkgYXNzaWduZWQgYXBwbGljYXRpb24gcGVybWlzc2lvbnMgYXMgd2VsbFxuICAgICAgaWYgKGF1dG9HcmFudFBlcm1pc3Npb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgYWRiLmdyYW50QWxsUGVybWlzc2lvbnMoYXBwUGFja2FnZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKGBVbmFibGUgdG8gZ3JhbnQgcGVybWlzc2lvbnMgcmVxdWVzdGVkLiBPcmlnaW5hbCBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsb2dnZXIuZGVidWcoYFBlcmZvcm1lZCBmYXN0IHJlc2V0IG9uIHRoZSBpbnN0YWxsZWQgJyR7YXBwUGFja2FnZX0nIGFwcGxpY2F0aW9uIChzdG9wIGFuZCBjbGVhcilgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoIWFwcCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIidhcHAnIG9wdGlvbiBpcyByZXF1aXJlZCBmb3IgcmVpbnN0YWxsXCIpO1xuICB9XG5cbiAgbG9nZ2VyLmRlYnVnKGBSdW5uaW5nIGZ1bGwgcmVzZXQgb24gJyR7YXBwUGFja2FnZX0nIChyZWluc3RhbGwpYCk7XG4gIGlmIChpc0luc3RhbGxlZCkge1xuICAgIGF3YWl0IGFkYi51bmluc3RhbGxBcGsoYXBwUGFja2FnZSk7XG4gIH1cbiAgYXdhaXQgYWRiLmluc3RhbGwoYXBwLCB7XG4gICAgZ3JhbnRQZXJtaXNzaW9uczogYXV0b0dyYW50UGVybWlzc2lvbnMsXG4gICAgdGltZW91dDogYW5kcm9pZEluc3RhbGxUaW1lb3V0LFxuICAgIGFsbG93VGVzdFBhY2thZ2VzLFxuICB9KTtcbn07XG5cbmhlbHBlcnMuaW5zdGFsbEFwayA9IGFzeW5jIGZ1bmN0aW9uIGluc3RhbGxBcGsgKGFkYiwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBhcHAsXG4gICAgYXBwUGFja2FnZSxcbiAgICBmYXN0UmVzZXQsXG4gICAgZnVsbFJlc2V0LFxuICAgIGFuZHJvaWRJbnN0YWxsVGltZW91dCA9IFBBQ0tBR0VfSU5TVEFMTF9USU1FT1VULFxuICAgIGF1dG9HcmFudFBlcm1pc3Npb25zLFxuICAgIGFsbG93VGVzdFBhY2thZ2VzLFxuICAgIGVuZm9yY2VBcHBJbnN0YWxsLFxuICB9ID0gb3B0cztcblxuICBpZiAoIWFwcCB8fCAhYXBwUGFja2FnZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIidhcHAnIGFuZCAnYXBwUGFja2FnZScgb3B0aW9ucyBhcmUgcmVxdWlyZWRcIik7XG4gIH1cblxuICBpZiAoZnVsbFJlc2V0KSB7XG4gICAgYXdhaXQgdGhpcy5yZXNldEFwcChhZGIsIG9wdHMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBhcHBTdGF0ZSxcbiAgICB3YXNVbmluc3RhbGxlZFxuICB9ID0gYXdhaXQgYWRiLmluc3RhbGxPclVwZ3JhZGUoYXBwLCBhcHBQYWNrYWdlLCB7XG4gICAgZ3JhbnRQZXJtaXNzaW9uczogYXV0b0dyYW50UGVybWlzc2lvbnMsXG4gICAgdGltZW91dDogYW5kcm9pZEluc3RhbGxUaW1lb3V0LFxuICAgIGFsbG93VGVzdFBhY2thZ2VzLFxuICAgIGVuZm9yY2VDdXJyZW50QnVpbGQ6IGVuZm9yY2VBcHBJbnN0YWxsLFxuICB9KTtcblxuICAvLyBUaGVyZSBpcyBubyBuZWVkIHRvIHJlc2V0IHRoZSBuZXdseSBpbnN0YWxsZWQgYXBwXG4gIGNvbnN0IGlzSW5zdGFsbGVkT3ZlckV4aXN0aW5nQXBwID0gIXdhc1VuaW5zdGFsbGVkXG4gICAgJiYgYXBwU3RhdGUgIT09IGFkYi5BUFBfSU5TVEFMTF9TVEFURS5OT1RfSU5TVEFMTEVEO1xuICBpZiAoZmFzdFJlc2V0ICYmIGlzSW5zdGFsbGVkT3ZlckV4aXN0aW5nQXBwKSB7XG4gICAgbG9nZ2VyLmluZm8oYFBlcmZvcm1pbmcgZmFzdCByZXNldCBvbiAnJHthcHBQYWNrYWdlfSdgKTtcbiAgICBhd2FpdCB0aGlzLnJlc2V0QXBwKGFkYiwgb3B0cyk7XG4gIH1cbn07XG5cbi8qKlxuICogSW5zdGFsbHMgYW4gYXJyYXkgb2YgYXBrc1xuICogQHBhcmFtIHtBREJ9IGFkYiBJbnN0YW5jZSBvZiBBcHBpdW0gQURCIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0cyBkZWZpbmVkIGluIGRyaXZlci5qc1xuICovXG5oZWxwZXJzLmluc3RhbGxPdGhlckFwa3MgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsT3RoZXJBcGtzIChvdGhlckFwcHMsIGFkYiwgb3B0cykge1xuICBsZXQge1xuICAgIGFuZHJvaWRJbnN0YWxsVGltZW91dCA9IFBBQ0tBR0VfSU5TVEFMTF9USU1FT1VULFxuICAgIGF1dG9HcmFudFBlcm1pc3Npb25zLFxuICAgIGFsbG93VGVzdFBhY2thZ2VzXG4gIH0gPSBvcHRzO1xuXG4gIC8vIEluc3RhbGwgYWxsIG9mIHRoZSBBUEsncyBhc3luY2hyb25vdXNseVxuICBhd2FpdCBCLmFsbChvdGhlckFwcHMubWFwKChvdGhlckFwcCkgPT4ge1xuICAgIGxvZ2dlci5kZWJ1ZyhgSW5zdGFsbGluZyBhcHA6ICR7b3RoZXJBcHB9YCk7XG4gICAgcmV0dXJuIGFkYi5pbnN0YWxsT3JVcGdyYWRlKG90aGVyQXBwLCBudWxsLCB7XG4gICAgICBncmFudFBlcm1pc3Npb25zOiBhdXRvR3JhbnRQZXJtaXNzaW9ucyxcbiAgICAgIHRpbWVvdXQ6IGFuZHJvaWRJbnN0YWxsVGltZW91dCxcbiAgICAgIGFsbG93VGVzdFBhY2thZ2VzLFxuICAgIH0pO1xuICB9KSk7XG59O1xuXG4vKipcbiAqIFVuaW5zdGFsbCBhbiBhcnJheSBvZiBwYWNrYWdlc1xuICogQHBhcmFtIHtBREJ9IGFkYiBJbnN0YW5jZSBvZiBBcHBpdW0gQURCIG9iamVjdFxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBhcHBQYWNrYWdlcyBBbiBhcnJheSBvZiBwYWNrYWdlIG5hbWVzIHRvIHVuaW5zdGFsbC4gSWYgdGhpcyBpbmNsdWRlcyBgJyonYCwgdW5pbnN0YWxsIGFsbCBvZiAzcmQgcGFydHkgYXBwc1xuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBmaWx0ZXJQYWNrYWdlcyBBbiBhcnJheSBvZiBwYWNrYWdlcyBkb2VzIG5vdCB1bmluc3RhbGwgd2hlbiBgKmAgaXMgcHJvdmlkZWQgYXMgYGFwcFBhY2thZ2VzYFxuICovXG5oZWxwZXJzLnVuaW5zdGFsbE90aGVyUGFja2FnZXMgPSBhc3luYyBmdW5jdGlvbiB1bmluc3RhbGxPdGhlclBhY2thZ2VzIChhZGIsIGFwcFBhY2thZ2VzLCBmaWx0ZXJQYWNrYWdlcyA9IFtdKSB7XG4gIGlmIChhcHBQYWNrYWdlcy5pbmNsdWRlcygnKicpKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdVbmluc3RhbGwgdGhpcmQgcGFydHkgcGFja2FnZXMnKTtcbiAgICBhcHBQYWNrYWdlcyA9IGF3YWl0IHRoaXMuZ2V0VGhpcmRQYXJ0eVBhY2thZ2VzKGFkYiwgZmlsdGVyUGFja2FnZXMpO1xuICB9XG5cbiAgbG9nZ2VyLmRlYnVnKGBVbmluc3RhbGxpbmcgcGFja2FnZXM6ICR7YXBwUGFja2FnZXN9YCk7XG4gIGF3YWl0IEIuYWxsKGFwcFBhY2thZ2VzLm1hcCgoYXBwUGFja2FnZSkgPT4gYWRiLnVuaW5zdGFsbEFwayhhcHBQYWNrYWdlKSkpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhpcmQgcGFydHkgcGFja2FnZXMgZmlsdGVyZWQgd2l0aCBgZmlsdGVyUGFja2FnZXNgXG4gKiBAcGFyYW0ge0FEQn0gYWRiIEluc3RhbmNlIG9mIEFwcGl1bSBBREIgb2JqZWN0XG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGZpbHRlclBhY2thZ2VzIEFuIGFycmF5IG9mIHBhY2thZ2VzIGRvZXMgbm90IHVuaW5zdGFsbCB3aGVuIGAqYCBpcyBwcm92aWRlZCBhcyBgYXBwUGFja2FnZXNgXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gQW4gYXJyYXkgb2YgaW5zdGFsbGVkIHRoaXJkIHBhcnkgcGFja2FnZXNcbiAqL1xuaGVscGVycy5nZXRUaGlyZFBhcnR5UGFja2FnZXMgPSBhc3luYyBmdW5jdGlvbiBnZXRUaGlyZFBhcnR5UGFja2FnZXMgKGFkYiwgZmlsdGVyUGFja2FnZXMgPSBbXSkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhY2thZ2VzU3RyaW5nID0gYXdhaXQgYWRiLnNoZWxsKFsncG0nLCAnbGlzdCcsICdwYWNrYWdlcycsICctMyddKTtcbiAgICBjb25zdCBhcHBQYWNrYWdlc0FycmF5ID0gcGFja2FnZXNTdHJpbmcudHJpbSgpLnJlcGxhY2UoL3BhY2thZ2U6L2csICcnKS5zcGxpdChFT0wpO1xuICAgIGxvZ2dlci5kZWJ1ZyhgJyR7YXBwUGFja2FnZXNBcnJheX0nIGZpbHRlcmVkIHdpdGggJyR7ZmlsdGVyUGFja2FnZXN9J2ApO1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXBwUGFja2FnZXNBcnJheSwgZmlsdGVyUGFja2FnZXMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIud2FybihgVW5hYmxlIHRvIGdldCBwYWNrYWdlcyB3aXRoICdhZGIgc2hlbGwgcG0gbGlzdCBwYWNrYWdlcyAtMyc6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5oZWxwZXJzLmluaXRVbmljb2RlS2V5Ym9hcmQgPSBhc3luYyBmdW5jdGlvbiBpbml0VW5pY29kZUtleWJvYXJkIChhZGIpIHtcbiAgbG9nZ2VyLmRlYnVnKCdFbmFibGluZyBVbmljb2RlIGtleWJvYXJkIHN1cHBvcnQnKTtcblxuICAvLyBnZXQgdGhlIGRlZmF1bHQgSU1FIHNvIHdlIGNhbiByZXR1cm4gYmFjayB0byBpdCBsYXRlciBpZiB3ZSB3YW50XG4gIGxldCBkZWZhdWx0SU1FID0gYXdhaXQgYWRiLmRlZmF1bHRJTUUoKTtcblxuICBsb2dnZXIuZGVidWcoYFVuc2V0dGluZyBwcmV2aW91cyBJTUUgJHtkZWZhdWx0SU1FfWApO1xuICBjb25zdCBhcHBpdW1JTUUgPSBgJHtTRVRUSU5HU19IRUxQRVJfUEtHX0lEfS8uVW5pY29kZUlNRWA7XG4gIGxvZ2dlci5kZWJ1ZyhgU2V0dGluZyBJTUUgdG8gJyR7YXBwaXVtSU1FfSdgKTtcbiAgYXdhaXQgYWRiLmVuYWJsZUlNRShhcHBpdW1JTUUpO1xuICBhd2FpdCBhZGIuc2V0SU1FKGFwcGl1bUlNRSk7XG4gIHJldHVybiBkZWZhdWx0SU1FO1xufTtcblxuaGVscGVycy5zZXRNb2NrTG9jYXRpb25BcHAgPSBhc3luYyBmdW5jdGlvbiBzZXRNb2NrTG9jYXRpb25BcHAgKGFkYiwgYXBwKSB7XG4gIHRyeSB7XG4gICAgaWYgKGF3YWl0IGFkYi5nZXRBcGlMZXZlbCgpIDwgMjMpIHtcbiAgICAgIGF3YWl0IGFkYi5zaGVsbChbJ3NldHRpbmdzJywgJ3B1dCcsICdzZWN1cmUnLCAnbW9ja19sb2NhdGlvbicsICcxJ10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBhZGIuc2hlbGwoWydhcHBvcHMnLCAnc2V0JywgYXBwLCAnYW5kcm9pZDptb2NrX2xvY2F0aW9uJywgJ2FsbG93J10pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oYFVuYWJsZSB0byBzZXQgbW9jayBsb2NhdGlvbiBmb3IgYXBwICcke2FwcH0nOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5oZWxwZXJzLmluc3RhbGxIZWxwZXJBcHAgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsSGVscGVyQXBwIChhZGIsIGFwa1BhdGgsIHBhY2thZ2VJZCkge1xuICAvLyBTb21ldGltZXMgYWRiIHB1c2ggb3IgYWRiIGluc3RhbCB0YWtlIG1vcmUgdGltZSB0aGFuIGV4cGVjdGVkIHRvIGluc3RhbGwgYW4gYXBwXG4gIC8vIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9pby5hcHBpdW0uc2V0dGluZ3MvaXNzdWVzLzQwI2lzc3VlY29tbWVudC00NzY1OTMxNzRcbiAgYXdhaXQgcmV0cnkoMiwgYXN5bmMgZnVuY3Rpb24gcmV0cnlJbnN0YWxsSGVscGVyQXBwICgpIHtcbiAgICBhd2FpdCBhZGIuaW5zdGFsbE9yVXBncmFkZShhcGtQYXRoLCBwYWNrYWdlSWQsIHtncmFudFBlcm1pc3Npb25zOiB0cnVlfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBQdXNoZXMgYW5kIGluc3RhbGxzIGlvLmFwcGl1bS5zZXR0aW5ncyBhcHAuXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHNldHRpbmcgYXBwIGlzIHJlcXVpcmVkXG4gKlxuICogQHBhcmFtIHtBZGJ9IGFkYiAtIFRoZSBhZGIgbW9kdWxlIGluc3RhbmNlLlxuICogQHBhcmFtIHtib29sZWFufSB0aHJvd0Vycm9yW2ZhbHNlXSAtIFdoZXRoZXIgdGhyb3cgZXJyb3Igb3Igbm90XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhyb3dFcnJvciBpcyB0cnVlIGFuZCBzb21ldGhpbmcgaGFwcGVucyBpbiBpbnN0YWxsYXRpb24gc3RlcFxuICovXG5oZWxwZXJzLnB1c2hTZXR0aW5nc0FwcCA9IGFzeW5jIGZ1bmN0aW9uIHB1c2hTZXR0aW5nc0FwcCAoYWRiLCB0aHJvd0Vycm9yID0gZmFsc2UpIHtcbiAgbG9nZ2VyLmRlYnVnKCdQdXNoaW5nIHNldHRpbmdzIGFwayB0byBkZXZpY2UuLi4nKTtcblxuICB0cnkge1xuICAgIGF3YWl0IGhlbHBlcnMuaW5zdGFsbEhlbHBlckFwcChhZGIsIHNldHRpbmdzQXBrUGF0aCwgU0VUVElOR1NfSEVMUEVSX1BLR19JRCwgdGhyb3dFcnJvcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICh0aHJvd0Vycm9yKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgbG9nZ2VyLndhcm4oYElnbm9yZWQgZXJyb3Igd2hpbGUgaW5zdGFsbGluZyAnJHtzZXR0aW5nc0Fwa1BhdGh9JzogYCArXG4gICAgICAgICAgICAgICAgYCcke2Vyci5tZXNzYWdlfScuIEZlYXR1cmVzIHRoYXQgcmVseSBvbiB0aGlzIGhlbHBlciBgICtcbiAgICAgICAgICAgICAgICAncmVxdWlyZSB0aGUgYXBrIHN1Y2ggYXMgdG9nZ2xlIFdpRmkgYW5kIGdldHRpbmcgbG9jYXRpb24gJyArXG4gICAgICAgICAgICAgICAgJ3dpbGwgcmFpc2UgYW4gZXJyb3IgaWYgeW91IHRyeSB0byB1c2UgdGhlbS4nKTtcbiAgfVxuXG4gIC8vIFJlaW5zdGFsbCB3aWxsIHN0b3AgdGhlIHNldHRpbmdzIGhlbHBlciBwcm9jZXNzIGFueXdheSwgc29cbiAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBjb250aW51ZSBpZiB0aGUgYXBwbGljYXRpb24gaXMgc3RpbGwgcnVubmluZ1xuICBpZiAoYXdhaXQgYWRiLnByb2Nlc3NFeGlzdHMoU0VUVElOR1NfSEVMUEVSX1BLR19JRCkpIHtcbiAgICBsb2dnZXIuZGVidWcoYCR7U0VUVElOR1NfSEVMUEVSX1BLR19JRH0gaXMgYWxyZWFkeSBydW5uaW5nLiBgICtcbiAgICAgIGBUaGVyZSBpcyBubyBuZWVkIHRvIHJlc2V0IGl0cyBwZXJtaXNzaW9ucy5gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXdhaXQgYWRiLmdldEFwaUxldmVsKCkgPD0gMjMpIHsgLy8gQW5kcm9pZCA2LSBkZXZpY2VzIHNob3VsZCBoYXZlIGdyYW50ZWQgcGVybWlzc2lvbnNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9wdWxsLzExNjQwI2lzc3VlY29tbWVudC00MzgyNjA0NzdcbiAgICBjb25zdCBwZXJtcyA9IFsnU0VUX0FOSU1BVElPTl9TQ0FMRScsICdDSEFOR0VfQ09ORklHVVJBVElPTicsICdBQ0NFU1NfRklORV9MT0NBVElPTiddO1xuICAgIGxvZ2dlci5pbmZvKGBHcmFudGluZyBwZXJtaXNzaW9ucyAke3Blcm1zfSB0byAnJHtTRVRUSU5HU19IRUxQRVJfUEtHX0lEfSdgKTtcbiAgICBhd2FpdCBhZGIuZ3JhbnRQZXJtaXNzaW9ucyhTRVRUSU5HU19IRUxQRVJfUEtHX0lELCBwZXJtcy5tYXAoKHgpID0+IGBhbmRyb2lkLnBlcm1pc3Npb24uJHt4fWApKTtcbiAgfVxuXG4gIC8vIGxhdW5jaCBpby5hcHBpdW0uc2V0dGluZ3MgYXBwIGR1ZSB0byBzZXR0aW5ncyBmYWlsaW5nIHRvIGJlIHNldFxuICAvLyBpZiB0aGUgYXBwIGlzIG5vdCBsYXVuY2hlZCBwcmlvciB0byBzdGFydCB0aGUgc2Vzc2lvbiBvbiBhbmRyb2lkIDcrXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvODk1N1xuICB0cnkge1xuICAgIGF3YWl0IGFkYi5yZXF1aXJlUnVubmluZ1NldHRpbmdzQXBwKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci5kZWJ1ZyhlcnIpO1xuICAgIGlmICh0aHJvd0Vycm9yKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIHN0cmluZy54bWwgYW5kIGNvbnZlcnRzIGl0IHRvIHN0cmluZy5qc29uIGFuZCBwdXNoZXNcbiAqIGl0IHRvIC9kYXRhL2xvY2FsL3RtcC9zdHJpbmcuanNvbiBvbiBmb3IgdXNlIG9mIGJvb3RzdHJhcFxuICogSWYgYXBwIGlzIG5vdCBwcmVzZW50IHRvIGV4dHJhY3Qgc3RyaW5nLnhtbCBpdCBkZWxldGVzIHJlbW90ZSBzdHJpbmdzLmpzb25cbiAqIElmIGFwcCBkb2VzIG5vdCBoYXZlIHN0cmluZ3MueG1sIHdlIHB1c2ggYW4gZW1wdHkganNvbiBvYmplY3QgdG8gcmVtb3RlXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBsYW5ndWFnZSAtIExhbmd1YWdlIGFiYnJldmlhdGlvbiwgZm9yIGV4YW1wbGUgJ2ZyJy4gVGhlIGRlZmF1bHQgbGFuZ3VhZ2VcbiAqIGlzIHVzZWQgaWYgdGhpcyBhcmd1bWVudCBpcyBub3QgZGVmaW5lZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhZGIgLSBUaGUgYWRiIG1vZHVsZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gRHJpdmVyIG9wdGlvbnMgZGljdGlvbmFyeS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkaWN0aW9uYXJ5LCB3aGVyZSBzdHJpbmcgcmVzb3VyY2UgaWRlbnRpZmllcnMgYXJlIGtleXNcbiAqIGFsb25nIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBsYW5ndWFnZSBvciBhbiBlbXB0eSBvYmplY3RcbiAqIGlmIG5vIG1hdGNoaW5nIHJlc291cmNlcyB3ZXJlIGV4dHJhY3RlZC5cbiAqL1xuaGVscGVycy5wdXNoU3RyaW5ncyA9IGFzeW5jIGZ1bmN0aW9uIHB1c2hTdHJpbmdzIChsYW5ndWFnZSwgYWRiLCBvcHRzKSB7XG4gIGNvbnN0IHJlbW90ZURpciA9ICcvZGF0YS9sb2NhbC90bXAnO1xuICBjb25zdCBzdHJpbmdzSnNvbiA9ICdzdHJpbmdzLmpzb24nO1xuICBjb25zdCByZW1vdGVGaWxlID0gcGF0aC5wb3NpeC5yZXNvbHZlKHJlbW90ZURpciwgc3RyaW5nc0pzb24pO1xuXG4gIC8vIGNsZWFuIHVwIHJlbW90ZSBzdHJpbmcuanNvbiBpZiBwcmVzZW50XG4gIGF3YWl0IGFkYi5yaW1yYWYocmVtb3RlRmlsZSk7XG5cbiAgbGV0IGFwcDtcbiAgdHJ5IHtcbiAgICBhcHAgPSBvcHRzLmFwcCB8fCBhd2FpdCBhZGIucHVsbEFwayhvcHRzLmFwcFBhY2thZ2UsIG9wdHMudG1wRGlyKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmluZm8oYEZhaWxlZCB0byBwdWxsIGFuIGFwayBmcm9tICcke29wdHMuYXBwUGFja2FnZX0nIHRvICcke29wdHMudG1wRGlyfScuIE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG5cbiAgaWYgKF8uaXNFbXB0eShvcHRzLmFwcFBhY2thZ2UpIHx8ICEoYXdhaXQgZnMuZXhpc3RzKGFwcCkpKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBObyBhcHAgb3IgcGFja2FnZSBzcGVjaWZpZWQuIFJldHVybmluZyBlbXB0eSBzdHJpbmdzYCk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3Qgc3RyaW5nc1RtcERpciA9IHBhdGgucmVzb2x2ZShvcHRzLnRtcERpciwgb3B0cy5hcHBQYWNrYWdlKTtcbiAgdHJ5IHtcbiAgICBsb2dnZXIuZGVidWcoJ0V4dHJhY3Rpbmcgc3RyaW5ncyBmcm9tIGFwaycsIGFwcCwgbGFuZ3VhZ2UsIHN0cmluZ3NUbXBEaXIpO1xuICAgIGNvbnN0IHthcGtTdHJpbmdzLCBsb2NhbFBhdGh9ID0gYXdhaXQgYWRiLmV4dHJhY3RTdHJpbmdzRnJvbUFwayhhcHAsIGxhbmd1YWdlLCBzdHJpbmdzVG1wRGlyKTtcbiAgICBhd2FpdCBhZGIucHVzaChsb2NhbFBhdGgsIHJlbW90ZURpcik7XG4gICAgcmV0dXJuIGFwa1N0cmluZ3M7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKGBDb3VsZCBub3QgZ2V0IHN0cmluZ3MsIGNvbnRpbnVpbmcgYW55d2F5LiBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICBhd2FpdCBhZGIuc2hlbGwoJ2VjaG8nLCBbYCd7fScgPiAke3JlbW90ZUZpbGV9YF0pO1xuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IGZzLnJpbXJhZihzdHJpbmdzVG1wRGlyKTtcbiAgfVxuICByZXR1cm4ge307XG59O1xuXG5oZWxwZXJzLnVubG9ja1dpdGhIZWxwZXJBcHAgPSBhc3luYyBmdW5jdGlvbiB1bmxvY2tXaXRoSGVscGVyQXBwIChhZGIpIHtcbiAgbG9nZ2VyLmluZm8oJ1VubG9ja2luZyBzY3JlZW4nKTtcblxuICAvLyBVbmxvY2sgc3VjY2VlZCB3aXRoIGEgY291cGxlIG9mIHJldHJpZXMuXG4gIGxldCBmaXJzdFJ1biA9IHRydWU7XG4gIGF3YWl0IHJldHJ5KDMsIGFzeW5jIGZ1bmN0aW9uIGxhdW5jaEhlbHBlciAoKSB7XG4gICAgLy8gVG8gcmVkdWNlIGEgdGltZSB0byBjYWxsIGFkYi5pc1NjcmVlbkxvY2tlZCgpIHNpbmNlIGBhZGIgc2hlbGwgZHVtcHN5cyB3aW5kb3dgIGlzIGVhc3kgdG8gaGFuZyBhZGIgY29tbWFuZHNcbiAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgIGZpcnN0UnVuID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghKGF3YWl0IGFkYi5pc1NjcmVlbkxvY2tlZCgpKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dnZXIud2FybihgRXJyb3IgaW4gaXNTY3JlZW5Mb2NrZWQ6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICBsb2dnZXIud2FybignXCJhZGIgc2hlbGwgZHVtcHN5cyB3aW5kb3dcIiBjb21tYW5kIGhhcyB0aW1lZCBvdXQuJyk7XG4gICAgICAgIGxvZ2dlci53YXJuKCdUaGUgcmVhc29uIG9mIHRoaXMgdGltZW91dCBpcyB0aGUgZGVsYXllZCBhZGIgcmVzcG9uc2UuIFJlc2V0dGluZyBhZGIgc2VydmVyIGNhbiBpbXByb3ZlIGl0LicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxvZ2dlci5pbmZvKGBMYXVuY2hpbmcgJHtTRVRUSU5HU19IRUxQRVJfVU5MT0NLX0FDVElWSVRZfWApO1xuICAgIGF3YWl0IGFkYi5zaGVsbChbXG4gICAgICAnYW0nLCAnc3RhcnQnLFxuICAgICAgJy1uJywgYCR7U0VUVElOR1NfSEVMUEVSX1BLR19JRH0vJHtTRVRUSU5HU19IRUxQRVJfVU5MT0NLX0FDVElWSVRZfWAsXG4gICAgICAnLWMnLCAnYW5kcm9pZC5pbnRlbnQuY2F0ZWdvcnkuTEFVTkNIRVInLFxuICAgICAgJy1hJywgJ2FuZHJvaWQuaW50ZW50LmFjdGlvbi5NQUlOJyxcbiAgICAgICctZicsICcweDEwMjAwMDAwJyxcbiAgICBdKTtcbiAgICBhd2FpdCBCLmRlbGF5KDEwMDApO1xuICB9KTtcbn07XG5cbmhlbHBlcnMudW5sb2NrID0gYXN5bmMgZnVuY3Rpb24gdW5sb2NrIChkcml2ZXIsIGFkYiwgY2FwYWJpbGl0aWVzKSB7XG4gIGlmICghKGF3YWl0IGFkYi5pc1NjcmVlbkxvY2tlZCgpKSkge1xuICAgIGxvZ2dlci5pbmZvKCdTY3JlZW4gYWxyZWFkeSB1bmxvY2tlZCwgZG9pbmcgbm90aGluZycpO1xuICAgIHJldHVybjtcbiAgfVxuICBsb2dnZXIuZGVidWcoJ1NjcmVlbiBpcyBsb2NrZWQsIHRyeWluZyB0byB1bmxvY2snKTtcblxuICBpZiAoIWNhcGFiaWxpdGllcy51bmxvY2tUeXBlICYmICFjYXBhYmlsaXRpZXMudW5sb2NrS2V5KSB7XG4gICAgbG9nZ2VyLndhcm4oJ1VzaW5nIGFwcCB1bmxvY2ssIHRoaXMgaXMgZ29pbmcgdG8gYmUgZGVwcmVjYXRlZCEnKTtcbiAgICBhd2FpdCBoZWxwZXJzLnVubG9ja1dpdGhIZWxwZXJBcHAoYWRiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7XG4gICAgdW5sb2NrVHlwZSxcbiAgICB1bmxvY2tLZXksXG4gICAgdW5sb2NrU3RyYXRlZ3ksXG4gICAgdW5sb2NrU3VjY2Vzc1RpbWVvdXQsXG4gIH0gPSB1bmxvY2tlci52YWxpZGF0ZVVubG9ja0NhcGFiaWxpdGllcyhjYXBhYmlsaXRpZXMpO1xuICBpZiAodW5sb2NrS2V5ICYmIHVubG9ja1R5cGUgIT09IEZJTkdFUlBSSU5UX1VOTE9DS1xuICAgICAgJiYgKF8uaXNOaWwodW5sb2NrU3RyYXRlZ3kpIHx8IF8udG9Mb3dlcih1bmxvY2tTdHJhdGVneSkgPT09ICdsb2Nrc2V0dGluZ3MnKVxuICAgICAgJiYgYXdhaXQgYWRiLmlzTG9ja01hbmFnZW1lbnRTdXBwb3J0ZWQoKSkge1xuICAgIGF3YWl0IHVubG9ja2VyLmZhc3RVbmxvY2soYWRiLCB7XG4gICAgICBjcmVkZW50aWFsOiB1bmxvY2tLZXksXG4gICAgICBjcmVkZW50aWFsVHlwZTogdG9DcmVkZW50aWFsVHlwZSh1bmxvY2tUeXBlKSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB1bmxvY2tNZXRob2QgPSB7XG4gICAgICBbUElOX1VOTE9DS106IHVubG9ja2VyLnBpblVubG9jayxcbiAgICAgIFtQSU5fVU5MT0NLX0tFWV9FVkVOVF06IHVubG9ja2VyLnBpblVubG9ja1dpdGhLZXlFdmVudCxcbiAgICAgIFtQQVNTV09SRF9VTkxPQ0tdOiB1bmxvY2tlci5wYXNzd29yZFVubG9jayxcbiAgICAgIFtQQVRURVJOX1VOTE9DS106IHVubG9ja2VyLnBhdHRlcm5VbmxvY2ssXG4gICAgICBbRklOR0VSUFJJTlRfVU5MT0NLXTogdW5sb2NrZXIuZmluZ2VycHJpbnRVbmxvY2ssXG4gICAgfVt1bmxvY2tUeXBlXTtcbiAgICBhd2FpdCB1bmxvY2tNZXRob2QoYWRiLCBkcml2ZXIsIGNhcGFiaWxpdGllcyk7XG4gIH1cbiAgYXdhaXQgaGVscGVycy52ZXJpZnlVbmxvY2soYWRiLCB1bmxvY2tTdWNjZXNzVGltZW91dCk7XG59O1xuXG5oZWxwZXJzLnZlcmlmeVVubG9jayA9IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeVVubG9jayAoYWRiLCB0aW1lb3V0TXMgPSBudWxsKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiAhKGF3YWl0IGFkYi5pc1NjcmVlbkxvY2tlZCgpKSwge1xuICAgICAgd2FpdE1zOiB0aW1lb3V0TXMgPz8gMjAwMCxcbiAgICAgIGludGVydmFsTXM6IDUwMCxcbiAgICB9KTtcbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZGV2aWNlIGhhcyBmYWlsZWQgdG8gYmUgdW5sb2NrZWQnKTtcbiAgfVxuICBsb2dnZXIuaW5mbygnVGhlIGRldmljZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdW5sb2NrZWQnKTtcbn07XG5cbmhlbHBlcnMuaW5pdERldmljZSA9IGFzeW5jIGZ1bmN0aW9uIGluaXREZXZpY2UgKGFkYiwgb3B0cykge1xuICBjb25zdCB7XG4gICAgc2tpcERldmljZUluaXRpYWxpemF0aW9uLFxuICAgIGxvY2FsZSxcbiAgICBsYW5ndWFnZSxcbiAgICBsb2NhbGVTY3JpcHQsXG4gICAgdW5pY29kZUtleWJvYXJkLFxuICAgIGRpc2FibGVXaW5kb3dBbmltYXRpb24sXG4gICAgc2tpcFVubG9jayxcbiAgICBtb2NrTG9jYXRpb25BcHAsXG4gICAgc2tpcExvZ2NhdENhcHR1cmUsXG4gICAgbG9nY2F0Rm9ybWF0LFxuICAgIGxvZ2NhdEZpbHRlclNwZWNzLFxuICB9ID0gb3B0cztcblxuICBpZiAoc2tpcERldmljZUluaXRpYWxpemF0aW9uKSB7XG4gICAgbG9nZ2VyLmluZm8oYCdza2lwRGV2aWNlSW5pdGlhbGl6YXRpb24nIGlzIHNldC4gU2tpcHBpbmcgZGV2aWNlIGluaXRpYWxpemF0aW9uLmApO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGFkYi53YWl0Rm9yRGV2aWNlKCk7XG4gICAgLy8gcHVzaFNldHRpbmdzQXBwIHJlcXVpcmVkIGJlZm9yZSBjYWxsaW5nIGVuc3VyZURldmljZUxvY2FsZSBmb3IgQVBJIExldmVsIDI0K1xuXG4gICAgLy8gU29tZSBmZWF0dXJlIHN1Y2ggYXMgbG9jYXRpb24vd2lmaSBhcmUgbm90IG5lY2Vzc2FyeSBmb3IgYWxsIHVzZXJzLFxuICAgIC8vIGJ1dCB0aGV5IHJlcXVpcmUgdGhlIHNldHRpbmdzIGFwcC4gU28sIHRyeSB0byBjb25maWd1cmUgaXQgd2hpbGUgQXBwaXVtXG4gICAgLy8gZG9lcyBub3QgdGhyb3cgZXJyb3IgZXZlbiBpZiB0aGV5IGZhaWwuXG4gICAgY29uc3Qgc2hvdWxkVGhyb3dFcnJvciA9IGxhbmd1YWdlXG4gICAgICB8fCBsb2NhbGVcbiAgICAgIHx8IGxvY2FsZVNjcmlwdFxuICAgICAgfHwgdW5pY29kZUtleWJvYXJkXG4gICAgICB8fCBkaXNhYmxlV2luZG93QW5pbWF0aW9uXG4gICAgICB8fCAhc2tpcFVubG9jaztcbiAgICBhd2FpdCBoZWxwZXJzLnB1c2hTZXR0aW5nc0FwcChhZGIsIHNob3VsZFRocm93RXJyb3IpO1xuICB9XG5cbiAgaWYgKCFoZWxwZXJzLmlzRW11bGF0b3IoYWRiLCBvcHRzKSAmJiAobW9ja0xvY2F0aW9uQXBwIHx8IF8uaXNVbmRlZmluZWQobW9ja0xvY2F0aW9uQXBwKSkpIHtcbiAgICBhd2FpdCBoZWxwZXJzLnNldE1vY2tMb2NhdGlvbkFwcChhZGIsIG1vY2tMb2NhdGlvbkFwcCB8fCBTRVRUSU5HU19IRUxQRVJfUEtHX0lEKTtcbiAgfVxuXG4gIGlmIChsYW5ndWFnZSB8fCBsb2NhbGUpIHtcbiAgICBhd2FpdCBoZWxwZXJzLmVuc3VyZURldmljZUxvY2FsZShhZGIsIGxhbmd1YWdlLCBsb2NhbGUsIGxvY2FsZVNjcmlwdCk7XG4gIH1cblxuICBpZiAoc2tpcExvZ2NhdENhcHR1cmUpIHtcbiAgICBsb2dnZXIuaW5mbyhgJ3NraXBMb2djYXRDYXB0dXJlJyBpcyBzZXQuIFNraXBwaW5nIHN0YXJ0aW5nIGxvZ2NhdCBjYXB0dXJlLmApO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGFkYi5zdGFydExvZ2NhdCh7XG4gICAgICBmb3JtYXQ6IGxvZ2NhdEZvcm1hdCxcbiAgICAgIGZpbHRlclNwZWNzOiBsb2djYXRGaWx0ZXJTcGVjcyxcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh1bmljb2RlS2V5Ym9hcmQpIHtcbiAgICByZXR1cm4gYXdhaXQgaGVscGVycy5pbml0VW5pY29kZUtleWJvYXJkKGFkYik7XG4gIH1cbn07XG5cbmhlbHBlcnMucmVtb3ZlTnVsbFByb3BlcnRpZXMgPSBmdW5jdGlvbiByZW1vdmVOdWxsUHJvcGVydGllcyAob2JqKSB7XG4gIGZvciAobGV0IGtleSBvZiBfLmtleXMob2JqKSkge1xuICAgIGlmIChfLmlzTnVsbChvYmpba2V5XSkgfHwgXy5pc1VuZGVmaW5lZChvYmpba2V5XSkpIHtcbiAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICB9XG4gIH1cbn07XG5cbmhlbHBlcnMudHJ1bmNhdGVEZWNpbWFscyA9IGZ1bmN0aW9uIHRydW5jYXRlRGVjaW1hbHMgKG51bWJlciwgZGlnaXRzKSB7XG4gIGxldCBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIGRpZ2l0cyksXG4gICAgICBhZGp1c3RlZE51bSA9IG51bWJlciAqIG11bHRpcGxpZXIsXG4gICAgICB0cnVuY2F0ZWROdW0gPSBNYXRoW2FkanVzdGVkTnVtIDwgMCA/ICdjZWlsJyA6ICdmbG9vciddKGFkanVzdGVkTnVtKTtcblxuICByZXR1cm4gdHJ1bmNhdGVkTnVtIC8gbXVsdGlwbGllcjtcbn07XG5cbmhlbHBlcnMuaXNDaHJvbWVCcm93c2VyID0gZnVuY3Rpb24gaXNDaHJvbWVCcm93c2VyIChicm93c2VyKSB7XG4gIHJldHVybiBfLmluY2x1ZGVzKE9iamVjdC5rZXlzKENIUk9NRV9CUk9XU0VSX1BBQ0tBR0VfQUNUSVZJVFkpLCAoYnJvd3NlciB8fCAnJykudG9Mb3dlckNhc2UoKSk7XG59O1xuXG5oZWxwZXJzLmdldENocm9tZVBrZyA9IGZ1bmN0aW9uIGdldENocm9tZVBrZyAoYnJvd3Nlcikge1xuICByZXR1cm4gQ0hST01FX0JST1dTRVJfUEFDS0FHRV9BQ1RJVklUWVticm93c2VyLnRvTG93ZXJDYXNlKCldIHx8IENIUk9NRV9CUk9XU0VSX1BBQ0tBR0VfQUNUSVZJVFkuZGVmYXVsdDtcbn07XG5cbmhlbHBlcnMucmVtb3ZlQWxsU2Vzc2lvbldlYlNvY2tldEhhbmRsZXJzID0gYXN5bmMgZnVuY3Rpb24gcmVtb3ZlQWxsU2Vzc2lvbldlYlNvY2tldEhhbmRsZXJzIChzZXJ2ZXIsIHNlc3Npb25JZCkge1xuICBpZiAoIXNlcnZlciB8fCAhXy5pc0Z1bmN0aW9uKHNlcnZlci5nZXRXZWJTb2NrZXRIYW5kbGVycykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhY3RpdmVIYW5kbGVycyA9IGF3YWl0IHNlcnZlci5nZXRXZWJTb2NrZXRIYW5kbGVycyhzZXNzaW9uSWQpO1xuICBmb3IgKGNvbnN0IHBhdGhuYW1lIG9mIF8ua2V5cyhhY3RpdmVIYW5kbGVycykpIHtcbiAgICBhd2FpdCBzZXJ2ZXIucmVtb3ZlV2ViU29ja2V0SGFuZGxlcihwYXRobmFtZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGFrZXMgYSBkZXNpcmVkIGNhcGFiaWxpdHkgYW5kIHRyaWVzIHRvIEpTT04ucGFyc2UgaXQgYXMgYW4gYXJyYXksXG4gKiBhbmQgZWl0aGVyIHJldHVybnMgdGhlIHBhcnNlZCBhcnJheSBvciBhIHNpbmdsZXRvbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gY2FwIEEgZGVzaXJlZCBjYXBhYmlsaXR5XG4gKi9cbmhlbHBlcnMucGFyc2VBcnJheSA9IGZ1bmN0aW9uIHBhcnNlQXJyYXkgKGNhcCkge1xuICBsZXQgcGFyc2VkQ2FwcztcbiAgdHJ5IHtcbiAgICBwYXJzZWRDYXBzID0gSlNPTi5wYXJzZShjYXApO1xuICB9IGNhdGNoIChpZ24pIHsgfVxuXG4gIGlmIChfLmlzQXJyYXkocGFyc2VkQ2FwcykpIHtcbiAgICByZXR1cm4gcGFyc2VkQ2FwcztcbiAgfSBlbHNlIGlmIChfLmlzU3RyaW5nKGNhcCkpIHtcbiAgICByZXR1cm4gW2NhcF07XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYG11c3QgcHJvdmlkZSBhIHN0cmluZyBvciBKU09OIEFycmF5OyByZWNlaXZlZCAke2NhcH1gKTtcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgZGVzaXJlZCBjYXBhYmlsaXRpZXMuIFJldHVybnMgdHJ1ZSBpZiBjYXBhYmlsaXR5IGlzIHZhbGlkXG4gKlxuICogQHBhcmFtIHsqfSBjYXAgQSBkZXNpcmVkIGNhcGFiaWxpdHlcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgY2FwYWJpbGl0eSBpcyB2YWxpZFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBjYXBzIGhhcyBpbnZhbGlkIGNhcGFiaWxpdHlcbiAqL1xuaGVscGVycy52YWxpZGF0ZURlc2lyZWRDYXBzID0gZnVuY3Rpb24gdmFsaWRhdGVEZXNpcmVkQ2FwcyAoY2Fwcykge1xuICBpZiAoY2Fwcy5icm93c2VyTmFtZSkge1xuICAgIGlmIChjYXBzLmFwcCkge1xuICAgICAgLy8gd2FybiBpZiB0aGUgY2FwYWJpbGl0aWVzIGhhdmUgYm90aCBgYXBwYCBhbmQgYGJyb3dzZXIsIGFsdGhvdWdoIHRoaXMgaXMgY29tbW9uIHdpdGggc2VsZW5pdW0gZ3JpZFxuICAgICAgbG9nZ2VyLndhcm4oYFRoZSBkZXNpcmVkIGNhcGFiaWxpdGllcyBzaG91bGQgZ2VuZXJhbGx5IG5vdCBpbmNsdWRlIGJvdGggYW4gJ2FwcCcgYW5kIGEgJ2Jyb3dzZXJOYW1lJ2ApO1xuICAgIH1cbiAgICBpZiAoY2Fwcy5hcHBQYWNrYWdlKSB7XG4gICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhgVGhlIGRlc2lyZWQgc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggb2YgYW4gJ2FwcFBhY2thZ2UnIGFuZCBhICdicm93c2VyTmFtZSdgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoY2Fwcy51bmluc3RhbGxPdGhlclBhY2thZ2VzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucGFyc2VBcnJheShjYXBzLnVuaW5zdGFsbE90aGVyUGFja2FnZXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgcGFyc2UgXCJ1bmluc3RhbGxPdGhlclBhY2thZ2VzXCIgY2FwYWJpbGl0eTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkanVzdCB0aGUgY2FwYWJpbGl0aWVzIGZvciBhIGJyb3dzZXIgc2Vzc2lvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYXBzIC0gQ3VycmVudCBjYXBhYmlsaXRpZXMgb2JqZWN0XG4gKiAhISEgVGhlIG9iamVjdCBpcyBtdXRhdGVkIGJ5IHRoaXMgbWV0aG9kIGNhbGwgISEhXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBwb3NzaWJseSBtdXRhdGVkIGBvcHRzYCBpbnN0YW5jZS5cbiAqIE5vIG11dGF0aW9uIGlzIGhhcHBlbmluZyBpcyB0aGUgY3VycmVudCBzZXNzaW9uIGlmXG4gKiBhcHBQYWNrYWdlL2FwcEFjdGl2aXR5IGNhcHMgaGF2ZSBhbHJlYWR5IGJlZW4gcHJvdmlkZWQuXG4gKi9cbmhlbHBlcnMuYWRqdXN0QnJvd3NlclNlc3Npb25DYXBzID0gZnVuY3Rpb24gYWRqdXN0QnJvd3NlclNlc3Npb25DYXBzIChjYXBzID0ge30pIHtcbiAgY29uc3QgeyBicm93c2VyTmFtZSB9ID0gY2FwcztcbiAgbG9nZ2VyLmluZm8oYFRoZSBjdXJyZW50IHNlc3Npb24gaXMgY29uc2lkZXJlZCBicm93c2VyLWJhc2VkYCk7XG4gIGxvZ2dlci5pbmZvKGBTdXBwb3J0ZWQgYnJvd3NlciBuYW1lczogJHtKU09OLnN0cmluZ2lmeShfLmtleXMoQ0hST01FX0JST1dTRVJfUEFDS0FHRV9BQ1RJVklUWSkpfWApO1xuICBpZiAoY2Fwcy5hcHBQYWNrYWdlIHx8IGNhcHMuYXBwQWN0aXZpdHkpIHtcbiAgICBsb2dnZXIuaW5mbyhgTm90IG92ZXJyaWRpbmcgYXBwUGFja2FnZS9hcHBBY3Rpdml0eSBjYXBhYmlsaXR5IHZhbHVlcyBmb3IgJyR7YnJvd3Nlck5hbWV9JyBgICtcbiAgICAgICdiZWNhdXNlIHNvbWUgb2YgdGhlbSBoYXZlIGJlZW4gYWxyZWFkeSBwcm92aWRlZCcpO1xuICAgIHJldHVybiBjYXBzO1xuICB9XG5cbiAgY29uc3Qge3BrZywgYWN0aXZpdHl9ID0gdGhpcy5nZXRDaHJvbWVQa2coYnJvd3Nlck5hbWUpO1xuICBjYXBzLmFwcFBhY2thZ2UgPSBwa2c7XG4gIGNhcHMuYXBwQWN0aXZpdHkgPSBhY3Rpdml0eTtcbiAgbG9nZ2VyLmluZm8oYGFwcFBhY2thZ2UvYXBwQWN0aXZpdHkgY2FwYWJpbGl0aWVzIGhhdmUgYmVlbiBhdXRvbWF0aWNhbGx5IHNldCB0byAke3BrZ30vJHthY3Rpdml0eX0gYCArXG4gICAgYGZvciAnJHticm93c2VyTmFtZX0nYCk7XG4gIGxvZ2dlci5pbmZvKGBDb25zaWRlciBjaGFuZ2luZyB0aGUgYnJvd3Nlck5hbWUgdG8gdGhlIG9uZSBmcm9tIHRoZSBsaXN0IG9mIHN1cHBvcnRlZCBicm93c2VyIG5hbWVzIGAgK1xuICAgIGBvciBwcm92aWRlIGN1c3RvbSBhcHBQYWNrYWdlL2FwcEFjdGl2aXR5IGNhcGFiaWxpdHkgdmFsdWVzIGlmIHRoZSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIG9uZXMgZG8gYCArXG4gICAgYG5vdCBtYWtlIHNlbnNlYCk7XG4gIHJldHVybiBjYXBzO1xufTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgY3VycmVudCBkZXZpY2UgdW5kZXIgdGVzdCBpcyBhbiBlbXVsYXRvclxuICpcbiAqIEBwYXJhbSB7QURCfSBhZGIgLSBhcHBpdW0tYWRiIGluc3RhbmNlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIGRyaXZlciBvcHRpb25zIG1hcHBpbmdcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIGRldmljZSBpcyBhbiBBbmRyb2lkIGVtdWxhdG9yXG4gKi9cbmhlbHBlcnMuaXNFbXVsYXRvciA9IGZ1bmN0aW9uIGlzRW11bGF0b3IgKGFkYiwgb3B0cykge1xuICBjb25zdCBwb3NzaWJsZU5hbWVzID0gW29wdHMudWRpZCwgYWRiPy5jdXJEZXZpY2VJZF07XG4gIHJldHVybiAhIW9wdHMuYXZkIHx8IHBvc3NpYmxlTmFtZXMuc29tZSgoeCkgPT4gRU1VTEFUT1JfUEFUVEVSTi50ZXN0KHgpKTtcbn07XG5cbmhlbHBlcnMuYm9vdHN0cmFwID0gQm9vdHN0cmFwO1xuaGVscGVycy51bmxvY2tlciA9IHVubG9ja2VyO1xuXG5leHBvcnQgeyBoZWxwZXJzLCBTRVRUSU5HU19IRUxQRVJfUEtHX0lELCBBUFBfU1RBVEUsIHByZXBhcmVBdmRBcmdzLCBlbnN1cmVOZXR3b3JrU3BlZWQgfTtcbmV4cG9ydCBkZWZhdWx0IGhlbHBlcnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLHVCQUF1QixHQUFHLEtBQWhDO0FBRUEsTUFBTUMsK0JBQStCLEdBQUc7RUFDdENDLE1BQU0sRUFBRTtJQUNOQyxHQUFHLEVBQUUsb0JBREM7SUFFTkMsUUFBUSxFQUFFO0VBRkosQ0FEOEI7RUFLdENDLFFBQVEsRUFBRTtJQUNSRixHQUFHLEVBQUUsMkJBREc7SUFFUkMsUUFBUSxFQUFFO0VBRkYsQ0FMNEI7RUFTdENFLFVBQVUsRUFBRTtJQUNWSCxHQUFHLEVBQUUsaUJBREs7SUFFVkMsUUFBUSxFQUFFO0VBRkEsQ0FUMEI7RUFhdENHLE9BQU8sRUFBRTtJQUNQSixHQUFHLEVBQUUscUJBREU7SUFFUEMsUUFBUSxFQUFFO0VBRkgsQ0FiNkI7RUFpQnRDLG9CQUFvQjtJQUNsQkQsR0FBRyxFQUFFLHFCQURhO0lBRWxCQyxRQUFRLEVBQUU7RUFGUSxDQWpCa0I7RUFxQnRDLG9CQUFvQjtJQUNsQkQsR0FBRyxFQUFFLDRCQURhO0lBRWxCQyxRQUFRLEVBQUU7RUFGUSxDQXJCa0I7RUF5QnRDSSxPQUFPLEVBQUU7SUFDUEwsR0FBRyxFQUFFLG9CQURFO0lBRVBDLFFBQVEsRUFBRTtFQUZIO0FBekI2QixDQUF4QztBQThCQSxNQUFNSyxzQkFBc0IsR0FBRyxvQkFBL0I7O0FBQ0EsTUFBTUMsK0JBQStCLEdBQUcsU0FBeEM7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxlQUF6QjtBQUdBLE1BQU1DLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWM7RUFDOUJDLGFBQWEsRUFBRSxDQURlO0VBRTlCQyxXQUFXLEVBQUUsQ0FGaUI7RUFHOUJDLHFCQUFxQixFQUFFLENBSE87RUFJOUJDLHFCQUFxQixFQUFFO0FBSk8sQ0FBZCxDQUFsQjs7O0FBUUEsU0FBU0Msa0JBQVQsQ0FBNkJDLEdBQTdCLEVBQWtDQyxZQUFsQyxFQUFnRDtFQUM5QyxJQUFJQyxlQUFBLENBQUVDLE1BQUYsQ0FBU0gsR0FBRyxDQUFDSSxhQUFiLEVBQTRCQyxRQUE1QixDQUFxQ0osWUFBckMsQ0FBSixFQUF3RDtJQUN0RCxPQUFPQSxZQUFQO0VBQ0Q7O0VBQ0RLLGVBQUEsQ0FBT0MsSUFBUCxDQUFhLDhCQUE2Qk4sWUFBYSxxQkFBb0JELEdBQUcsQ0FBQ0ksYUFBSixDQUFrQkksSUFBSyxJQUF0RixHQUNULHFCQUFvQk4sZUFBQSxDQUFFQyxNQUFGLENBQVNILEdBQUcsQ0FBQ0ksYUFBYixDQUE0QixFQURuRDs7RUFFQSxPQUFPSixHQUFHLENBQUNJLGFBQUosQ0FBa0JJLElBQXpCO0FBQ0Q7O0FBRUQsU0FBU0MsY0FBVCxDQUF5QlQsR0FBekIsRUFBOEJVLElBQTlCLEVBQW9DO0VBQ2xDLE1BQU07SUFDSlQsWUFESTtJQUVKVSxVQUZJO0lBR0pDO0VBSEksSUFJRkYsSUFKSjtFQUtBLE1BQU1HLE1BQU0sR0FBRyxFQUFmOztFQUNBLElBQUlELE9BQUosRUFBYTtJQUNYLElBQUlWLGVBQUEsQ0FBRVksT0FBRixDQUFVRixPQUFWLENBQUosRUFBd0I7TUFDdEJDLE1BQU0sQ0FBQ0UsSUFBUCxDQUFZLEdBQUdILE9BQWY7SUFDRCxDQUZELE1BRU87TUFDTEMsTUFBTSxDQUFDRSxJQUFQLENBQVksR0FBSUMsYUFBQSxDQUFLQyxVQUFMLENBQWlCLEdBQUVMLE9BQVEsRUFBM0IsQ0FBaEI7SUFDRDtFQUNGOztFQUNELElBQUlYLFlBQUosRUFBa0I7SUFDaEJZLE1BQU0sQ0FBQ0UsSUFBUCxDQUFZLFdBQVosRUFBeUJoQixrQkFBa0IsQ0FBQ0MsR0FBRCxFQUFNQyxZQUFOLENBQTNDO0VBQ0Q7O0VBQ0QsSUFBSVUsVUFBSixFQUFnQjtJQUNkRSxNQUFNLENBQUNFLElBQVAsQ0FBWSxZQUFaO0VBQ0Q7O0VBQ0QsT0FBT0YsTUFBUDtBQUNEOztBQUVELFNBQVNLLGdCQUFULENBQTJCQyxVQUEzQixFQUF1QztFQUNyQyxNQUFNTixNQUFNLEdBQUc7SUFDYixDQUFDTyx5QkFBRCxHQUFjLEtBREQ7SUFFYixDQUFDQyxtQ0FBRCxHQUF3QixLQUZYO0lBR2IsQ0FBQ0MsOEJBQUQsR0FBbUIsVUFITjtJQUliLENBQUNDLDZCQUFELEdBQWtCO0VBSkwsRUFLYkosVUFMYSxDQUFmOztFQU1BLElBQUlOLE1BQUosRUFBWTtJQUNWLE9BQU9BLE1BQVA7RUFDRDs7RUFDRCxNQUFNLElBQUlXLEtBQUosQ0FBVyxnQkFBZUwsVUFBVyxnQkFBckMsQ0FBTjtBQUNEOztBQUdELE1BQU1NLE9BQU8sR0FBRyxFQUFoQjs7O0FBRUFBLE9BQU8sQ0FBQ0MsYUFBUixHQUF3QixlQUFlQSxhQUFmLENBQThCaEIsSUFBSSxHQUFHLEVBQXJDLEVBQXlDO0VBRy9ELE1BQU07SUFDSmlCLE9BREk7SUFFSkMsa0JBRkk7SUFHSkMsYUFISTtJQUlKQyxzQkFKSTtJQUtKQyxjQUxJO0lBTUpDLFdBTkk7SUFPSkMsWUFQSTtJQVFKQyxnQkFSSTtJQVNKQyxRQVRJO0lBVUpDLFdBVkk7SUFXSkMsb0JBWEk7SUFZSkMsaUJBWkk7SUFhSkMsbUJBYkk7SUFjSkM7RUFkSSxJQWVGOUIsSUFmSjtFQWdCQSxPQUFPLE1BQU0rQixrQkFBQSxDQUFJQyxTQUFKLENBQWM7SUFDekJmLE9BRHlCO0lBRXpCQyxrQkFGeUI7SUFHekJDLGFBSHlCO0lBSXpCQyxzQkFKeUI7SUFLekJDLGNBTHlCO0lBTXpCQyxXQU55QjtJQU96QkMsWUFQeUI7SUFRekJDLGdCQVJ5QjtJQVN6QkMsUUFUeUI7SUFVekJDLFdBVnlCO0lBV3pCQyxvQkFYeUI7SUFZekJDLGlCQVp5QjtJQWF6QkMsbUJBYnlCO0lBY3pCQztFQWR5QixDQUFkLENBQWI7QUFnQkQsQ0FuQ0Q7O0FBcUNBZixPQUFPLENBQUNrQixlQUFSLEdBQTBCLGVBQWVBLGVBQWYsQ0FBZ0MzQyxHQUFoQyxFQUFxQ1UsSUFBckMsRUFBMkM7RUFDbkUsTUFBTTtJQUNKa0MsR0FESTtJQUVKQyxNQUFNLEVBQUVDLEdBRko7SUFHSkMsUUFISTtJQUlKQyxNQUFNLEVBQUVDLE9BSko7SUFLSkMsZ0JBQWdCLEVBQUVDLGFBTGQ7SUFNSkMsZUFBZSxFQUFFQztFQU5iLElBT0YzQyxJQVBKOztFQVFBLElBQUksQ0FBQ2tDLEdBQUwsRUFBVTtJQUNSLE1BQU0sSUFBSXBCLEtBQUosQ0FBVSxvQ0FBVixDQUFOO0VBQ0Q7O0VBRUQsTUFBTThCLE9BQU8sR0FBR1YsR0FBRyxDQUFDVyxPQUFKLENBQVksR0FBWixFQUFpQixFQUFqQixDQUFoQjtFQUNBLE1BQU1DLFVBQVUsR0FBRyxNQUFNeEQsR0FBRyxDQUFDeUQsYUFBSixDQUFrQkgsT0FBbEIsQ0FBekI7RUFDQSxNQUFNSSxJQUFJLEdBQUdqRCxjQUFjLENBQUNULEdBQUQsRUFBTVUsSUFBTixDQUEzQjs7RUFDQSxJQUFJOEMsVUFBSixFQUFnQjtJQUNkLElBQUlFLElBQUksQ0FBQ3JELFFBQUwsQ0FBYyxZQUFkLENBQUosRUFBaUM7TUFDL0JDLGVBQUEsQ0FBT3FELEtBQVAsQ0FBYyxZQUFXTCxPQUFRLDBDQUFqQzs7TUFDQSxNQUFNdEQsR0FBRyxDQUFDNEQsWUFBSixDQUFpQk4sT0FBakIsQ0FBTjtJQUNELENBSEQsTUFHTztNQUNMaEQsZUFBQSxDQUFPcUQsS0FBUCxDQUFhLGtEQUFiOztNQUNBO0lBQ0Q7RUFDRjs7RUFDRCxNQUFNM0QsR0FBRyxDQUFDNkQsU0FBSixDQUFjakIsR0FBZCxFQUFtQjtJQUN2QmMsSUFEdUI7SUFFdkJaLEdBRnVCO0lBR3ZCQyxRQUh1QjtJQUl2QkUsT0FKdUI7SUFLdkJFLGFBTHVCO0lBTXZCRTtFQU51QixDQUFuQixDQUFOO0FBUUQsQ0FqQ0Q7O0FBK0NBNUIsT0FBTyxDQUFDcUMsa0JBQVIsR0FBNkIsZUFBZUEsa0JBQWYsQ0FBbUM5RCxHQUFuQyxFQUF3QytDLFFBQXhDLEVBQWtERSxPQUFsRCxFQUEyRGMsTUFBTSxHQUFHLElBQXBFLEVBQTBFO0VBQ3JHLElBQUksQ0FBQzdELGVBQUEsQ0FBRThELFFBQUYsQ0FBV2pCLFFBQVgsQ0FBRCxJQUF5QixDQUFDN0MsZUFBQSxDQUFFOEQsUUFBRixDQUFXZixPQUFYLENBQTlCLEVBQW1EO0lBQ2pEM0MsZUFBQSxDQUFPQyxJQUFQLENBQWEsd0RBQWI7O0lBQ0FELGVBQUEsQ0FBT0MsSUFBUCxDQUFhLGtCQUFpQndDLFFBQVMsbUJBQWtCRSxPQUFRLEdBQWpFOztJQUNBO0VBQ0Q7O0VBRUQsTUFBTWpELEdBQUcsQ0FBQ2lFLHdCQUFKLENBQTZCbEIsUUFBN0IsRUFBdUNFLE9BQXZDLEVBQWdEYyxNQUFoRCxDQUFOOztFQUVBLElBQUksRUFBQyxNQUFNL0QsR0FBRyxDQUFDa0UsbUJBQUosQ0FBd0JuQixRQUF4QixFQUFrQ0UsT0FBbEMsRUFBMkNjLE1BQTNDLENBQVAsQ0FBSixFQUErRDtJQUM3RCxNQUFNSSxPQUFPLEdBQUdKLE1BQU0sR0FBSSxhQUFZaEIsUUFBUyxjQUFhRSxPQUFRLGdCQUFlYyxNQUFPLEVBQXBFLEdBQXlFLGFBQVloQixRQUFTLGlCQUFnQkUsT0FBUSxFQUE1STtJQUNBLE1BQU0sSUFBSXpCLEtBQUosQ0FBVyxpQkFBZ0IyQyxPQUFRLEVBQW5DLENBQU47RUFDRDtBQUNGLENBYkQ7O0FBZUExQyxPQUFPLENBQUMyQyxxQkFBUixHQUFnQyxlQUFlQSxxQkFBZixDQUFzQzFELElBQUksR0FBRyxFQUE3QyxFQUFpRDtFQUsvRSxNQUFNVixHQUFHLEdBQUcsTUFBTXlCLE9BQU8sQ0FBQ0MsYUFBUixDQUFzQmhCLElBQXRCLENBQWxCO0VBQ0EsSUFBSTJELElBQUksR0FBRzNELElBQUksQ0FBQzJELElBQWhCO0VBQ0EsSUFBSUMsTUFBTSxHQUFHLElBQWI7O0VBR0EsSUFBSTVELElBQUksQ0FBQ2tDLEdBQVQsRUFBYztJQUNaLE1BQU1uQixPQUFPLENBQUNrQixlQUFSLENBQXdCM0MsR0FBeEIsRUFBNkJVLElBQTdCLENBQU47SUFDQTJELElBQUksR0FBR3JFLEdBQUcsQ0FBQ3VFLFdBQVg7SUFDQUQsTUFBTSxHQUFHdEUsR0FBRyxDQUFDd0UsWUFBYjtFQUNELENBSkQsTUFJTztJQUVMbEUsZUFBQSxDQUFPbUUsSUFBUCxDQUFZLHdCQUFaOztJQUNBLElBQUlDLE9BQU8sR0FBRyxNQUFNMUUsR0FBRyxDQUFDMkUsbUJBQUosRUFBcEI7O0lBR0EsSUFBSU4sSUFBSixFQUFVO01BQ1IsSUFBSSxDQUFDbkUsZUFBQSxDQUFFRyxRQUFGLENBQVdILGVBQUEsQ0FBRTBFLEdBQUYsQ0FBTUYsT0FBTixFQUFlLE1BQWYsQ0FBWCxFQUFtQ0wsSUFBbkMsQ0FBTCxFQUErQztRQUM3Qy9ELGVBQUEsQ0FBT3VFLGFBQVAsQ0FBc0IsVUFBU1IsSUFBSywyQ0FBcEM7TUFDRDs7TUFDREMsTUFBTSxHQUFHdEUsR0FBRyxDQUFDOEUseUJBQUosQ0FBOEJULElBQTlCLENBQVQ7SUFDRCxDQUxELE1BS08sSUFBSTNELElBQUksQ0FBQ3FFLGVBQVQsRUFBMEI7TUFDL0JyRSxJQUFJLENBQUNxRSxlQUFMLEdBQXdCLEdBQUVyRSxJQUFJLENBQUNxRSxlQUFnQixFQUF4QixDQUEwQkMsSUFBMUIsRUFBdkI7TUFHQSxNQUFNRCxlQUFlLEdBQUdFLGVBQUEsQ0FBT0MsTUFBUCxDQUFjeEUsSUFBSSxDQUFDcUUsZUFBbkIsS0FBdUNyRSxJQUFJLENBQUNxRSxlQUFwRTs7TUFDQXpFLGVBQUEsQ0FBT21FLElBQVAsQ0FBYSxzQ0FBcUNNLGVBQWdCLEdBQWxFOztNQUlBLE1BQU1JLFlBQVksR0FBRyxFQUFyQjtNQUNBLElBQUlDLHFCQUFxQixHQUFHLElBQTVCOztNQUVBLEtBQUssTUFBTUMsTUFBWCxJQUFxQlgsT0FBckIsRUFBOEI7UUFFNUIsTUFBTTFFLEdBQUcsQ0FBQ3NGLFdBQUosQ0FBZ0JELE1BQU0sQ0FBQ2hCLElBQXZCLENBQU47UUFDQSxNQUFNa0IsV0FBVyxHQUFHLE1BQU12RixHQUFHLENBQUN3RixrQkFBSixFQUExQjtRQUdBTCxZQUFZLENBQUNwRSxJQUFiLENBQW1CLEdBQUVzRSxNQUFNLENBQUNoQixJQUFLLEtBQUlrQixXQUFZLEdBQWpEO1FBQ0EsTUFBTUUsUUFBUSxHQUFHUixlQUFBLENBQU9DLE1BQVAsQ0FBY0ssV0FBZCxLQUE4QkEsV0FBL0M7O1FBQ0EsSUFBSSxDQUFDRSxRQUFMLEVBQWU7VUFDYjtRQUNEOztRQUVELE1BQU1DLHdCQUF3QixHQUFHVCxlQUFBLENBQU9VLEtBQVAsQ0FBYUYsUUFBYixLQUEwQlIsZUFBQSxDQUFPVSxLQUFQLENBQWFaLGVBQWIsQ0FBM0Q7O1FBQ0EsTUFBTWEsc0JBQXNCLEdBQUcxRixlQUFBLENBQUU4RCxRQUFGLENBQVd5QixRQUFYLEtBQXdCdkYsZUFBQSxDQUFFOEQsUUFBRixDQUFXZSxlQUFYLENBQXZEOztRQUNBLElBQUlXLHdCQUF3QixJQUFJRCxRQUFRLENBQUNJLE9BQVQsS0FBcUJkLGVBQWUsQ0FBQ2MsT0FBakUsSUFDR0Qsc0JBQXNCLElBQUkxRixlQUFBLENBQUU0RixPQUFGLENBQVVMLFFBQVYsTUFBd0J2RixlQUFBLENBQUU0RixPQUFGLENBQVVmLGVBQVYsQ0FEekQsRUFDcUY7VUFFbkZWLElBQUksR0FBR2dCLE1BQU0sQ0FBQ2hCLElBQWQ7VUFDQTtRQUNELENBTEQsTUFLTyxJQUFJLENBQUNxQix3QkFBTCxFQUErQjtVQUVwQztRQUNEOztRQUVELElBQUksQ0FBQyxDQUFDeEYsZUFBQSxDQUFFRyxRQUFGLENBQVdLLElBQUksQ0FBQ3FFLGVBQWhCLEVBQWlDLEdBQWpDLENBQUQsSUFBMENBLGVBQWUsQ0FBQ2dCLEtBQWhCLEtBQTBCTixRQUFRLENBQUNNLEtBQTdFLElBQ0VoQixlQUFlLENBQUNnQixLQUFoQixLQUEwQk4sUUFBUSxDQUFDTSxLQUFuQyxJQUE0Q2hCLGVBQWUsQ0FBQ2lCLEtBQWhCLEtBQTBCUCxRQUFRLENBQUNPLEtBRGxGLE1BSUlaLHFCQUFxQixJQUFJSCxlQUFBLENBQU9nQixFQUFQLENBQVVSLFFBQVYsRUFBb0J2RixlQUFBLENBQUVDLE1BQUYsQ0FBU2lGLHFCQUFULEVBQWdDLENBQWhDLENBQXBCLENBQXpCLElBQ0csQ0FBQ0EscUJBTFIsQ0FBSixFQUtvQztVQUNsQ0EscUJBQXFCLEdBQUc7WUFBQyxDQUFDQyxNQUFNLENBQUNoQixJQUFSLEdBQWVvQjtVQUFoQixDQUF4QjtRQUNEO01BQ0Y7O01BQ0QsSUFBSSxDQUFDcEIsSUFBRCxJQUFTZSxxQkFBYixFQUFvQztRQUNsQ2YsSUFBSSxHQUFHbkUsZUFBQSxDQUFFZ0csSUFBRixDQUFPZCxxQkFBUCxFQUE4QixDQUE5QixDQUFQO1FBQ0EsTUFBTXBGLEdBQUcsQ0FBQ3NGLFdBQUosQ0FBZ0JqQixJQUFoQixDQUFOO01BQ0Q7O01BRUQsSUFBSSxDQUFDQSxJQUFMLEVBQVc7UUFFVC9ELGVBQUEsQ0FBT3VFLGFBQVAsQ0FBc0IsOENBQUQsR0FDbEIsV0FBVW5FLElBQUksQ0FBQ3FFLGVBQWdCLGlDQURiLEdBRW5CSSxZQUFZLENBQUNnQixJQUFiLENBQWtCLElBQWxCLENBRkY7TUFHRDs7TUFFRDdCLE1BQU0sR0FBR3RFLEdBQUcsQ0FBQzhFLHlCQUFKLENBQThCVCxJQUE5QixDQUFUO0lBQ0QsQ0ExRE0sTUEwREE7TUFFTEEsSUFBSSxHQUFHSyxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdMLElBQWxCO01BQ0FDLE1BQU0sR0FBR3RFLEdBQUcsQ0FBQzhFLHlCQUFKLENBQThCVCxJQUE5QixDQUFUO0lBQ0Q7RUFDRjs7RUFFRC9ELGVBQUEsQ0FBT21FLElBQVAsQ0FBYSxpQkFBZ0JKLElBQUssRUFBbEM7O0VBQ0EsT0FBTztJQUFDQSxJQUFEO0lBQU9DO0VBQVAsQ0FBUDtBQUNELENBNUZEOztBQStGQTdDLE9BQU8sQ0FBQ2lCLFNBQVIsR0FBb0IsZUFBZUEsU0FBZixDQUEwQmhDLElBQUksR0FBRyxFQUFqQyxFQUFxQztFQUN2RCxNQUFNO0lBQUMyRCxJQUFEO0lBQU9DO0VBQVAsSUFBaUI1RCxJQUF2QjtFQUNBLE1BQU1WLEdBQUcsR0FBRyxNQUFNeUIsT0FBTyxDQUFDQyxhQUFSLENBQXNCaEIsSUFBdEIsQ0FBbEI7RUFDQVYsR0FBRyxDQUFDc0YsV0FBSixDQUFnQmpCLElBQWhCOztFQUNBLElBQUlDLE1BQUosRUFBWTtJQUNWdEUsR0FBRyxDQUFDb0csZUFBSixDQUFvQjlCLE1BQXBCO0VBQ0Q7O0VBRUQsT0FBT3RFLEdBQVA7QUFDRCxDQVREOztBQVdBeUIsT0FBTyxDQUFDNEUsNEJBQVIsR0FBdUMsU0FBU0EsNEJBQVQsQ0FBdUMzRixJQUF2QyxFQUE2QztFQUNsRixLQUFLLE1BQU00RixHQUFYLElBQWtCLENBQUMsWUFBRCxFQUFlLGFBQWYsRUFBOEIsZ0JBQTlCLEVBQWdELGlCQUFoRCxDQUFsQixFQUFzRjtJQUNwRixNQUFNQyxJQUFJLEdBQUc3RixJQUFJLENBQUM0RixHQUFELENBQWpCOztJQUNBLElBQUksQ0FBQ0MsSUFBTCxFQUFXO01BQ1Q7SUFDRDs7SUFFRCxNQUFNQyxLQUFLLEdBQUcsY0FBY0MsSUFBZCxDQUFtQkYsSUFBbkIsQ0FBZDs7SUFDQSxJQUFJLENBQUNDLEtBQUwsRUFBWTtNQUNWO0lBQ0Q7O0lBRURsRyxlQUFBLENBQU9DLElBQVAsQ0FBYSxlQUFjK0YsR0FBSSxzR0FBL0I7O0lBQ0FoRyxlQUFBLENBQU9DLElBQVAsQ0FBYSxrQkFBaUJnRyxJQUFLLHlDQUF3Q0MsS0FBSyxDQUFDRSxLQUFNLE1BQUtILElBQUksQ0FBQ0ksU0FBTCxDQUFlLENBQWYsRUFBa0JILEtBQUssQ0FBQ0UsS0FBTixHQUFjLENBQWhDLENBQW1DLEdBQS9IO0VBQ0Q7QUFDRixDQWZEOztBQWlCQWpGLE9BQU8sQ0FBQ21GLGFBQVIsR0FBd0IsZUFBZUEsYUFBZixDQUE4QjVHLEdBQTlCLEVBQW1DVSxJQUFuQyxFQUF5QztFQUMvRCxJQUFJO0lBQUNtRyxHQUFEO0lBQU1DLFVBQU47SUFBa0JDLFdBQWxCO0lBQStCQyxjQUEvQjtJQUErQ0M7RUFBL0MsSUFBa0V2RyxJQUF0RTs7RUFDQSxJQUFJLENBQUNtRyxHQUFMLEVBQVU7SUFDUnZHLGVBQUEsQ0FBT0MsSUFBUCxDQUFZLDhDQUFaOztJQUNBO0VBQ0Q7O0VBRUQsS0FBSzhGLDRCQUFMLENBQWtDM0YsSUFBbEM7O0VBRUEsSUFBSW9HLFVBQVUsSUFBSUMsV0FBbEIsRUFBK0I7SUFDN0I7RUFDRDs7RUFFRHpHLGVBQUEsQ0FBT3FELEtBQVAsQ0FBYSxnREFBYjs7RUFDQSxJQUFJO0lBQUN1RCxVQUFEO0lBQWFDO0VBQWIsSUFDRixNQUFNbkgsR0FBRyxDQUFDb0gsb0NBQUosQ0FBeUNQLEdBQXpDLENBRFI7O0VBRUEsSUFBSUssVUFBVSxJQUFJLENBQUNKLFVBQW5CLEVBQStCO0lBQzdCQSxVQUFVLEdBQUdJLFVBQWI7RUFDRDs7RUFDRCxJQUFJLENBQUNGLGNBQUwsRUFBcUI7SUFDbkJBLGNBQWMsR0FBR0YsVUFBakI7RUFDRDs7RUFDRCxJQUFJSyxXQUFXLElBQUksQ0FBQ0osV0FBcEIsRUFBaUM7SUFDL0JBLFdBQVcsR0FBR0ksV0FBZDtFQUNEOztFQUNELElBQUksQ0FBQ0YsZUFBTCxFQUFzQjtJQUNwQkEsZUFBZSxHQUFHRixXQUFsQjtFQUNEOztFQUNEekcsZUFBQSxDQUFPcUQsS0FBUCxDQUFjLG9DQUFtQ3VELFVBQVcsSUFBR0MsV0FBWSxFQUEzRTs7RUFDQSxPQUFPO0lBQUNMLFVBQUQ7SUFBYUUsY0FBYjtJQUE2QkQsV0FBN0I7SUFBMENFO0VBQTFDLENBQVA7QUFDRCxDQTlCRDs7QUFnQ0F4RixPQUFPLENBQUM0RixRQUFSLEdBQW1CLGVBQWVBLFFBQWYsQ0FBeUJySCxHQUF6QixFQUE4QlUsSUFBSSxHQUFHLEVBQXJDLEVBQXlDO0VBQzFELE1BQU07SUFDSm1HLEdBREk7SUFFSkMsVUFGSTtJQUdKUSxTQUhJO0lBSUpDLFNBSkk7SUFLSkMscUJBQXFCLEdBQUc1SSx1QkFMcEI7SUFNSjZJLG9CQU5JO0lBT0pDO0VBUEksSUFRRmhILElBUko7O0VBVUEsSUFBSSxDQUFDb0csVUFBTCxFQUFpQjtJQUNmLE1BQU0sSUFBSXRGLEtBQUosQ0FBVSxpQ0FBVixDQUFOO0VBQ0Q7O0VBRUQsTUFBTW1HLFdBQVcsR0FBRyxNQUFNM0gsR0FBRyxDQUFDNEgsY0FBSixDQUFtQmQsVUFBbkIsQ0FBMUI7O0VBRUEsSUFBSWEsV0FBSixFQUFpQjtJQUNmLElBQUk7TUFDRixNQUFNM0gsR0FBRyxDQUFDNkgsU0FBSixDQUFjZixVQUFkLENBQU47SUFDRCxDQUZELENBRUUsT0FBT2dCLEdBQVAsRUFBWSxDQUFFOztJQUVoQixJQUFJLENBQUNQLFNBQUQsSUFBY0QsU0FBbEIsRUFBNkI7TUFDM0IsTUFBTVMsTUFBTSxHQUFHLE1BQU0vSCxHQUFHLENBQUNnSSxLQUFKLENBQVVsQixVQUFWLENBQXJCOztNQUNBLElBQUk1RyxlQUFBLENBQUU4RCxRQUFGLENBQVcrRCxNQUFYLEtBQXNCQSxNQUFNLENBQUNFLFdBQVAsR0FBcUI1SCxRQUFyQixDQUE4QixRQUE5QixDQUExQixFQUFtRTtRQUNqRSxNQUFNLElBQUltQixLQUFKLENBQVcseUNBQXdDc0YsVUFBVyxzQkFBcUJpQixNQUFPLEVBQTFGLENBQU47TUFDRDs7TUFFRCxJQUFJTixvQkFBSixFQUEwQjtRQUN4QixJQUFJO1VBQ0YsTUFBTXpILEdBQUcsQ0FBQ2tJLG1CQUFKLENBQXdCcEIsVUFBeEIsQ0FBTjtRQUNELENBRkQsQ0FFRSxPQUFPcUIsS0FBUCxFQUFjO1VBQ2Q3SCxlQUFBLENBQU82SCxLQUFQLENBQWMsMERBQXlEQSxLQUFLLENBQUNoRSxPQUFRLEVBQXJGO1FBQ0Q7TUFDRjs7TUFDRDdELGVBQUEsQ0FBT3FELEtBQVAsQ0FBYywwQ0FBeUNtRCxVQUFXLGdDQUFsRTs7TUFDQTtJQUNEO0VBQ0Y7O0VBRUQsSUFBSSxDQUFDRCxHQUFMLEVBQVU7SUFDUixNQUFNLElBQUlyRixLQUFKLENBQVUsd0NBQVYsQ0FBTjtFQUNEOztFQUVEbEIsZUFBQSxDQUFPcUQsS0FBUCxDQUFjLDBCQUF5Qm1ELFVBQVcsZUFBbEQ7O0VBQ0EsSUFBSWEsV0FBSixFQUFpQjtJQUNmLE1BQU0zSCxHQUFHLENBQUNvSSxZQUFKLENBQWlCdEIsVUFBakIsQ0FBTjtFQUNEOztFQUNELE1BQU05RyxHQUFHLENBQUNxSSxPQUFKLENBQVl4QixHQUFaLEVBQWlCO0lBQ3JCeUIsZ0JBQWdCLEVBQUViLG9CQURHO0lBRXJCYyxPQUFPLEVBQUVmLHFCQUZZO0lBR3JCRTtFQUhxQixDQUFqQixDQUFOO0FBS0QsQ0FyREQ7O0FBdURBakcsT0FBTyxDQUFDK0csVUFBUixHQUFxQixlQUFlQSxVQUFmLENBQTJCeEksR0FBM0IsRUFBZ0NVLElBQUksR0FBRyxFQUF2QyxFQUEyQztFQUM5RCxNQUFNO0lBQ0ptRyxHQURJO0lBRUpDLFVBRkk7SUFHSlEsU0FISTtJQUlKQyxTQUpJO0lBS0pDLHFCQUFxQixHQUFHNUksdUJBTHBCO0lBTUo2SSxvQkFOSTtJQU9KQyxpQkFQSTtJQVFKZTtFQVJJLElBU0YvSCxJQVRKOztFQVdBLElBQUksQ0FBQ21HLEdBQUQsSUFBUSxDQUFDQyxVQUFiLEVBQXlCO0lBQ3ZCLE1BQU0sSUFBSXRGLEtBQUosQ0FBVSw2Q0FBVixDQUFOO0VBQ0Q7O0VBRUQsSUFBSStGLFNBQUosRUFBZTtJQUNiLE1BQU0sS0FBS0YsUUFBTCxDQUFjckgsR0FBZCxFQUFtQlUsSUFBbkIsQ0FBTjtJQUNBO0VBQ0Q7O0VBRUQsTUFBTTtJQUNKZ0ksUUFESTtJQUVKQztFQUZJLElBR0YsTUFBTTNJLEdBQUcsQ0FBQzRJLGdCQUFKLENBQXFCL0IsR0FBckIsRUFBMEJDLFVBQTFCLEVBQXNDO0lBQzlDd0IsZ0JBQWdCLEVBQUViLG9CQUQ0QjtJQUU5Q2MsT0FBTyxFQUFFZixxQkFGcUM7SUFHOUNFLGlCQUg4QztJQUk5Q21CLG1CQUFtQixFQUFFSjtFQUp5QixDQUF0QyxDQUhWO0VBV0EsTUFBTUssMEJBQTBCLEdBQUcsQ0FBQ0gsY0FBRCxJQUM5QkQsUUFBUSxLQUFLMUksR0FBRyxDQUFDK0ksaUJBQUosQ0FBc0JwSixhQUR4Qzs7RUFFQSxJQUFJMkgsU0FBUyxJQUFJd0IsMEJBQWpCLEVBQTZDO0lBQzNDeEksZUFBQSxDQUFPbUUsSUFBUCxDQUFhLDZCQUE0QnFDLFVBQVcsR0FBcEQ7O0lBQ0EsTUFBTSxLQUFLTyxRQUFMLENBQWNySCxHQUFkLEVBQW1CVSxJQUFuQixDQUFOO0VBQ0Q7QUFDRixDQXRDRDs7QUE2Q0FlLE9BQU8sQ0FBQ3VILGdCQUFSLEdBQTJCLGVBQWVBLGdCQUFmLENBQWlDQyxTQUFqQyxFQUE0Q2pKLEdBQTVDLEVBQWlEVSxJQUFqRCxFQUF1RDtFQUNoRixJQUFJO0lBQ0Y4RyxxQkFBcUIsR0FBRzVJLHVCQUR0QjtJQUVGNkksb0JBRkU7SUFHRkM7RUFIRSxJQUlBaEgsSUFKSjtFQU9BLE1BQU13SSxpQkFBQSxDQUFFQyxHQUFGLENBQU1GLFNBQVMsQ0FBQ3JFLEdBQVYsQ0FBZXdFLFFBQUQsSUFBYztJQUN0QzlJLGVBQUEsQ0FBT3FELEtBQVAsQ0FBYyxtQkFBa0J5RixRQUFTLEVBQXpDOztJQUNBLE9BQU9wSixHQUFHLENBQUM0SSxnQkFBSixDQUFxQlEsUUFBckIsRUFBK0IsSUFBL0IsRUFBcUM7TUFDMUNkLGdCQUFnQixFQUFFYixvQkFEd0I7TUFFMUNjLE9BQU8sRUFBRWYscUJBRmlDO01BRzFDRTtJQUgwQyxDQUFyQyxDQUFQO0VBS0QsQ0FQVyxDQUFOLENBQU47QUFRRCxDQWhCRDs7QUF3QkFqRyxPQUFPLENBQUM0SCxzQkFBUixHQUFpQyxlQUFlQSxzQkFBZixDQUF1Q3JKLEdBQXZDLEVBQTRDc0osV0FBNUMsRUFBeURDLGNBQWMsR0FBRyxFQUExRSxFQUE4RTtFQUM3RyxJQUFJRCxXQUFXLENBQUNqSixRQUFaLENBQXFCLEdBQXJCLENBQUosRUFBK0I7SUFDN0JDLGVBQUEsQ0FBT3FELEtBQVAsQ0FBYSxnQ0FBYjs7SUFDQTJGLFdBQVcsR0FBRyxNQUFNLEtBQUtFLHFCQUFMLENBQTJCeEosR0FBM0IsRUFBZ0N1SixjQUFoQyxDQUFwQjtFQUNEOztFQUVEakosZUFBQSxDQUFPcUQsS0FBUCxDQUFjLDBCQUF5QjJGLFdBQVksRUFBbkQ7O0VBQ0EsTUFBTUosaUJBQUEsQ0FBRUMsR0FBRixDQUFNRyxXQUFXLENBQUMxRSxHQUFaLENBQWlCa0MsVUFBRCxJQUFnQjlHLEdBQUcsQ0FBQ29JLFlBQUosQ0FBaUJ0QixVQUFqQixDQUFoQyxDQUFOLENBQU47QUFDRCxDQVJEOztBQWdCQXJGLE9BQU8sQ0FBQytILHFCQUFSLEdBQWdDLGVBQWVBLHFCQUFmLENBQXNDeEosR0FBdEMsRUFBMkN1SixjQUFjLEdBQUcsRUFBNUQsRUFBZ0U7RUFDOUYsSUFBSTtJQUNGLE1BQU1FLGNBQWMsR0FBRyxNQUFNekosR0FBRyxDQUFDMEosS0FBSixDQUFVLENBQUMsSUFBRCxFQUFPLE1BQVAsRUFBZSxVQUFmLEVBQTJCLElBQTNCLENBQVYsQ0FBN0I7SUFDQSxNQUFNQyxnQkFBZ0IsR0FBR0YsY0FBYyxDQUFDekUsSUFBZixHQUFzQnpCLE9BQXRCLENBQThCLFdBQTlCLEVBQTJDLEVBQTNDLEVBQStDcUcsS0FBL0MsQ0FBcURDLE9BQXJELENBQXpCOztJQUNBdkosZUFBQSxDQUFPcUQsS0FBUCxDQUFjLElBQUdnRyxnQkFBaUIsb0JBQW1CSixjQUFlLEdBQXBFOztJQUNBLE9BQU9ySixlQUFBLENBQUU0SixVQUFGLENBQWFILGdCQUFiLEVBQStCSixjQUEvQixDQUFQO0VBQ0QsQ0FMRCxDQUtFLE9BQU9RLEdBQVAsRUFBWTtJQUNaekosZUFBQSxDQUFPQyxJQUFQLENBQWEsZ0VBQStEd0osR0FBRyxDQUFDNUYsT0FBUSxFQUF4Rjs7SUFDQSxPQUFPLEVBQVA7RUFDRDtBQUNGLENBVkQ7O0FBWUExQyxPQUFPLENBQUN1SSxtQkFBUixHQUE4QixlQUFlQSxtQkFBZixDQUFvQ2hLLEdBQXBDLEVBQXlDO0VBQ3JFTSxlQUFBLENBQU9xRCxLQUFQLENBQWEsbUNBQWI7O0VBR0EsSUFBSXNHLFVBQVUsR0FBRyxNQUFNakssR0FBRyxDQUFDaUssVUFBSixFQUF2Qjs7RUFFQTNKLGVBQUEsQ0FBT3FELEtBQVAsQ0FBYywwQkFBeUJzRyxVQUFXLEVBQWxEOztFQUNBLE1BQU1DLFNBQVMsR0FBSSxHQUFFN0ssc0JBQXVCLGNBQTVDOztFQUNBaUIsZUFBQSxDQUFPcUQsS0FBUCxDQUFjLG1CQUFrQnVHLFNBQVUsR0FBMUM7O0VBQ0EsTUFBTWxLLEdBQUcsQ0FBQ21LLFNBQUosQ0FBY0QsU0FBZCxDQUFOO0VBQ0EsTUFBTWxLLEdBQUcsQ0FBQ29LLE1BQUosQ0FBV0YsU0FBWCxDQUFOO0VBQ0EsT0FBT0QsVUFBUDtBQUNELENBWkQ7O0FBY0F4SSxPQUFPLENBQUM0SSxrQkFBUixHQUE2QixlQUFlQSxrQkFBZixDQUFtQ3JLLEdBQW5DLEVBQXdDNkcsR0FBeEMsRUFBNkM7RUFDeEUsSUFBSTtJQUNGLElBQUksT0FBTTdHLEdBQUcsQ0FBQ3NLLFdBQUosRUFBTixJQUEwQixFQUE5QixFQUFrQztNQUNoQyxNQUFNdEssR0FBRyxDQUFDMEosS0FBSixDQUFVLENBQUMsVUFBRCxFQUFhLEtBQWIsRUFBb0IsUUFBcEIsRUFBOEIsZUFBOUIsRUFBK0MsR0FBL0MsQ0FBVixDQUFOO0lBQ0QsQ0FGRCxNQUVPO01BQ0wsTUFBTTFKLEdBQUcsQ0FBQzBKLEtBQUosQ0FBVSxDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCN0MsR0FBbEIsRUFBdUIsdUJBQXZCLEVBQWdELE9BQWhELENBQVYsQ0FBTjtJQUNEO0VBQ0YsQ0FORCxDQU1FLE9BQU9rRCxHQUFQLEVBQVk7SUFDWnpKLGVBQUEsQ0FBT0MsSUFBUCxDQUFhLHdDQUF1Q3NHLEdBQUksTUFBS2tELEdBQUcsQ0FBQzVGLE9BQVEsRUFBekU7RUFDRDtBQUNGLENBVkQ7O0FBWUExQyxPQUFPLENBQUM4SSxnQkFBUixHQUEyQixlQUFlQSxnQkFBZixDQUFpQ3ZLLEdBQWpDLEVBQXNDd0ssT0FBdEMsRUFBK0NDLFNBQS9DLEVBQTBEO0VBR25GLE1BQU0sSUFBQUMsZUFBQSxFQUFNLENBQU4sRUFBUyxlQUFlQyxxQkFBZixHQUF3QztJQUNyRCxNQUFNM0ssR0FBRyxDQUFDNEksZ0JBQUosQ0FBcUI0QixPQUFyQixFQUE4QkMsU0FBOUIsRUFBeUM7TUFBQ25DLGdCQUFnQixFQUFFO0lBQW5CLENBQXpDLENBQU47RUFDRCxDQUZLLENBQU47QUFHRCxDQU5EOztBQWdCQTdHLE9BQU8sQ0FBQ21KLGVBQVIsR0FBMEIsZUFBZUEsZUFBZixDQUFnQzVLLEdBQWhDLEVBQXFDNkssVUFBVSxHQUFHLEtBQWxELEVBQXlEO0VBQ2pGdkssZUFBQSxDQUFPcUQsS0FBUCxDQUFhLG1DQUFiOztFQUVBLElBQUk7SUFDRixNQUFNbEMsT0FBTyxDQUFDOEksZ0JBQVIsQ0FBeUJ2SyxHQUF6QixFQUE4QjhLLGNBQTlCLEVBQStDekwsc0JBQS9DLEVBQXVFd0wsVUFBdkUsQ0FBTjtFQUNELENBRkQsQ0FFRSxPQUFPZCxHQUFQLEVBQVk7SUFDWixJQUFJYyxVQUFKLEVBQWdCO01BQ2QsTUFBTWQsR0FBTjtJQUNEOztJQUVEekosZUFBQSxDQUFPQyxJQUFQLENBQWEsbUNBQWtDdUssY0FBZ0IsS0FBbkQsR0FDQyxJQUFHZixHQUFHLENBQUM1RixPQUFRLHVDQURoQixHQUVBLDJEQUZBLEdBR0EsNkNBSFo7RUFJRDs7RUFJRCxJQUFJLE1BQU1uRSxHQUFHLENBQUMrSyxhQUFKLENBQWtCMUwsc0JBQWxCLENBQVYsRUFBcUQ7SUFDbkRpQixlQUFBLENBQU9xRCxLQUFQLENBQWMsR0FBRXRFLHNCQUF1Qix1QkFBMUIsR0FDViw0Q0FESDs7SUFFQTtFQUNEOztFQUVELElBQUksT0FBTVcsR0FBRyxDQUFDc0ssV0FBSixFQUFOLEtBQTJCLEVBQS9CLEVBQW1DO0lBRWpDLE1BQU1VLEtBQUssR0FBRyxDQUFDLHFCQUFELEVBQXdCLHNCQUF4QixFQUFnRCxzQkFBaEQsQ0FBZDs7SUFDQTFLLGVBQUEsQ0FBT21FLElBQVAsQ0FBYSx3QkFBdUJ1RyxLQUFNLFFBQU8zTCxzQkFBdUIsR0FBeEU7O0lBQ0EsTUFBTVcsR0FBRyxDQUFDc0ksZ0JBQUosQ0FBcUJqSixzQkFBckIsRUFBNkMyTCxLQUFLLENBQUNwRyxHQUFOLENBQVdxRyxDQUFELElBQVEsc0JBQXFCQSxDQUFFLEVBQXpDLENBQTdDLENBQU47RUFDRDs7RUFLRCxJQUFJO0lBQ0YsTUFBTWpMLEdBQUcsQ0FBQ2tMLHlCQUFKLEVBQU47RUFDRCxDQUZELENBRUUsT0FBT25CLEdBQVAsRUFBWTtJQUNaekosZUFBQSxDQUFPcUQsS0FBUCxDQUFhb0csR0FBYjs7SUFDQSxJQUFJYyxVQUFKLEVBQWdCO01BQ2QsTUFBTWQsR0FBTjtJQUNEO0VBQ0Y7QUFDRixDQTFDRDs7QUEwREF0SSxPQUFPLENBQUMwSixXQUFSLEdBQXNCLGVBQWVBLFdBQWYsQ0FBNEJwSSxRQUE1QixFQUFzQy9DLEdBQXRDLEVBQTJDVSxJQUEzQyxFQUFpRDtFQUNyRSxNQUFNMEssU0FBUyxHQUFHLGlCQUFsQjtFQUNBLE1BQU1DLFdBQVcsR0FBRyxjQUFwQjs7RUFDQSxNQUFNQyxVQUFVLEdBQUdDLGFBQUEsQ0FBS0MsS0FBTCxDQUFXQyxPQUFYLENBQW1CTCxTQUFuQixFQUE4QkMsV0FBOUIsQ0FBbkI7O0VBR0EsTUFBTXJMLEdBQUcsQ0FBQzBMLE1BQUosQ0FBV0osVUFBWCxDQUFOO0VBRUEsSUFBSXpFLEdBQUo7O0VBQ0EsSUFBSTtJQUNGQSxHQUFHLEdBQUduRyxJQUFJLENBQUNtRyxHQUFMLEtBQVksTUFBTTdHLEdBQUcsQ0FBQzJMLE9BQUosQ0FBWWpMLElBQUksQ0FBQ29HLFVBQWpCLEVBQTZCcEcsSUFBSSxDQUFDa0wsTUFBbEMsQ0FBbEIsQ0FBTjtFQUNELENBRkQsQ0FFRSxPQUFPN0IsR0FBUCxFQUFZO0lBQ1p6SixlQUFBLENBQU9tRSxJQUFQLENBQWEsK0JBQThCL0QsSUFBSSxDQUFDb0csVUFBVyxTQUFRcEcsSUFBSSxDQUFDa0wsTUFBTyxzQkFBcUI3QixHQUFHLENBQUM1RixPQUFRLEVBQWhIO0VBQ0Q7O0VBRUQsSUFBSWpFLGVBQUEsQ0FBRTJMLE9BQUYsQ0FBVW5MLElBQUksQ0FBQ29HLFVBQWYsS0FBOEIsRUFBRSxNQUFNZ0YsV0FBQSxDQUFHQyxNQUFILENBQVVsRixHQUFWLENBQVIsQ0FBbEMsRUFBMkQ7SUFDekR2RyxlQUFBLENBQU9xRCxLQUFQLENBQWMsc0RBQWQ7O0lBQ0EsT0FBTyxFQUFQO0VBQ0Q7O0VBRUQsTUFBTXFJLGFBQWEsR0FBR1QsYUFBQSxDQUFLRSxPQUFMLENBQWEvSyxJQUFJLENBQUNrTCxNQUFsQixFQUEwQmxMLElBQUksQ0FBQ29HLFVBQS9CLENBQXRCOztFQUNBLElBQUk7SUFDRnhHLGVBQUEsQ0FBT3FELEtBQVAsQ0FBYSw2QkFBYixFQUE0Q2tELEdBQTVDLEVBQWlEOUQsUUFBakQsRUFBMkRpSixhQUEzRDs7SUFDQSxNQUFNO01BQUNDLFVBQUQ7TUFBYUM7SUFBYixJQUEwQixNQUFNbE0sR0FBRyxDQUFDbU0scUJBQUosQ0FBMEJ0RixHQUExQixFQUErQjlELFFBQS9CLEVBQXlDaUosYUFBekMsQ0FBdEM7SUFDQSxNQUFNaE0sR0FBRyxDQUFDZSxJQUFKLENBQVNtTCxTQUFULEVBQW9CZCxTQUFwQixDQUFOO0lBQ0EsT0FBT2EsVUFBUDtFQUNELENBTEQsQ0FLRSxPQUFPbEMsR0FBUCxFQUFZO0lBQ1p6SixlQUFBLENBQU9DLElBQVAsQ0FBYSw2REFBNER3SixHQUFHLENBQUM1RixPQUFRLEVBQXJGOztJQUNBLE1BQU1uRSxHQUFHLENBQUMwSixLQUFKLENBQVUsTUFBVixFQUFrQixDQUFFLFVBQVM0QixVQUFXLEVBQXRCLENBQWxCLENBQU47RUFDRCxDQVJELFNBUVU7SUFDUixNQUFNUSxXQUFBLENBQUdKLE1BQUgsQ0FBVU0sYUFBVixDQUFOO0VBQ0Q7O0VBQ0QsT0FBTyxFQUFQO0FBQ0QsQ0FqQ0Q7O0FBbUNBdkssT0FBTyxDQUFDMkssbUJBQVIsR0FBOEIsZUFBZUEsbUJBQWYsQ0FBb0NwTSxHQUFwQyxFQUF5QztFQUNyRU0sZUFBQSxDQUFPbUUsSUFBUCxDQUFZLGtCQUFaOztFQUdBLElBQUk0SCxRQUFRLEdBQUcsSUFBZjtFQUNBLE1BQU0sSUFBQTNCLGVBQUEsRUFBTSxDQUFOLEVBQVMsZUFBZTRCLFlBQWYsR0FBK0I7SUFFNUMsSUFBSUQsUUFBSixFQUFjO01BQ1pBLFFBQVEsR0FBRyxLQUFYO0lBQ0QsQ0FGRCxNQUVPO01BQ0wsSUFBSTtRQUNGLElBQUksRUFBRSxNQUFNck0sR0FBRyxDQUFDdU0sY0FBSixFQUFSLENBQUosRUFBbUM7VUFDakM7UUFDRDtNQUNGLENBSkQsQ0FJRSxPQUFPQyxDQUFQLEVBQVU7UUFDVmxNLGVBQUEsQ0FBT0MsSUFBUCxDQUFhLDRCQUEyQmlNLENBQUMsQ0FBQ3JJLE9BQVEsRUFBbEQ7O1FBQ0E3RCxlQUFBLENBQU9DLElBQVAsQ0FBWSxtREFBWjs7UUFDQUQsZUFBQSxDQUFPQyxJQUFQLENBQVksOEZBQVo7TUFDRDtJQUNGOztJQUVERCxlQUFBLENBQU9tRSxJQUFQLENBQWEsYUFBWW5GLCtCQUFnQyxFQUF6RDs7SUFDQSxNQUFNVSxHQUFHLENBQUMwSixLQUFKLENBQVUsQ0FDZCxJQURjLEVBQ1IsT0FEUSxFQUVkLElBRmMsRUFFUCxHQUFFckssc0JBQXVCLElBQUdDLCtCQUFnQyxFQUZyRCxFQUdkLElBSGMsRUFHUixrQ0FIUSxFQUlkLElBSmMsRUFJUiw0QkFKUSxFQUtkLElBTGMsRUFLUixZQUxRLENBQVYsQ0FBTjtJQU9BLE1BQU00SixpQkFBQSxDQUFFdUQsS0FBRixDQUFRLElBQVIsQ0FBTjtFQUNELENBekJLLENBQU47QUEwQkQsQ0EvQkQ7O0FBaUNBaEwsT0FBTyxDQUFDaUwsTUFBUixHQUFpQixlQUFlQSxNQUFmLENBQXVCQyxNQUF2QixFQUErQjNNLEdBQS9CLEVBQW9DNE0sWUFBcEMsRUFBa0Q7RUFDakUsSUFBSSxFQUFFLE1BQU01TSxHQUFHLENBQUN1TSxjQUFKLEVBQVIsQ0FBSixFQUFtQztJQUNqQ2pNLGVBQUEsQ0FBT21FLElBQVAsQ0FBWSx3Q0FBWjs7SUFDQTtFQUNEOztFQUNEbkUsZUFBQSxDQUFPcUQsS0FBUCxDQUFhLG9DQUFiOztFQUVBLElBQUksQ0FBQ2lKLFlBQVksQ0FBQ3pMLFVBQWQsSUFBNEIsQ0FBQ3lMLFlBQVksQ0FBQ0MsU0FBOUMsRUFBeUQ7SUFDdkR2TSxlQUFBLENBQU9DLElBQVAsQ0FBWSxtREFBWjs7SUFDQSxNQUFNa0IsT0FBTyxDQUFDMkssbUJBQVIsQ0FBNEJwTSxHQUE1QixDQUFOO0lBQ0E7RUFDRDs7RUFFRCxNQUFNO0lBQ0ptQixVQURJO0lBRUowTCxTQUZJO0lBR0pDLGNBSEk7SUFJSkM7RUFKSSxJQUtGQyxzQkFBQSxDQUFTQywwQkFBVCxDQUFvQ0wsWUFBcEMsQ0FMSjs7RUFNQSxJQUFJQyxTQUFTLElBQUkxTCxVQUFVLEtBQUsrTCxpQ0FBNUIsS0FDSWhOLGVBQUEsQ0FBRWlOLEtBQUYsQ0FBUUwsY0FBUixLQUEyQjVNLGVBQUEsQ0FBRTRGLE9BQUYsQ0FBVWdILGNBQVYsTUFBOEIsY0FEN0QsTUFFRyxNQUFNOU0sR0FBRyxDQUFDb04seUJBQUosRUFGVCxDQUFKLEVBRThDO0lBQzVDLE1BQU1KLHNCQUFBLENBQVNLLFVBQVQsQ0FBb0JyTixHQUFwQixFQUF5QjtNQUM3QnNOLFVBQVUsRUFBRVQsU0FEaUI7TUFFN0JVLGNBQWMsRUFBRXJNLGdCQUFnQixDQUFDQyxVQUFEO0lBRkgsQ0FBekIsQ0FBTjtFQUlELENBUEQsTUFPTztJQUNMLE1BQU1xTSxZQUFZLEdBQUc7TUFDbkIsQ0FBQ3BNLHlCQUFELEdBQWM0TCxzQkFBQSxDQUFTUyxTQURKO01BRW5CLENBQUNwTSxtQ0FBRCxHQUF3QjJMLHNCQUFBLENBQVNVLHFCQUZkO01BR25CLENBQUNwTSw4QkFBRCxHQUFtQjBMLHNCQUFBLENBQVNXLGNBSFQ7TUFJbkIsQ0FBQ3BNLDZCQUFELEdBQWtCeUwsc0JBQUEsQ0FBU1ksYUFKUjtNQUtuQixDQUFDVixpQ0FBRCxHQUFzQkYsc0JBQUEsQ0FBU2E7SUFMWixFQU1uQjFNLFVBTm1CLENBQXJCO0lBT0EsTUFBTXFNLFlBQVksQ0FBQ3hOLEdBQUQsRUFBTTJNLE1BQU4sRUFBY0MsWUFBZCxDQUFsQjtFQUNEOztFQUNELE1BQU1uTCxPQUFPLENBQUNxTSxZQUFSLENBQXFCOU4sR0FBckIsRUFBMEIrTSxvQkFBMUIsQ0FBTjtBQUNELENBckNEOztBQXVDQXRMLE9BQU8sQ0FBQ3FNLFlBQVIsR0FBdUIsZUFBZUEsWUFBZixDQUE2QjlOLEdBQTdCLEVBQWtDK04sU0FBUyxHQUFHLElBQTlDLEVBQW9EO0VBQ3pFLElBQUk7SUFDRixNQUFNLElBQUFDLDBCQUFBLEVBQWlCLFlBQVksRUFBRSxNQUFNaE8sR0FBRyxDQUFDdU0sY0FBSixFQUFSLENBQTdCLEVBQTREO01BQ2hFMEIsTUFBTSxFQUFFRixTQUFGLGFBQUVBLFNBQUYsY0FBRUEsU0FBRixHQUFlLElBRDJDO01BRWhFRyxVQUFVLEVBQUU7SUFGb0QsQ0FBNUQsQ0FBTjtFQUlELENBTEQsQ0FLRSxPQUFPcEcsR0FBUCxFQUFZO0lBQ1osTUFBTSxJQUFJdEcsS0FBSixDQUFVLHNDQUFWLENBQU47RUFDRDs7RUFDRGxCLGVBQUEsQ0FBT21FLElBQVAsQ0FBWSwyQ0FBWjtBQUNELENBVkQ7O0FBWUFoRCxPQUFPLENBQUMwTSxVQUFSLEdBQXFCLGVBQWVBLFVBQWYsQ0FBMkJuTyxHQUEzQixFQUFnQ1UsSUFBaEMsRUFBc0M7RUFDekQsTUFBTTtJQUNKME4sd0JBREk7SUFFSnBMLE1BRkk7SUFHSkQsUUFISTtJQUlKc0wsWUFKSTtJQUtKQyxlQUxJO0lBTUpDLHNCQU5JO0lBT0pDLFVBUEk7SUFRSkMsZUFSSTtJQVNKQyxpQkFUSTtJQVVKQyxZQVZJO0lBV0pDO0VBWEksSUFZRmxPLElBWko7O0VBY0EsSUFBSTBOLHdCQUFKLEVBQThCO0lBQzVCOU4sZUFBQSxDQUFPbUUsSUFBUCxDQUFhLG9FQUFiO0VBQ0QsQ0FGRCxNQUVPO0lBQ0wsTUFBTXpFLEdBQUcsQ0FBQzZPLGFBQUosRUFBTjtJQU1BLE1BQU1DLGdCQUFnQixHQUFHL0wsUUFBUSxJQUM1QkMsTUFEb0IsSUFFcEJxTCxZQUZvQixJQUdwQkMsZUFIb0IsSUFJcEJDLHNCQUpvQixJQUtwQixDQUFDQyxVQUxOO0lBTUEsTUFBTS9NLE9BQU8sQ0FBQ21KLGVBQVIsQ0FBd0I1SyxHQUF4QixFQUE2QjhPLGdCQUE3QixDQUFOO0VBQ0Q7O0VBRUQsSUFBSSxDQUFDck4sT0FBTyxDQUFDc04sVUFBUixDQUFtQi9PLEdBQW5CLEVBQXdCVSxJQUF4QixDQUFELEtBQW1DK04sZUFBZSxJQUFJdk8sZUFBQSxDQUFFOE8sV0FBRixDQUFjUCxlQUFkLENBQXRELENBQUosRUFBMkY7SUFDekYsTUFBTWhOLE9BQU8sQ0FBQzRJLGtCQUFSLENBQTJCckssR0FBM0IsRUFBZ0N5TyxlQUFlLElBQUlwUCxzQkFBbkQsQ0FBTjtFQUNEOztFQUVELElBQUkwRCxRQUFRLElBQUlDLE1BQWhCLEVBQXdCO0lBQ3RCLE1BQU12QixPQUFPLENBQUNxQyxrQkFBUixDQUEyQjlELEdBQTNCLEVBQWdDK0MsUUFBaEMsRUFBMENDLE1BQTFDLEVBQWtEcUwsWUFBbEQsQ0FBTjtFQUNEOztFQUVELElBQUlLLGlCQUFKLEVBQXVCO0lBQ3JCcE8sZUFBQSxDQUFPbUUsSUFBUCxDQUFhLCtEQUFiO0VBQ0QsQ0FGRCxNQUVPO0lBQ0wsTUFBTXpFLEdBQUcsQ0FBQ2lQLFdBQUosQ0FBZ0I7TUFDcEJDLE1BQU0sRUFBRVAsWUFEWTtNQUVwQlEsV0FBVyxFQUFFUDtJQUZPLENBQWhCLENBQU47RUFJRDs7RUFFRCxJQUFJTixlQUFKLEVBQXFCO0lBQ25CLE9BQU8sTUFBTTdNLE9BQU8sQ0FBQ3VJLG1CQUFSLENBQTRCaEssR0FBNUIsQ0FBYjtFQUNEO0FBQ0YsQ0FyREQ7O0FBdURBeUIsT0FBTyxDQUFDMk4sb0JBQVIsR0FBK0IsU0FBU0Esb0JBQVQsQ0FBK0JDLEdBQS9CLEVBQW9DO0VBQ2pFLEtBQUssSUFBSS9JLEdBQVQsSUFBZ0JwRyxlQUFBLENBQUVnRyxJQUFGLENBQU9tSixHQUFQLENBQWhCLEVBQTZCO0lBQzNCLElBQUluUCxlQUFBLENBQUVvUCxNQUFGLENBQVNELEdBQUcsQ0FBQy9JLEdBQUQsQ0FBWixLQUFzQnBHLGVBQUEsQ0FBRThPLFdBQUYsQ0FBY0ssR0FBRyxDQUFDL0ksR0FBRCxDQUFqQixDQUExQixFQUFtRDtNQUNqRCxPQUFPK0ksR0FBRyxDQUFDL0ksR0FBRCxDQUFWO0lBQ0Q7RUFDRjtBQUNGLENBTkQ7O0FBUUE3RSxPQUFPLENBQUM4TixnQkFBUixHQUEyQixTQUFTQSxnQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLE1BQW5DLEVBQTJDO0VBQ3BFLElBQUlDLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsRUFBVCxFQUFhSCxNQUFiLENBQWpCO0VBQUEsSUFDSUksV0FBVyxHQUFHTCxNQUFNLEdBQUdFLFVBRDNCO0VBQUEsSUFFSUksWUFBWSxHQUFHSCxJQUFJLENBQUNFLFdBQVcsR0FBRyxDQUFkLEdBQWtCLE1BQWxCLEdBQTJCLE9BQTVCLENBQUosQ0FBeUNBLFdBQXpDLENBRm5CO0VBSUEsT0FBT0MsWUFBWSxHQUFHSixVQUF0QjtBQUNELENBTkQ7O0FBUUFqTyxPQUFPLENBQUNzTyxlQUFSLEdBQTBCLFNBQVNBLGVBQVQsQ0FBMEI1USxPQUExQixFQUFtQztFQUMzRCxPQUFPZSxlQUFBLENBQUVHLFFBQUYsQ0FBV1osTUFBTSxDQUFDeUcsSUFBUCxDQUFZckgsK0JBQVosQ0FBWCxFQUF5RCxDQUFDTSxPQUFPLElBQUksRUFBWixFQUFnQjhJLFdBQWhCLEVBQXpELENBQVA7QUFDRCxDQUZEOztBQUlBeEcsT0FBTyxDQUFDdU8sWUFBUixHQUF1QixTQUFTQSxZQUFULENBQXVCN1EsT0FBdkIsRUFBZ0M7RUFDckQsT0FBT04sK0JBQStCLENBQUNNLE9BQU8sQ0FBQzhJLFdBQVIsRUFBRCxDQUEvQixJQUEwRHBKLCtCQUErQixDQUFDTyxPQUFqRztBQUNELENBRkQ7O0FBSUFxQyxPQUFPLENBQUN3TyxpQ0FBUixHQUE0QyxlQUFlQSxpQ0FBZixDQUFrREMsTUFBbEQsRUFBMERDLFNBQTFELEVBQXFFO0VBQy9HLElBQUksQ0FBQ0QsTUFBRCxJQUFXLENBQUNoUSxlQUFBLENBQUVrUSxVQUFGLENBQWFGLE1BQU0sQ0FBQ0csb0JBQXBCLENBQWhCLEVBQTJEO0lBQ3pEO0VBQ0Q7O0VBRUQsTUFBTUMsY0FBYyxHQUFHLE1BQU1KLE1BQU0sQ0FBQ0csb0JBQVAsQ0FBNEJGLFNBQTVCLENBQTdCOztFQUNBLEtBQUssTUFBTUksUUFBWCxJQUF1QnJRLGVBQUEsQ0FBRWdHLElBQUYsQ0FBT29LLGNBQVAsQ0FBdkIsRUFBK0M7SUFDN0MsTUFBTUosTUFBTSxDQUFDTSxzQkFBUCxDQUE4QkQsUUFBOUIsQ0FBTjtFQUNEO0FBQ0YsQ0FURDs7QUFpQkE5TyxPQUFPLENBQUNnUCxVQUFSLEdBQXFCLFNBQVNBLFVBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCO0VBQzdDLElBQUlDLFVBQUo7O0VBQ0EsSUFBSTtJQUNGQSxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxHQUFYLENBQWI7RUFDRCxDQUZELENBRUUsT0FBTzVJLEdBQVAsRUFBWSxDQUFHOztFQUVqQixJQUFJNUgsZUFBQSxDQUFFWSxPQUFGLENBQVU2UCxVQUFWLENBQUosRUFBMkI7SUFDekIsT0FBT0EsVUFBUDtFQUNELENBRkQsTUFFTyxJQUFJelEsZUFBQSxDQUFFOEQsUUFBRixDQUFXME0sR0FBWCxDQUFKLEVBQXFCO0lBQzFCLE9BQU8sQ0FBQ0EsR0FBRCxDQUFQO0VBQ0Q7O0VBRUQsTUFBTSxJQUFJbFAsS0FBSixDQUFXLGlEQUFnRGtQLEdBQUksRUFBL0QsQ0FBTjtBQUNELENBYkQ7O0FBc0JBalAsT0FBTyxDQUFDcVAsbUJBQVIsR0FBOEIsU0FBU0EsbUJBQVQsQ0FBOEJDLElBQTlCLEVBQW9DO0VBQ2hFLElBQUlBLElBQUksQ0FBQ0MsV0FBVCxFQUFzQjtJQUNwQixJQUFJRCxJQUFJLENBQUNsSyxHQUFULEVBQWM7TUFFWnZHLGVBQUEsQ0FBT0MsSUFBUCxDQUFhLHlGQUFiO0lBQ0Q7O0lBQ0QsSUFBSXdRLElBQUksQ0FBQ2pLLFVBQVQsRUFBcUI7TUFDbkJ4RyxlQUFBLENBQU91RSxhQUFQLENBQXNCLDRFQUF0QjtJQUNEO0VBQ0Y7O0VBRUQsSUFBSWtNLElBQUksQ0FBQzFILHNCQUFULEVBQWlDO0lBQy9CLElBQUk7TUFDRixLQUFLb0gsVUFBTCxDQUFnQk0sSUFBSSxDQUFDMUgsc0JBQXJCO0lBQ0QsQ0FGRCxDQUVFLE9BQU9tRCxDQUFQLEVBQVU7TUFDVmxNLGVBQUEsQ0FBT3VFLGFBQVAsQ0FBc0Isd0RBQXVEMkgsQ0FBQyxDQUFDckksT0FBUSxFQUF2RjtJQUNEO0VBQ0Y7O0VBRUQsT0FBTyxJQUFQO0FBQ0QsQ0FwQkQ7O0FBK0JBMUMsT0FBTyxDQUFDd1Asd0JBQVIsR0FBbUMsU0FBU0Esd0JBQVQsQ0FBbUNGLElBQUksR0FBRyxFQUExQyxFQUE4QztFQUMvRSxNQUFNO0lBQUVDO0VBQUYsSUFBa0JELElBQXhCOztFQUNBelEsZUFBQSxDQUFPbUUsSUFBUCxDQUFhLGlEQUFiOztFQUNBbkUsZUFBQSxDQUFPbUUsSUFBUCxDQUFhLDRCQUEyQm1NLElBQUksQ0FBQ00sU0FBTCxDQUFlaFIsZUFBQSxDQUFFZ0csSUFBRixDQUFPckgsK0JBQVAsQ0FBZixDQUF3RCxFQUFoRzs7RUFDQSxJQUFJa1MsSUFBSSxDQUFDakssVUFBTCxJQUFtQmlLLElBQUksQ0FBQ2hLLFdBQTVCLEVBQXlDO0lBQ3ZDekcsZUFBQSxDQUFPbUUsSUFBUCxDQUFhLGdFQUErRHVNLFdBQVksSUFBNUUsR0FDVixpREFERjs7SUFFQSxPQUFPRCxJQUFQO0VBQ0Q7O0VBRUQsTUFBTTtJQUFDaFMsR0FBRDtJQUFNQztFQUFOLElBQWtCLEtBQUtnUixZQUFMLENBQWtCZ0IsV0FBbEIsQ0FBeEI7RUFDQUQsSUFBSSxDQUFDakssVUFBTCxHQUFrQi9ILEdBQWxCO0VBQ0FnUyxJQUFJLENBQUNoSyxXQUFMLEdBQW1CL0gsUUFBbkI7O0VBQ0FzQixlQUFBLENBQU9tRSxJQUFQLENBQWEsc0VBQXFFMUYsR0FBSSxJQUFHQyxRQUFTLEdBQXRGLEdBQ1QsUUFBT2dTLFdBQVksR0FEdEI7O0VBRUExUSxlQUFBLENBQU9tRSxJQUFQLENBQWEsd0ZBQUQsR0FDVCxtR0FEUyxHQUVULGdCQUZIOztFQUdBLE9BQU9zTSxJQUFQO0FBQ0QsQ0FuQkQ7O0FBNEJBdFAsT0FBTyxDQUFDc04sVUFBUixHQUFxQixTQUFTQSxVQUFULENBQXFCL08sR0FBckIsRUFBMEJVLElBQTFCLEVBQWdDO0VBQ25ELE1BQU15USxhQUFhLEdBQUcsQ0FBQ3pRLElBQUksQ0FBQzJELElBQU4sRUFBWXJFLEdBQVosYUFBWUEsR0FBWix1QkFBWUEsR0FBRyxDQUFFdUUsV0FBakIsQ0FBdEI7RUFDQSxPQUFPLENBQUMsQ0FBQzdELElBQUksQ0FBQ2tDLEdBQVAsSUFBY3VPLGFBQWEsQ0FBQ0MsSUFBZCxDQUFvQm5HLENBQUQsSUFBTzFMLGdCQUFnQixDQUFDOFIsSUFBakIsQ0FBc0JwRyxDQUF0QixDQUExQixDQUFyQjtBQUNELENBSEQ7O0FBS0F4SixPQUFPLENBQUM2UCxTQUFSLEdBQW9CQyxrQkFBcEI7QUFDQTlQLE9BQU8sQ0FBQ3VMLFFBQVIsR0FBbUJBLHNCQUFuQjtlQUdldkwsTyJ9
