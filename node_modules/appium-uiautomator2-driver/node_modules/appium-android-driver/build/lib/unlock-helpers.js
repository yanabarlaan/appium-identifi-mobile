"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.PIN_UNLOCK_KEY_EVENT = exports.PIN_UNLOCK = exports.PATTERN_UNLOCK = exports.PASSWORD_UNLOCK = exports.FINGERPRINT_UNLOCK = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

const PIN_UNLOCK = 'pin';
exports.PIN_UNLOCK = PIN_UNLOCK;
const PIN_UNLOCK_KEY_EVENT = 'pinWithKeyEvent';
exports.PIN_UNLOCK_KEY_EVENT = PIN_UNLOCK_KEY_EVENT;
const PASSWORD_UNLOCK = 'password';
exports.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
const PATTERN_UNLOCK = 'pattern';
exports.PATTERN_UNLOCK = PATTERN_UNLOCK;
const FINGERPRINT_UNLOCK = 'fingerprint';
exports.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
const UNLOCK_TYPES = [PIN_UNLOCK, PIN_UNLOCK_KEY_EVENT, PASSWORD_UNLOCK, PATTERN_UNLOCK, FINGERPRINT_UNLOCK];
const KEYCODE_NUMPAD_ENTER = 66;
const UNLOCK_WAIT_TIME = 100;
const INPUT_KEYS_WAIT_TIME = 100;
const NUMBER_ZERO_KEYCODE = 7;
const helpers = {};
exports.helpers = helpers;

helpers.validateUnlockCapabilities = function validateUnlockCapabilities(caps = {}) {
  const {
    unlockKey,
    unlockType
  } = caps;

  if (_lodash.default.isNil(unlockKey) || unlockKey === '') {
    throw new Error('A non-empty unlock key value must be provided');
  }

  if ([PIN_UNLOCK, PIN_UNLOCK_KEY_EVENT, FINGERPRINT_UNLOCK].includes(unlockType)) {
    if (!/^[0-9]+$/.test(_lodash.default.trim(unlockKey))) {
      throw new Error(`Unlock key value '${unlockKey}' must only consist of digits`);
    }
  } else if (unlockType === PATTERN_UNLOCK) {
    if (!/^[1-9]{2,9}$/.test(_lodash.default.trim(unlockKey))) {
      throw new Error(`Unlock key value '${unlockKey}' must only include from two to nine digits in range 1..9`);
    }

    if (/([1-9]).*?\1/.test(_lodash.default.trim(unlockKey))) {
      throw new Error(`Unlock key value '${unlockKey}' must define a valid pattern where repeats are not allowed`);
    }
  } else if (unlockType === PASSWORD_UNLOCK) {
    if (!/.{4,}/g.test(unlockKey)) {
      throw new Error(`The minimum allowed length of unlock key value '${unlockKey}' is 4 characters`);
    }
  } else {
    throw new Error(`Invalid unlock type '${unlockType}'. ` + `Only the following unlock types are supported: ${UNLOCK_TYPES}`);
  }

  return caps;
};

helpers.fastUnlock = async function fastUnlock(adb, opts = {}) {
  const {
    credential,
    credentialType
  } = opts;

  _logger.default.info(`Unlocking the device via ADB using ${credentialType} credential '${credential}'`);

  const wasLockEnabled = await adb.isLockEnabled();

  if (wasLockEnabled) {
    await adb.clearLockCredential(credential);
    await adb.cycleWakeUp();
  } else {
    _logger.default.info('No active lock has been detected. Proceeding to the keyguard dismissal');
  }

  try {
    await adb.dismissKeyguard();
  } finally {
    if (wasLockEnabled) {
      await adb.setLockCredential(credentialType, credential);
    }
  }
};

helpers.encodePassword = function encodePassword(key) {
  return `${key}`.replace(/\s/ig, '%s');
};

helpers.stringKeyToArr = function stringKeyToArr(key) {
  return `${key}`.trim().replace(/\s+/g, '').split(/\s*/);
};

helpers.fingerprintUnlock = async function fingerprintUnlock(adb, driver, capabilities) {
  if ((await adb.getApiLevel()) < 23) {
    throw new Error('Fingerprint unlock only works for Android 6+ emulators');
  }

  await adb.fingerprint(capabilities.unlockKey);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.pinUnlock = async function pinUnlock(adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using pin ${capabilities.unlockKey}`);

  await adb.dismissKeyguard();
  const keys = helpers.stringKeyToArr(capabilities.unlockKey);

  if ((await adb.getApiLevel()) >= 21) {
    const els = await driver.findElOrEls('id', 'com.android.systemui:id/digit_text', true);

    if (_lodash.default.isEmpty(els)) {
      return await helpers.pinUnlockWithKeyEvent(adb, driver, capabilities);
    }

    const pins = {};

    for (const el of els) {
      const text = await driver.getAttribute('text', _support.util.unwrapElement(el));
      pins[text] = el;
    }

    for (const pin of keys) {
      const el = pins[pin];
      await driver.click(_support.util.unwrapElement(el));
    }
  } else {
    for (const pin of keys) {
      const el = await driver.findElOrEls('id', `com.android.keyguard:id/key${pin}`, false);

      if (el === null) {
        return await helpers.pinUnlockWithKeyEvent(adb, driver, capabilities);
      }

      await driver.click(_support.util.unwrapElement(el));
    }
  }

  await waitForUnlock(adb);
};

async function waitForUnlock(adb) {
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);

  if (!(await adb.isScreenLocked())) {
    return;
  }

  await adb.keyevent(KEYCODE_NUMPAD_ENTER);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
}

helpers.pinUnlockWithKeyEvent = async function pinUnlockWithKeyEvent(adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using pin with keycode ${capabilities.unlockKey}`);

  await adb.dismissKeyguard();
  const keys = helpers.stringKeyToArr(capabilities.unlockKey);

  for (const pin of keys) {
    await adb.shell(['input', 'keyevent', parseInt(pin, 10) + NUMBER_ZERO_KEYCODE]);
  }

  await waitForUnlock(adb, driver);
};

helpers.passwordUnlock = async function passwordUnlock(adb, driver, capabilities) {
  const {
    unlockKey
  } = capabilities;

  _logger.default.info(`Trying to unlock device using password ${unlockKey}`);

  await adb.dismissKeyguard();
  const key = helpers.encodePassword(unlockKey);
  await adb.shell(['input', 'text', key]);
  await (0, _asyncbox.sleep)(INPUT_KEYS_WAIT_TIME);
  await adb.shell(['input', 'keyevent', KEYCODE_NUMPAD_ENTER]);
  await waitForUnlock(adb, driver);
};

helpers.getPatternKeyPosition = function getPatternKeyPosition(key, initPos, piece) {
  const cols = 3;
  const pins = 9;

  const xPos = (key, x, piece) => Math.round(x + (key % cols || cols) * piece - piece / 2);

  const yPos = (key, y, piece) => Math.round(y + (Math.ceil((key % pins || pins) / cols) * piece - piece / 2));

  return {
    x: xPos(key, initPos.x, piece),
    y: yPos(key, initPos.y, piece)
  };
};

helpers.getPatternActions = function getPatternActions(keys, initPos, piece) {
  const actions = [];
  let lastPos;

  for (let key of keys) {
    const keyPos = helpers.getPatternKeyPosition(key, initPos, piece);

    if (key === keys[0]) {
      actions.push({
        action: 'press',
        options: {
          element: null,
          x: keyPos.x,
          y: keyPos.y
        }
      });
      lastPos = keyPos;
      continue;
    }

    const moveTo = {
      x: 0,
      y: 0
    };
    const diffX = keyPos.x - lastPos.x;

    if (diffX > 0) {
      moveTo.x = piece;

      if (Math.abs(diffX) > piece) {
        moveTo.x += piece;
      }
    } else if (diffX < 0) {
      moveTo.x = -1 * piece;

      if (Math.abs(diffX) > piece) {
        moveTo.x -= piece;
      }
    }

    const diffY = keyPos.y - lastPos.y;

    if (diffY > 0) {
      moveTo.y = piece;

      if (Math.abs(diffY) > piece) {
        moveTo.y += piece;
      }
    } else if (diffY < 0) {
      moveTo.y = -1 * piece;

      if (Math.abs(diffY) > piece) {
        moveTo.y -= piece;
      }
    }

    actions.push({
      action: 'moveTo',
      options: {
        element: null,
        x: moveTo.x + lastPos.x,
        y: moveTo.y + lastPos.y
      }
    });
    lastPos = keyPos;
  }

  actions.push({
    action: 'release'
  });
  return actions;
};

helpers.patternUnlock = async function patternUnlock(adb, driver, capabilities) {
  const {
    unlockKey
  } = capabilities;

  _logger.default.info(`Trying to unlock device using pattern ${unlockKey}`);

  await adb.dismissKeyguard();
  const keys = helpers.stringKeyToArr(unlockKey);
  const apiLevel = await adb.getApiLevel();
  const el = await driver.findElOrEls('id', `com.android.${apiLevel >= 21 ? 'systemui' : 'keyguard'}:id/lockPatternView`, false);
  const initPos = await driver.getLocation(_support.util.unwrapElement(el));
  const size = await driver.getSize(_support.util.unwrapElement(el));
  const actions = helpers.getPatternActions(keys, initPos, size.width / 3);
  await driver.performTouch(actions);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.PIN_UNLOCK = PIN_UNLOCK;
helpers.PIN_UNLOCK_KEY_EVENT = PIN_UNLOCK_KEY_EVENT;
helpers.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
helpers.PATTERN_UNLOCK = PATTERN_UNLOCK;
helpers.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
