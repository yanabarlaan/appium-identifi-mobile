'use strict';

require("source-map-support/register");

const _ = require('lodash');

const {
  exec
} = require('child_process');

const B = require('bluebird');

const {
  quote
} = require('shell-quote');

const interpolate = function interpolate(s, opts) {
  return _.keys(opts).reduce(function replace(s, k) {
    return s.replace(new RegExp(`\\$\\{\\s*${k}\\s*\\}`, 'g'), opts[k]);
  }, s);
};

const translatePaths = function translatePaths(files, fileAliases) {
  if (!_.isArray(files)) {
    files = [files];
  }

  return _.flatten(files).map(function interpolateFileAliases(f) {
    return interpolate(f, fileAliases);
  });
};

const isVerbose = function isVerbose() {
  return process.env.VERBOSE === '1';
};

const getTestReporter = function getTestReporter(opts) {
  const isForceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;
  return isForceLogMode ? 'spec' : process.env.REPORTER ? process.env.REPORTER : opts.testReporter;
};

const pExec = function pExec(cmd, args = [], opts = {}) {
  return new B(function executeCmd(resolve, reject) {
    exec(`${quote([cmd])} ${quote(args)}`, opts, function cb(err, stdout, stderr) {
      if (err) {
        err.stdout = stdout;
        err.stderr = stderr;
        return reject(err);
      }

      resolve({
        stdout,
        stderr
      });
    });
  });
};

module.exports = {
  interpolate,
  translatePaths,
  isVerbose,
  getTestReporter,
  exec: pExec
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3V0aWxzLmpzIiwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJleGVjIiwiQiIsInF1b3RlIiwiaW50ZXJwb2xhdGUiLCJzIiwib3B0cyIsImtleXMiLCJyZWR1Y2UiLCJyZXBsYWNlIiwiayIsIlJlZ0V4cCIsInRyYW5zbGF0ZVBhdGhzIiwiZmlsZXMiLCJmaWxlQWxpYXNlcyIsImlzQXJyYXkiLCJmbGF0dGVuIiwibWFwIiwiaW50ZXJwb2xhdGVGaWxlQWxpYXNlcyIsImYiLCJpc1ZlcmJvc2UiLCJwcm9jZXNzIiwiZW52IiwiVkVSQk9TRSIsImdldFRlc3RSZXBvcnRlciIsImlzRm9yY2VMb2dNb2RlIiwicGFyc2VJbnQiLCJfRk9SQ0VfTE9HUyIsIlJFUE9SVEVSIiwidGVzdFJlcG9ydGVyIiwicEV4ZWMiLCJjbWQiLCJhcmdzIiwiZXhlY3V0ZUNtZCIsInJlc29sdmUiLCJyZWplY3QiLCJjYiIsImVyciIsInN0ZG91dCIsInN0ZGVyciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6Ii4uLy4uIiwic291cmNlcyI6WyJsaWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCB7IGV4ZWMgfSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbmNvbnN0IEIgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgeyBxdW90ZSB9ID0gcmVxdWlyZSgnc2hlbGwtcXVvdGUnKTtcblxuXG4vLyBzdHJpbmcgaW50ZXJwb2xhdGlvblxuY29uc3QgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZSAocywgb3B0cykge1xuICByZXR1cm4gXy5rZXlzKG9wdHMpLnJlZHVjZShmdW5jdGlvbiByZXBsYWNlIChzLCBrKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZShuZXcgUmVnRXhwKGBcXFxcJFxcXFx7XFxcXHMqJHtrfVxcXFxzKlxcXFx9YCwgJ2cnKSwgb3B0c1trXSk7XG4gIH0sIHMpO1xufTtcblxuY29uc3QgdHJhbnNsYXRlUGF0aHMgPSBmdW5jdGlvbiB0cmFuc2xhdGVQYXRocyAoZmlsZXMsIGZpbGVBbGlhc2VzKSB7XG4gIGlmICghXy5pc0FycmF5KGZpbGVzKSkge1xuICAgIGZpbGVzID0gW2ZpbGVzXTtcbiAgfVxuICByZXR1cm4gXy5mbGF0dGVuKGZpbGVzKS5tYXAoZnVuY3Rpb24gaW50ZXJwb2xhdGVGaWxlQWxpYXNlcyAoZikge1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZShmLCBmaWxlQWxpYXNlcyk7XG4gIH0pO1xufTtcblxuY29uc3QgaXNWZXJib3NlID0gZnVuY3Rpb24gaXNWZXJib3NlICgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52LlZFUkJPU0UgPT09ICcxJztcbn07XG5cbmNvbnN0IGdldFRlc3RSZXBvcnRlciA9IGZ1bmN0aW9uIGdldFRlc3RSZXBvcnRlciAob3B0cykge1xuICBjb25zdCBpc0ZvcmNlTG9nTW9kZSA9IHBhcnNlSW50KHByb2Nlc3MuZW52Ll9GT1JDRV9MT0dTLCAxMCkgPT09IDE7XG4gIHJldHVybiBpc0ZvcmNlTG9nTW9kZSA/ICdzcGVjJyA6IChwcm9jZXNzLmVudi5SRVBPUlRFUiA/IHByb2Nlc3MuZW52LlJFUE9SVEVSIDogb3B0cy50ZXN0UmVwb3J0ZXIpO1xufTtcblxuY29uc3QgcEV4ZWMgPSBmdW5jdGlvbiBwRXhlYyAoY21kLCBhcmdzID0gW10sIG9wdHMgPSB7fSkge1xuICByZXR1cm4gbmV3IEIoZnVuY3Rpb24gZXhlY3V0ZUNtZCAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZXhlYyhgJHtxdW90ZShbY21kXSl9ICR7cXVvdGUoYXJncyl9YCwgb3B0cywgZnVuY3Rpb24gY2IgKGVyciwgc3Rkb3V0LCBzdGRlcnIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3NcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZXJyLnN0ZG91dCA9IHN0ZG91dDtcbiAgICAgICAgZXJyLnN0ZGVyciA9IHN0ZGVycjtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIHN0ZG91dCxcbiAgICAgICAgc3RkZXJyLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGludGVycG9sYXRlLFxuICB0cmFuc2xhdGVQYXRocyxcbiAgaXNWZXJib3NlLFxuICBnZXRUZXN0UmVwb3J0ZXIsXG4gIGV4ZWM6IHBFeGVjLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU07RUFBRUM7QUFBRixJQUFXRCxPQUFPLENBQUMsZUFBRCxDQUF4Qjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdGLE9BQU8sQ0FBQyxVQUFELENBQWpCOztBQUNBLE1BQU07RUFBRUc7QUFBRixJQUFZSCxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFJQSxNQUFNSSxXQUFXLEdBQUcsU0FBU0EsV0FBVCxDQUFzQkMsQ0FBdEIsRUFBeUJDLElBQXpCLEVBQStCO0VBQ2pELE9BQU9QLENBQUMsQ0FBQ1EsSUFBRixDQUFPRCxJQUFQLEVBQWFFLE1BQWIsQ0FBb0IsU0FBU0MsT0FBVCxDQUFrQkosQ0FBbEIsRUFBcUJLLENBQXJCLEVBQXdCO0lBQ2pELE9BQU9MLENBQUMsQ0FBQ0ksT0FBRixDQUFVLElBQUlFLE1BQUosQ0FBWSxhQUFZRCxDQUFFLFNBQTFCLEVBQW9DLEdBQXBDLENBQVYsRUFBb0RKLElBQUksQ0FBQ0ksQ0FBRCxDQUF4RCxDQUFQO0VBQ0QsQ0FGTSxFQUVKTCxDQUZJLENBQVA7QUFHRCxDQUpEOztBQU1BLE1BQU1PLGNBQWMsR0FBRyxTQUFTQSxjQUFULENBQXlCQyxLQUF6QixFQUFnQ0MsV0FBaEMsRUFBNkM7RUFDbEUsSUFBSSxDQUFDZixDQUFDLENBQUNnQixPQUFGLENBQVVGLEtBQVYsQ0FBTCxFQUF1QjtJQUNyQkEsS0FBSyxHQUFHLENBQUNBLEtBQUQsQ0FBUjtFQUNEOztFQUNELE9BQU9kLENBQUMsQ0FBQ2lCLE9BQUYsQ0FBVUgsS0FBVixFQUFpQkksR0FBakIsQ0FBcUIsU0FBU0Msc0JBQVQsQ0FBaUNDLENBQWpDLEVBQW9DO0lBQzlELE9BQU9mLFdBQVcsQ0FBQ2UsQ0FBRCxFQUFJTCxXQUFKLENBQWxCO0VBQ0QsQ0FGTSxDQUFQO0FBR0QsQ0FQRDs7QUFTQSxNQUFNTSxTQUFTLEdBQUcsU0FBU0EsU0FBVCxHQUFzQjtFQUN0QyxPQUFPQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsT0FBWixLQUF3QixHQUEvQjtBQUNELENBRkQ7O0FBSUEsTUFBTUMsZUFBZSxHQUFHLFNBQVNBLGVBQVQsQ0FBMEJsQixJQUExQixFQUFnQztFQUN0RCxNQUFNbUIsY0FBYyxHQUFHQyxRQUFRLENBQUNMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxXQUFiLEVBQTBCLEVBQTFCLENBQVIsS0FBMEMsQ0FBakU7RUFDQSxPQUFPRixjQUFjLEdBQUcsTUFBSCxHQUFhSixPQUFPLENBQUNDLEdBQVIsQ0FBWU0sUUFBWixHQUF1QlAsT0FBTyxDQUFDQyxHQUFSLENBQVlNLFFBQW5DLEdBQThDdEIsSUFBSSxDQUFDdUIsWUFBckY7QUFDRCxDQUhEOztBQUtBLE1BQU1DLEtBQUssR0FBRyxTQUFTQSxLQUFULENBQWdCQyxHQUFoQixFQUFxQkMsSUFBSSxHQUFHLEVBQTVCLEVBQWdDMUIsSUFBSSxHQUFHLEVBQXZDLEVBQTJDO0VBQ3ZELE9BQU8sSUFBSUosQ0FBSixDQUFNLFNBQVMrQixVQUFULENBQXFCQyxPQUFyQixFQUE4QkMsTUFBOUIsRUFBc0M7SUFDakRsQyxJQUFJLENBQUUsR0FBRUUsS0FBSyxDQUFDLENBQUM0QixHQUFELENBQUQsQ0FBUSxJQUFHNUIsS0FBSyxDQUFDNkIsSUFBRCxDQUFPLEVBQWhDLEVBQW1DMUIsSUFBbkMsRUFBeUMsU0FBUzhCLEVBQVQsQ0FBYUMsR0FBYixFQUFrQkMsTUFBbEIsRUFBMEJDLE1BQTFCLEVBQWtDO01BQzdFLElBQUlGLEdBQUosRUFBUztRQUNQQSxHQUFHLENBQUNDLE1BQUosR0FBYUEsTUFBYjtRQUNBRCxHQUFHLENBQUNFLE1BQUosR0FBYUEsTUFBYjtRQUNBLE9BQU9KLE1BQU0sQ0FBQ0UsR0FBRCxDQUFiO01BQ0Q7O01BQ0RILE9BQU8sQ0FBQztRQUNOSSxNQURNO1FBRU5DO01BRk0sQ0FBRCxDQUFQO0lBSUQsQ0FWRyxDQUFKO0VBV0QsQ0FaTSxDQUFQO0FBYUQsQ0FkRDs7QUFnQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtFQUNmckMsV0FEZTtFQUVmUSxjQUZlO0VBR2ZRLFNBSGU7RUFJZkksZUFKZTtFQUtmdkIsSUFBSSxFQUFFNkI7QUFMUyxDQUFqQiJ9
