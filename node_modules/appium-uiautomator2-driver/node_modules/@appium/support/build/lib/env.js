"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MANIFEST_RELATIVE_PATH = exports.MANIFEST_BASENAME = exports.DEFAULT_APPIUM_HOME = void 0;
exports.hasAppiumDependency = hasAppiumDependency;
exports.resolveManifestPath = exports.resolveAppiumHome = exports.readPackageInDir = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = require("os");

var _path = _interopRequireDefault(require("path"));

var _pkgDir = _interopRequireDefault(require("pkg-dir"));

var _readPkg = _interopRequireDefault(require("read-pkg"));

var _npm = require("./npm");

const DEFAULT_APPIUM_HOME = _path.default.resolve((0, _os.homedir)(), '.appium');

exports.DEFAULT_APPIUM_HOME = DEFAULT_APPIUM_HOME;
const MANIFEST_BASENAME = 'extensions.yaml';
exports.MANIFEST_BASENAME = MANIFEST_BASENAME;

const MANIFEST_RELATIVE_PATH = _path.default.join('node_modules', '.cache', 'appium', MANIFEST_BASENAME);

exports.MANIFEST_RELATIVE_PATH = MANIFEST_RELATIVE_PATH;

async function hasAppiumDependency(cwd) {
  let listResult;
  let resolved;
  let version;

  try {
    var _listResult$dependenc, _listResult, _listResult$dependenc2, _listResult$dependenc3, _listResult$dependenc4, _listResult2, _listResult2$dependen, _listResult2$dependen2;

    listResult = await _npm.npm.list(cwd, 'appium');
    resolved = (_listResult$dependenc = (_listResult = listResult) === null || _listResult === void 0 ? void 0 : (_listResult$dependenc2 = _listResult.dependencies) === null || _listResult$dependenc2 === void 0 ? void 0 : (_listResult$dependenc3 = _listResult$dependenc2.appium) === null || _listResult$dependenc3 === void 0 ? void 0 : _listResult$dependenc3.resolved) !== null && _listResult$dependenc !== void 0 ? _listResult$dependenc : '';
    version = (_listResult$dependenc4 = (_listResult2 = listResult) === null || _listResult2 === void 0 ? void 0 : (_listResult2$dependen = _listResult2.dependencies) === null || _listResult2$dependen === void 0 ? void 0 : (_listResult2$dependen2 = _listResult2$dependen.appium) === null || _listResult2$dependen2 === void 0 ? void 0 : _listResult2$dependen2.version) !== null && _listResult$dependenc4 !== void 0 ? _listResult$dependenc4 : '';
  } catch {
    try {
      var _ref, _pkg$dependencies$app, _pkg$dependencies, _pkg$devDependencies, _pkg$optionalDependen;

      const pkg = await readPackageInDir(cwd);
      version = resolved = (_ref = (_pkg$dependencies$app = pkg === null || pkg === void 0 ? void 0 : (_pkg$dependencies = pkg.dependencies) === null || _pkg$dependencies === void 0 ? void 0 : _pkg$dependencies.appium) !== null && _pkg$dependencies$app !== void 0 ? _pkg$dependencies$app : pkg === null || pkg === void 0 ? void 0 : (_pkg$devDependencies = pkg.devDependencies) === null || _pkg$devDependencies === void 0 ? void 0 : _pkg$devDependencies.appium) !== null && _ref !== void 0 ? _ref : pkg === null || pkg === void 0 ? void 0 : (_pkg$optionalDependen = pkg.optionalDependencies) === null || _pkg$optionalDependen === void 0 ? void 0 : _pkg$optionalDependen.appium;
    } catch {}
  }

  return Boolean(version && (!resolved || resolved && !resolved.startsWith('file:')) && !version.startsWith('1') && !version.startsWith('0'));
}

const readPackageInDir = _lodash.default.memoize(async function _readPackageInDir(cwd) {
  return await (0, _readPkg.default)({
    cwd,
    normalize: true
  });
});

exports.readPackageInDir = readPackageInDir;

const resolveAppiumHome = _lodash.default.memoize(async function _resolveAppiumHome(cwd = process.cwd()) {
  if (process.env.APPIUM_HOME) {
    return process.env.APPIUM_HOME;
  }

  if (!_path.default.isAbsolute(cwd)) {
    throw new TypeError('`cwd` parameter must be an absolute path');
  }

  let currentPkgDir;

  try {
    currentPkgDir = await (0, _pkgDir.default)(cwd);

    if (!currentPkgDir) {
      return DEFAULT_APPIUM_HOME;
    }
  } catch {
    return DEFAULT_APPIUM_HOME;
  }

  return (await hasAppiumDependency(currentPkgDir)) ? currentPkgDir : DEFAULT_APPIUM_HOME;
});

exports.resolveAppiumHome = resolveAppiumHome;

const resolveManifestPath = _lodash.default.memoize(async function _resolveManifestPath(appiumHome) {
  var _appiumHome;

  appiumHome = (_appiumHome = appiumHome) !== null && _appiumHome !== void 0 ? _appiumHome : await resolveAppiumHome();
  return _path.default.join(appiumHome, MANIFEST_RELATIVE_PATH);
});

exports.resolveManifestPath = resolveManifestPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,