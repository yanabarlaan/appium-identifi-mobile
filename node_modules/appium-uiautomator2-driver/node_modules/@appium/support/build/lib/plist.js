"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBinaryPlist = createBinaryPlist;
exports.createPlist = createPlist;
exports.parseBinaryPlist = parseBinaryPlist;
exports.parsePlist = parsePlist;
exports.parsePlistFile = parsePlistFile;
exports.updatePlistFile = updatePlistFile;

require("source-map-support/register");

var _plist = _interopRequireDefault(require("plist"));

var _bplistCreator = _interopRequireDefault(require("bplist-creator"));

var _bplistParser = _interopRequireDefault(require("bplist-parser"));

var _fs = _interopRequireDefault(require("./fs"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const BPLIST_IDENTIFIER = {
  BUFFER: Buffer.from('bplist00'),
  TEXT: 'bplist00'
};
const PLIST_IDENTIFIER = {
  BUFFER: Buffer.from('<'),
  TEXT: '<'
};

async function parseXmlPlistFile(plistFilename) {
  let xmlContent = await _fs.default.readFile(plistFilename, 'utf8');
  return _plist.default.parse(xmlContent);
}

async function parsePlistFile(plist, mustExist = true, quiet = true) {
  if (!(await _fs.default.exists(plist))) {
    if (mustExist) {
      _logger.default.errorAndThrow(`Plist file doesn't exist: '${plist}'`);
    } else {
      _logger.default.debug(`Plist file '${plist}' does not exist. Returning an empty plist.`);

      return {};
    }
  }

  let obj = {};
  let type = 'binary';

  try {
    obj = await _bplistParser.default.parseFile(plist);

    if (obj.length) {
      obj = obj[0];
    } else {
      throw new Error(`Binary file '${plist}'' appears to be empty`);
    }
  } catch (ign) {
    try {
      obj = await parseXmlPlistFile(plist);
      type = 'xml';
    } catch (err) {
      _logger.default.errorAndThrow(`Could not parse plist file '${plist}' as XML: ${err.message}`);
    }
  }

  if (!quiet) {
    _logger.default.debug(`Parsed plist file '${plist}' as ${type}`);
  }

  return obj;
}

async function updatePlistFile(plist, updatedFields, binary = true, mustExist = true, quiet = true) {
  let obj;

  try {
    obj = await parsePlistFile(plist, mustExist);
  } catch (err) {
    _logger.default.errorAndThrow(`Could not update plist: ${err.message}`);
  }

  _lodash.default.extend(obj, updatedFields);

  let newPlist = binary ? (0, _bplistCreator.default)(obj) : _plist.default.build(obj);

  try {
    await _fs.default.writeFile(plist, newPlist);
  } catch (err) {
    _logger.default.errorAndThrow(`Could not save plist: ${err.message}`);
  }

  if (!quiet) {
    _logger.default.debug(`Wrote plist file '${plist}'`);
  }
}

function createBinaryPlist(data) {
  return (0, _bplistCreator.default)(data);
}

function parseBinaryPlist(data) {
  return _bplistParser.default.parseBuffer(data);
}

function getXmlPlist(data) {
  if (_lodash.default.isString(data) && data.startsWith(PLIST_IDENTIFIER.TEXT)) {
    return data;
  }

  if (_lodash.default.isBuffer(data) && PLIST_IDENTIFIER.BUFFER.compare(data, 0, PLIST_IDENTIFIER.BUFFER.length) === 0) {
    return data.toString();
  }

  return null;
}

function getBinaryPlist(data) {
  if (_lodash.default.isString(data) && data.startsWith(BPLIST_IDENTIFIER.TEXT)) {
    return Buffer.from(data);
  }

  if (_lodash.default.isBuffer(data) && BPLIST_IDENTIFIER.BUFFER.compare(data, 0, BPLIST_IDENTIFIER.BUFFER.length) === 0) {
    return data;
  }

  return null;
}

function createPlist(object, binary = false) {
  if (binary) {
    return createBinaryPlist(object);
  } else {
    return _plist.default.build(object);
  }
}

function parsePlist(data) {
  let textPlist = getXmlPlist(data);

  if (textPlist) {
    return _plist.default.parse(textPlist);
  }

  let binaryPlist = getBinaryPlist(data);

  if (binaryPlist) {
    return parseBinaryPlist(binaryPlist)[0];
  }

  throw new Error(`Unknown type of plist, data: ${data.toString()}`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,