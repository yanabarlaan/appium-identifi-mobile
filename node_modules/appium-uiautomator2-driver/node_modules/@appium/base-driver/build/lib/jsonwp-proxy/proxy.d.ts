/// <reference types="node" />
export default JWProxy;
export class JWProxy {
    constructor(opts?: {});
    scheme: any;
    _activeRequests: any[];
    _downstreamProtocol: any;
    httpAgent: http.Agent;
    httpsAgent: https.Agent;
    protocolConverter: ProtocolConverter;
    _log: any;
    get log(): any;
    /**
     * Performs requests to the downstream server
     *
     * @private - Do not call this method directly,
     * it uses client-specific arguments and responses!
     *
     * @param {AxiosRequestConfig} requestConfig
     * @returns {AxiosResponse}
     */
    private request;
    getActiveRequestsCount(): number;
    cancelActiveRequests(): void;
    endpointRequiresSessionId(endpoint: any): boolean;
    set downstreamProtocol(arg: any);
    get downstreamProtocol(): any;
    getUrlForProxy(url: any): string;
    proxy(url: any, method: any, body?: null): Promise<any[]>;
    sessionId: any;
    getProtocolFromResBody(resObj: any): string | undefined;
    requestToCommandName(url: any, method: any): keyof import("@appium/types").ExternalDriver | undefined;
    proxyCommand(url: any, method: any, body?: null): Promise<any>;
    command(url: any, method: any, body?: null): Promise<any>;
    getSessionIdFromUrl(url: any): any;
    proxyReqRes(req: any, res: any): Promise<void>;
}
import http from "http";
import https from "https";
import ProtocolConverter from "./protocol-converter";
//# sourceMappingURL=proxy.d.ts.map