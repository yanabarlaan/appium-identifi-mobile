"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_ADB_PORT = exports.ADB = void 0;
Object.defineProperty(exports, "getAndroidBinaryPath", {
  enumerable: true,
  get: function () {
    return _index.getAndroidBinaryPath;
  }
});
Object.defineProperty(exports, "getSdkRootFromEnv", {
  enumerable: true,
  get: function () {
    return _helpers.getSdkRootFromEnv;
  }
});

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _index = _interopRequireWildcard(require("./tools/index.js"));

var _helpers = require("./helpers");

var _logger = _interopRequireDefault(require("./logger.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;
const DEFAULT_OPTS = {
  sdkRoot: (0, _helpers.getSdkRootFromEnv)() || null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  adbPort: DEFAULT_ADB_PORT,
  adbHost: null,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10,
  buildToolsVersion: null,
  allowOfflineDevices: false,
  allowDelayAdb: true
};

class ADB {
  constructor(opts = {}) {
    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
      this.adbHost = opts.remoteAdbHost;
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push('-P', this.adbPort);
  }

  clone(opts = {}) {
    const originalOptions = _lodash.default.cloneDeep(_lodash.default.pick(this, Object.keys(DEFAULT_OPTS)));

    const cloneOptions = _lodash.default.defaultsDeep(opts, originalOptions);

    const defaultArgs = cloneOptions.executable.defaultArgs;

    if (cloneOptions.remoteAdbHost && defaultArgs.includes('-H')) {
      defaultArgs.splice(defaultArgs.indexOf('-H'), 2);
    }

    if (defaultArgs.includes('-P')) {
      defaultArgs.splice(defaultArgs.indexOf('-P'), 2);
    }

    return new ADB(cloneOptions);
  }

}

exports.ADB = ADB;

ADB.createADB = async function createADB(opts) {
  const adb = new ADB(opts);
  adb.sdkRoot = await (0, _helpers.requireSdkRoot)(adb.sdkRoot);
  await adb.getAdbWithCorrectAdbPath();

  try {
    await adb.adbExec(['start-server']);
  } catch (e) {
    _logger.default.warn(e.stderr || e.message);
  }

  return adb;
};

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}

var _default = ADB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2FkYi5qcyIsIm5hbWVzIjpbIkRFRkFVTFRfQURCX1BPUlQiLCJERUZBVUxUX09QVFMiLCJzZGtSb290IiwiZ2V0U2RrUm9vdEZyb21FbnYiLCJ1ZGlkIiwiYXBwRGV2aWNlUmVhZHlUaW1lb3V0IiwidXNlS2V5c3RvcmUiLCJrZXlzdG9yZVBhdGgiLCJrZXlzdG9yZVBhc3N3b3JkIiwia2V5QWxpYXMiLCJrZXlQYXNzd29yZCIsImV4ZWN1dGFibGUiLCJwYXRoIiwiZGVmYXVsdEFyZ3MiLCJ0bXBEaXIiLCJvcyIsInRtcGRpciIsImN1ckRldmljZUlkIiwiZW11bGF0b3JQb3J0IiwibG9nY2F0IiwiYmluYXJpZXMiLCJpbnN0cnVtZW50UHJvYyIsInN1cHByZXNzS2lsbFNlcnZlciIsImphcnMiLCJhZGJQb3J0IiwiYWRiSG9zdCIsImFkYkV4ZWNUaW1lb3V0IiwiREVGQVVMVF9BREJfRVhFQ19USU1FT1VUIiwicmVtb3RlQXBwc0NhY2hlTGltaXQiLCJidWlsZFRvb2xzVmVyc2lvbiIsImFsbG93T2ZmbGluZURldmljZXMiLCJhbGxvd0RlbGF5QWRiIiwiQURCIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwiXyIsImRlZmF1bHRzRGVlcCIsImNsb25lRGVlcCIsInJlbW90ZUFkYkhvc3QiLCJwdXNoIiwicmVtb3RlQWRiUG9ydCIsImNsb25lIiwib3JpZ2luYWxPcHRpb25zIiwicGljayIsImtleXMiLCJjbG9uZU9wdGlvbnMiLCJpbmNsdWRlcyIsInNwbGljZSIsImluZGV4T2YiLCJjcmVhdGVBREIiLCJhZGIiLCJyZXF1aXJlU2RrUm9vdCIsImdldEFkYldpdGhDb3JyZWN0QWRiUGF0aCIsImFkYkV4ZWMiLCJlIiwibG9nIiwid2FybiIsInN0ZGVyciIsIm1lc3NhZ2UiLCJmbk5hbWUiLCJmbiIsInRvUGFpcnMiLCJtZXRob2RzIiwicHJvdG90eXBlIl0sInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXMiOlsibGliL2FkYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBtZXRob2RzLCB7IGdldEFuZHJvaWRCaW5hcnlQYXRoIH0gZnJvbSAnLi90b29scy9pbmRleC5qcyc7XG5pbXBvcnQge1xuICBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsIHJlcXVpcmVTZGtSb290LCBnZXRTZGtSb290RnJvbUVudlxufSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlci5qcyc7XG5cbmNvbnN0IERFRkFVTFRfQURCX1BPUlQgPSA1MDM3O1xuY29uc3QgREVGQVVMVF9PUFRTID0ge1xuICBzZGtSb290OiBnZXRTZGtSb290RnJvbUVudigpIHx8IG51bGwsXG4gIHVkaWQ6IG51bGwsXG4gIGFwcERldmljZVJlYWR5VGltZW91dDogbnVsbCxcbiAgdXNlS2V5c3RvcmU6IG51bGwsXG4gIGtleXN0b3JlUGF0aDogbnVsbCxcbiAga2V5c3RvcmVQYXNzd29yZDogbnVsbCxcbiAga2V5QWxpYXM6IG51bGwsXG4gIGtleVBhc3N3b3JkOiBudWxsLFxuICBleGVjdXRhYmxlOiB7cGF0aDogJ2FkYicsIGRlZmF1bHRBcmdzOiBbXX0sXG4gIHRtcERpcjogb3MudG1wZGlyKCksXG4gIGN1ckRldmljZUlkOiBudWxsLFxuICBlbXVsYXRvclBvcnQ6IG51bGwsXG4gIGxvZ2NhdDogbnVsbCxcbiAgYmluYXJpZXM6IHt9LFxuICBpbnN0cnVtZW50UHJvYzogbnVsbCxcbiAgc3VwcHJlc3NLaWxsU2VydmVyOiBudWxsLFxuICBqYXJzOiB7fSxcbiAgYWRiUG9ydDogREVGQVVMVF9BREJfUE9SVCxcbiAgYWRiSG9zdDogbnVsbCxcbiAgYWRiRXhlY1RpbWVvdXQ6IERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCxcbiAgcmVtb3RlQXBwc0NhY2hlTGltaXQ6IDEwLFxuICBidWlsZFRvb2xzVmVyc2lvbjogbnVsbCxcbiAgYWxsb3dPZmZsaW5lRGV2aWNlczogZmFsc2UsXG4gIGFsbG93RGVsYXlBZGI6IHRydWUsXG59O1xuXG5jbGFzcyBBREIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcCh0aGlzLCBfLmNsb25lRGVlcChERUZBVUxUX09QVFMpKTtcblxuICAgIGlmIChvcHRzLnJlbW90ZUFkYkhvc3QpIHtcbiAgICAgIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5wdXNoKCctSCcsIG9wdHMucmVtb3RlQWRiSG9zdCk7XG4gICAgICB0aGlzLmFkYkhvc3QgPSBvcHRzLnJlbW90ZUFkYkhvc3Q7XG4gICAgfVxuICAgIC8vIFRPRE8gZmlndXJlIG91dCB3aHkgd2UgaGF2ZSB0aGlzIG9wdGlvbiBhcyBpdCBkb2VzIG5vdCBhcHBlYXIgdG8gYmVcbiAgICAvLyB1c2VkIGFueXdoZXJlLiBQcm9iYWJseSBkZXByZWNhdGUgaW4gZmF2b3Igb2Ygc2ltcGxlIG9wdHMuYWRiUG9ydFxuICAgIGlmIChvcHRzLnJlbW90ZUFkYlBvcnQpIHtcbiAgICAgIHRoaXMuYWRiUG9ydCA9IG9wdHMucmVtb3RlQWRiUG9ydDtcbiAgICB9XG4gICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy1QJywgdGhpcy5hZGJQb3J0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYEFEQmAgdGhhdCBpbmhlcml0cyBjb25maWd1cmF0aW9uIGZyb20gdGhpcyBgQURCYCBpbnN0YW5jZS5cbiAgICogVGhpcyBhdm9pZHMgdGhlIG5lZWQgdG8gY2FsbCBgQURCLmNyZWF0ZUFEQigpYCBtdWx0aXBsZSB0aW1lcy5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgbWFwcGluZyB0byBwYXNzIHRvIHRoZSBgQURCYCBjb25zdHJ1Y3Rvci5cbiAgICogQHJldHVybnMge0FEQn0gVGhlIHJlc3VsdGluZyBjbGFzcyBpbnN0YW5jZS5cbiAgICovXG4gIGNsb25lIChvcHRzID0ge30pIHtcbiAgICBjb25zdCBvcmlnaW5hbE9wdGlvbnMgPSBfLmNsb25lRGVlcChfLnBpY2sodGhpcywgT2JqZWN0LmtleXMoREVGQVVMVF9PUFRTKSkpO1xuICAgIGNvbnN0IGNsb25lT3B0aW9ucyA9IF8uZGVmYXVsdHNEZWVwKG9wdHMsIG9yaWdpbmFsT3B0aW9ucyk7XG5cbiAgICAvLyBSZXNldCBkZWZhdWx0IGFyZ3VtZW50cyBjcmVhdGVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAvLyBXaXRob3V0IHRoaXMgY29kZSwgLUggYW5kIC1QIGNhbiBiZSBpbmplY3RlZCBpbnRvIGRlZmF1bHRBcmdzIG11bHRpcGxlIHRpbWVzLlxuICAgIGNvbnN0IGRlZmF1bHRBcmdzID0gY2xvbmVPcHRpb25zLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3M7XG4gICAgaWYgKGNsb25lT3B0aW9ucy5yZW1vdGVBZGJIb3N0ICYmIGRlZmF1bHRBcmdzLmluY2x1ZGVzKCctSCcpKSB7XG4gICAgICBkZWZhdWx0QXJncy5zcGxpY2UoZGVmYXVsdEFyZ3MuaW5kZXhPZignLUgnKSwgMik7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0QXJncy5pbmNsdWRlcygnLVAnKSkge1xuICAgICAgZGVmYXVsdEFyZ3Muc3BsaWNlKGRlZmF1bHRBcmdzLmluZGV4T2YoJy1QJyksIDIpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQURCKGNsb25lT3B0aW9ucyk7XG4gIH1cbn1cblxuQURCLmNyZWF0ZUFEQiA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFEQiAob3B0cykge1xuICBjb25zdCBhZGIgPSBuZXcgQURCKG9wdHMpO1xuICBhZGIuc2RrUm9vdCA9IGF3YWl0IHJlcXVpcmVTZGtSb290KGFkYi5zZGtSb290KTtcbiAgYXdhaXQgYWRiLmdldEFkYldpdGhDb3JyZWN0QWRiUGF0aCgpO1xuICB0cnkge1xuICAgIGF3YWl0IGFkYi5hZGJFeGVjKFsnc3RhcnQtc2VydmVyJ10pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLndhcm4oZS5zdGRlcnIgfHwgZS5tZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gYWRiO1xufTtcblxuLy8gYWRkIGFsbCB0aGUgbWV0aG9kcyB0byB0aGUgQURCIHByb3RvdHlwZVxuZm9yIChjb25zdCBbZm5OYW1lLCBmbl0gb2YgXy50b1BhaXJzKG1ldGhvZHMpKSB7XG4gIEFEQi5wcm90b3R5cGVbZm5OYW1lXSA9IGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBREI7XG5leHBvcnQgeyBBREIsIERFRkFVTFRfQURCX1BPUlQsIGdldEFuZHJvaWRCaW5hcnlQYXRoLCBnZXRTZGtSb290RnJvbUVudiB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUdBOzs7Ozs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRyxJQUF6Qjs7QUFDQSxNQUFNQyxZQUFZLEdBQUc7RUFDbkJDLE9BQU8sRUFBRSxJQUFBQywwQkFBQSxPQUF1QixJQURiO0VBRW5CQyxJQUFJLEVBQUUsSUFGYTtFQUduQkMscUJBQXFCLEVBQUUsSUFISjtFQUluQkMsV0FBVyxFQUFFLElBSk07RUFLbkJDLFlBQVksRUFBRSxJQUxLO0VBTW5CQyxnQkFBZ0IsRUFBRSxJQU5DO0VBT25CQyxRQUFRLEVBQUUsSUFQUztFQVFuQkMsV0FBVyxFQUFFLElBUk07RUFTbkJDLFVBQVUsRUFBRTtJQUFDQyxJQUFJLEVBQUUsS0FBUDtJQUFjQyxXQUFXLEVBQUU7RUFBM0IsQ0FUTztFQVVuQkMsTUFBTSxFQUFFQyxXQUFBLENBQUdDLE1BQUgsRUFWVztFQVduQkMsV0FBVyxFQUFFLElBWE07RUFZbkJDLFlBQVksRUFBRSxJQVpLO0VBYW5CQyxNQUFNLEVBQUUsSUFiVztFQWNuQkMsUUFBUSxFQUFFLEVBZFM7RUFlbkJDLGNBQWMsRUFBRSxJQWZHO0VBZ0JuQkMsa0JBQWtCLEVBQUUsSUFoQkQ7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
