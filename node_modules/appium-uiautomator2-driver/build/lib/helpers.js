"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _support = require("@appium/support");

let helpers = {};

helpers.ensureInternetPermissionForApp = async function (adb, app) {
  let has = await adb.hasInternetPermissionFromManifest(app);

  if (has) {
    return;
  }

  let msg = 'Your apk does not have INTERNET permissions. Uiautomator2 needs ' + 'the internet permission to proceed. Please check if you have ' + '<uses-permission android:name="android.**permission.INTERNET"/>' + 'in your AndroidManifest.xml';
  throw new Error(msg);
};

helpers.isWriteable = async function isWriteable(filePath) {
  try {
    await _support.fs.access(filePath, _support.fs.W_OK);

    if (_support.system.isWindows()) {
      await _support.fs.close(await _support.fs.open(filePath, 'r+'));
    }

    return true;
  } catch (ign) {
    return false;
  }
};

helpers.signApp = async function (adb, appPath) {
  if (!(await this.isWriteable(appPath))) {
    throw new Error(`The application at '${appPath}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(appPath)}' ` + `for the Appium process, so it could sign the application`);
  }

  await adb.sign(appPath);
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2hlbHBlcnMuanMiLCJuYW1lcyI6WyJoZWxwZXJzIiwiZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwIiwiYWRiIiwiYXBwIiwiaGFzIiwiaGFzSW50ZXJuZXRQZXJtaXNzaW9uRnJvbU1hbmlmZXN0IiwibXNnIiwiRXJyb3IiLCJpc1dyaXRlYWJsZSIsImZpbGVQYXRoIiwiZnMiLCJhY2Nlc3MiLCJXX09LIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwiY2xvc2UiLCJvcGVuIiwiaWduIiwic2lnbkFwcCIsImFwcFBhdGgiLCJwYXRoIiwiZGlybmFtZSIsInNpZ24iXSwic291cmNlUm9vdCI6Ii4uLy4uIiwic291cmNlcyI6WyJsaWIvaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCBzeXN0ZW0gfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmxldCBoZWxwZXJzID0ge307XG5cbmhlbHBlcnMuZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgYXBwKSB7XG4gIGxldCBoYXMgPSBhd2FpdCBhZGIuaGFzSW50ZXJuZXRQZXJtaXNzaW9uRnJvbU1hbmlmZXN0KGFwcCk7XG4gIGlmIChoYXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG1zZyA9ICdZb3VyIGFwayBkb2VzIG5vdCBoYXZlIElOVEVSTkVUIHBlcm1pc3Npb25zLiBVaWF1dG9tYXRvcjIgbmVlZHMgJyArXG4gICAgICAgICAgICAndGhlIGludGVybmV0IHBlcm1pc3Npb24gdG8gcHJvY2VlZC4gUGxlYXNlIGNoZWNrIGlmIHlvdSBoYXZlICcgK1xuICAgICAgICAgICAgJzx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPVwiYW5kcm9pZC4qKnBlcm1pc3Npb24uSU5URVJORVRcIi8+JyArXG4gICAgICAgICAgICAnaW4geW91ciBBbmRyb2lkTWFuaWZlc3QueG1sJztcbiAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG59O1xuXG5oZWxwZXJzLmlzV3JpdGVhYmxlID0gYXN5bmMgZnVuY3Rpb24gaXNXcml0ZWFibGUgKGZpbGVQYXRoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMuYWNjZXNzKGZpbGVQYXRoLCBmcy5XX09LKTtcbiAgICBpZiAoc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgICAvLyBPbiBvcGVyYXRpbmcgc3lzdGVtcywgd2hlcmUgYWNjZXNzLWNvbnRyb2wgcG9saWNpZXMgbWF5XG4gICAgICAvLyBsaW1pdCBhY2Nlc3MgdG8gdGhlIGZpbGUgc3lzdGVtLCBgZnMuYWNjZXNzYCBkb2VzIG5vdCB3b3JrXG4gICAgICAvLyBhcyBleHBlY3RlZC4gU2VlIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZm9ydW0vIyF0b3BpYy9ub2RlanMvcW1adEl3RFJTWW9cbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHNcbiAgICAgIGF3YWl0IGZzLmNsb3NlKGF3YWl0IGZzLm9wZW4oZmlsZVBhdGgsICdyKycpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuaGVscGVycy5zaWduQXBwID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgYXBwUGF0aCkge1xuICBpZiAoIWF3YWl0IHRoaXMuaXNXcml0ZWFibGUoYXBwUGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBhcHBsaWNhdGlvbiBhdCAnJHthcHBQYXRofScgaXMgbm90IHdyaXRlYWJsZS4gYCArXG4gICAgICBgUGxlYXNlIGdyYW50IHdyaXRlIHBlcm1pc3Npb25zIHRvIHRoaXMgZmlsZSBvciB0byBpdHMgcGFyZW50IGZvbGRlciAnJHtwYXRoLmRpcm5hbWUoYXBwUGF0aCl9JyBgICtcbiAgICAgIGBmb3IgdGhlIEFwcGl1bSBwcm9jZXNzLCBzbyBpdCBjb3VsZCBzaWduIHRoZSBhcHBsaWNhdGlvbmApO1xuICB9XG4gIGF3YWl0IGFkYi5zaWduKGFwcFBhdGgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaGVscGVycztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxJQUFJQSxPQUFPLEdBQUcsRUFBZDs7QUFFQUEsT0FBTyxDQUFDQyw4QkFBUixHQUF5QyxnQkFBZ0JDLEdBQWhCLEVBQXFCQyxHQUFyQixFQUEwQjtFQUNqRSxJQUFJQyxHQUFHLEdBQUcsTUFBTUYsR0FBRyxDQUFDRyxpQ0FBSixDQUFzQ0YsR0FBdEMsQ0FBaEI7O0VBQ0EsSUFBSUMsR0FBSixFQUFTO0lBQ1A7RUFDRDs7RUFDRCxJQUFJRSxHQUFHLEdBQUcscUVBQ0EsK0RBREEsR0FFQSxpRUFGQSxHQUdBLDZCQUhWO0VBSUEsTUFBTSxJQUFJQyxLQUFKLENBQVVELEdBQVYsQ0FBTjtBQUNELENBVkQ7O0FBWUFOLE9BQU8sQ0FBQ1EsV0FBUixHQUFzQixlQUFlQSxXQUFmLENBQTRCQyxRQUE1QixFQUFzQztFQUMxRCxJQUFJO0lBQ0YsTUFBTUMsV0FBQSxDQUFHQyxNQUFILENBQVVGLFFBQVYsRUFBb0JDLFdBQUEsQ0FBR0UsSUFBdkIsQ0FBTjs7SUFDQSxJQUFJQyxlQUFBLENBQU9DLFNBQVAsRUFBSixFQUF3QjtNQUt0QixNQUFNSixXQUFBLENBQUdLLEtBQUgsQ0FBUyxNQUFNTCxXQUFBLENBQUdNLElBQUgsQ0FBUVAsUUFBUixFQUFrQixJQUFsQixDQUFmLENBQU47SUFDRDs7SUFDRCxPQUFPLElBQVA7RUFDRCxDQVZELENBVUUsT0FBT1EsR0FBUCxFQUFZO0lBQ1osT0FBTyxLQUFQO0VBQ0Q7QUFDRixDQWREOztBQWdCQWpCLE9BQU8sQ0FBQ2tCLE9BQVIsR0FBa0IsZ0JBQWdCaEIsR0FBaEIsRUFBcUJpQixPQUFyQixFQUE4QjtFQUM5QyxJQUFJLEVBQUMsTUFBTSxLQUFLWCxXQUFMLENBQWlCVyxPQUFqQixDQUFQLENBQUosRUFBc0M7SUFDcEMsTUFBTSxJQUFJWixLQUFKLENBQVcsdUJBQXNCWSxPQUFRLHNCQUEvQixHQUNiLHdFQUF1RUMsYUFBQSxDQUFLQyxPQUFMLENBQWFGLE9BQWIsQ0FBc0IsSUFEaEYsR0FFYiwwREFGRyxDQUFOO0VBR0Q7O0VBQ0QsTUFBTWpCLEdBQUcsQ0FBQ29CLElBQUosQ0FBU0gsT0FBVCxDQUFOO0FBQ0QsQ0FQRDs7ZUFTZW5CLE8ifQ==
