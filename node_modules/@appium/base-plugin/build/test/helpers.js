"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.e2eSetup = e2eSetup;

require("source-map-support/register");

var _support = require("@appium/support");

var _appium = require("appium");

var _getPort = _interopRequireDefault(require("get-port"));

var _logSymbols = require("log-symbols");

var _teen_process = require("teen_process");

const APPIUM_BIN = require.resolve('appium');

function e2eSetup(opts) {
  let {
    appiumHome,
    before,
    after,
    serverArgs = {},
    driverSource,
    driverPackage,
    driverName,
    driverSpec,
    pluginSource,
    pluginPackage,
    pluginSpec,
    pluginName,
    port,
    host
  } = opts;
  let server;
  before(async function () {
    const setupAppiumHome = async () => {
      const env = { ...process.env
      };

      if (appiumHome) {
        env.APPIUM_HOME = appiumHome;
        await _support.fs.mkdirp(appiumHome);
        console.log(`${_logSymbols.info} Set \`APPIUM_HOME\` to ${appiumHome}`);
      }

      return env;
    };

    const installDriver = async env => {
      var _installedDrivers$dri;

      console.log(`${_logSymbols.info} Checking if driver "${driverName}" is installed...`);
      const driverListArgs = [APPIUM_BIN, 'driver', 'list', '--json'];
      console.log(`${_logSymbols.info} Running: ${process.execPath} ${driverListArgs.join(' ')}`);
      const {
        stdout: driverListJson
      } = await (0, _teen_process.exec)(process.execPath, driverListArgs, {
        env
      });
      const installedDrivers = JSON.parse(driverListJson);

      if (!((_installedDrivers$dri = installedDrivers[driverName]) !== null && _installedDrivers$dri !== void 0 && _installedDrivers$dri.installed)) {
        console.log(`${_logSymbols.warning} Driver "${driverName}" not installed; installing...`);
        const driverArgs = [APPIUM_BIN, 'driver', 'install', '--source', driverSource, driverSpec];

        if (driverPackage) {
          driverArgs.push('--package', driverPackage);
        }

        console.log(`${_logSymbols.info} Running: ${process.execPath} ${driverArgs.join(' ')}`);
        await (0, _teen_process.exec)(process.execPath, driverArgs, {
          env
        });
      }

      console.log(`${_logSymbols.success} Installed driver "${driverName}"`);
    };

    const installPlugin = async env => {
      var _installedPlugins$plu;

      console.log(`${_logSymbols.info} Checking if plugin "${pluginName}" is installed...`);
      const pluginListArgs = [APPIUM_BIN, 'plugin', 'list', '--json'];
      const {
        stdout: pluginListJson
      } = await (0, _teen_process.exec)(process.execPath, pluginListArgs, {
        env
      });
      const installedPlugins = JSON.parse(pluginListJson);

      if (!((_installedPlugins$plu = installedPlugins[pluginName]) !== null && _installedPlugins$plu !== void 0 && _installedPlugins$plu.installed)) {
        console.log(`${_logSymbols.warning} Plugin "${pluginName}" not installed; installing...`);
        const pluginArgs = [APPIUM_BIN, 'plugin', 'install', '--source', pluginSource, pluginSpec];

        if (pluginPackage) {
          pluginArgs.push('--package', pluginPackage);
        }

        console.log(`${_logSymbols.info} Running: ${process.execPath} ${pluginArgs.join(' ')}`);
        await (0, _teen_process.exec)(process.execPath, pluginArgs, {
          env
        });
      }

      console.log(`${_logSymbols.success} Installed plugin "${pluginName}"`);
    };

    const createServer = async () => {
      if (!port) {
        port = await (0, _getPort.default)();
      }

      console.log(`${_logSymbols.info} Will use port ${port} for Appium server`);
      this.port = port;
      const args = {
        port,
        address: host,
        usePlugins: [pluginName],
        useDrivers: [driverName],
        appiumHome,
        ...serverArgs
      };
      server = await (0, _appium.main)(args);
    };

    const env = await setupAppiumHome();
    await installDriver(env);
    await installPlugin(env);
    await createServer();
  });
  after(async function () {
    if (server) {
      await server.close();
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBUFBJVU1fQklOIiwicmVxdWlyZSIsInJlc29sdmUiLCJlMmVTZXR1cCIsIm9wdHMiLCJhcHBpdW1Ib21lIiwiYmVmb3JlIiwiYWZ0ZXIiLCJzZXJ2ZXJBcmdzIiwiZHJpdmVyU291cmNlIiwiZHJpdmVyUGFja2FnZSIsImRyaXZlck5hbWUiLCJkcml2ZXJTcGVjIiwicGx1Z2luU291cmNlIiwicGx1Z2luUGFja2FnZSIsInBsdWdpblNwZWMiLCJwbHVnaW5OYW1lIiwicG9ydCIsImhvc3QiLCJzZXJ2ZXIiLCJzZXR1cEFwcGl1bUhvbWUiLCJlbnYiLCJwcm9jZXNzIiwiQVBQSVVNX0hPTUUiLCJmcyIsIm1rZGlycCIsImNvbnNvbGUiLCJsb2ciLCJpbmZvIiwiaW5zdGFsbERyaXZlciIsImRyaXZlckxpc3RBcmdzIiwiZXhlY1BhdGgiLCJqb2luIiwic3Rkb3V0IiwiZHJpdmVyTGlzdEpzb24iLCJpbnN0YWxsZWREcml2ZXJzIiwiSlNPTiIsInBhcnNlIiwiaW5zdGFsbGVkIiwid2FybmluZyIsImRyaXZlckFyZ3MiLCJwdXNoIiwic3VjY2VzcyIsImluc3RhbGxQbHVnaW4iLCJwbHVnaW5MaXN0QXJncyIsInBsdWdpbkxpc3RKc29uIiwiaW5zdGFsbGVkUGx1Z2lucyIsInBsdWdpbkFyZ3MiLCJjcmVhdGVTZXJ2ZXIiLCJhcmdzIiwiYWRkcmVzcyIsInVzZVBsdWdpbnMiLCJ1c2VEcml2ZXJzIiwiY2xvc2UiXSwic291cmNlcyI6WyIuLi8uLi90ZXN0L2hlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBAdHMtY2hlY2tcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuaW1wb3J0IHsgZnMgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgbWFpbiBhcyBhcHBpdW1TZXJ2ZXIgfSBmcm9tICdhcHBpdW0nO1xuaW1wb3J0IGdldFBvcnQgZnJvbSAnZ2V0LXBvcnQnO1xuaW1wb3J0IHsgaW5mbywgc3VjY2Vzcywgd2FybmluZyB9IGZyb20gJ2xvZy1zeW1ib2xzJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuXG5jb25zdCBBUFBJVU1fQklOID0gcmVxdWlyZS5yZXNvbHZlKCdhcHBpdW0nKTtcblxuLyoqXG4gKiBDcmVhdGVzIGhvb2tzIHRvIGluc3RhbGwgYSBkcml2ZXIgYW5kIGEgcGx1Z2luIGFuZCBzdGFydHMgYW4gQXBwaXVtIHNlcnZlciB3LyB0aGUgZ2l2ZW4gZXh0ZW5zaW9ucy5cbiAqIEBwYXJhbSB7RTJFU2V0dXBPcHRzfSBvcHRzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZTJlU2V0dXAgKG9wdHMpIHtcbiAgbGV0IHtcbiAgICBhcHBpdW1Ib21lLFxuICAgIGJlZm9yZSxcbiAgICBhZnRlcixcbiAgICBzZXJ2ZXJBcmdzID0ge30sXG4gICAgZHJpdmVyU291cmNlLFxuICAgIGRyaXZlclBhY2thZ2UsXG4gICAgZHJpdmVyTmFtZSxcbiAgICBkcml2ZXJTcGVjLFxuICAgIHBsdWdpblNvdXJjZSxcbiAgICBwbHVnaW5QYWNrYWdlLFxuICAgIHBsdWdpblNwZWMsXG4gICAgcGx1Z2luTmFtZSxcbiAgICBwb3J0LFxuICAgIGhvc3QsXG4gIH0gPSBvcHRzO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7QXBwaXVtU2VydmVyfVxuICAgKi9cbiAgbGV0IHNlcnZlcjtcblxuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHNldHVwQXBwaXVtSG9tZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0FwcGl1bUVudn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgZW52ID0gey4uLnByb2Nlc3MuZW52fTtcblxuICAgICAgaWYgKGFwcGl1bUhvbWUpIHtcbiAgICAgICAgZW52LkFQUElVTV9IT01FID0gYXBwaXVtSG9tZTtcbiAgICAgICAgYXdhaXQgZnMubWtkaXJwKGFwcGl1bUhvbWUpO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmZvfSBTZXQgXFxgQVBQSVVNX0hPTUVcXGAgdG8gJHthcHBpdW1Ib21lfWApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW52O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXBwaXVtRW52fSBlbnZcbiAgICAgKi9cbiAgICBjb25zdCBpbnN0YWxsRHJpdmVyID0gYXN5bmMgKGVudikgPT4ge1xuICAgICAgY29uc29sZS5sb2coYCR7aW5mb30gQ2hlY2tpbmcgaWYgZHJpdmVyIFwiJHtkcml2ZXJOYW1lfVwiIGlzIGluc3RhbGxlZC4uLmApO1xuICAgICAgY29uc3QgZHJpdmVyTGlzdEFyZ3MgPSBbQVBQSVVNX0JJTiwgJ2RyaXZlcicsICdsaXN0JywgJy0tanNvbiddO1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGAke2luZm99IFJ1bm5pbmc6ICR7cHJvY2Vzcy5leGVjUGF0aH0gJHtkcml2ZXJMaXN0QXJncy5qb2luKCcgJyl9YCxcbiAgICAgICk7XG4gICAgICBjb25zdCB7c3Rkb3V0OiBkcml2ZXJMaXN0SnNvbn0gPSBhd2FpdCBleGVjKFxuICAgICAgICBwcm9jZXNzLmV4ZWNQYXRoLFxuICAgICAgICBkcml2ZXJMaXN0QXJncyxcbiAgICAgICAge1xuICAgICAgICAgIGVudixcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICBjb25zdCBpbnN0YWxsZWREcml2ZXJzID0gSlNPTi5wYXJzZShkcml2ZXJMaXN0SnNvbik7XG5cbiAgICAgIGlmICghaW5zdGFsbGVkRHJpdmVyc1tkcml2ZXJOYW1lXT8uaW5zdGFsbGVkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIGAke3dhcm5pbmd9IERyaXZlciBcIiR7ZHJpdmVyTmFtZX1cIiBub3QgaW5zdGFsbGVkOyBpbnN0YWxsaW5nLi4uYCxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZHJpdmVyQXJncyA9IFtcbiAgICAgICAgICBBUFBJVU1fQklOLFxuICAgICAgICAgICdkcml2ZXInLFxuICAgICAgICAgICdpbnN0YWxsJyxcbiAgICAgICAgICAnLS1zb3VyY2UnLFxuICAgICAgICAgIGRyaXZlclNvdXJjZSxcbiAgICAgICAgICBkcml2ZXJTcGVjLFxuICAgICAgICBdO1xuICAgICAgICBpZiAoZHJpdmVyUGFja2FnZSkge1xuICAgICAgICAgIGRyaXZlckFyZ3MucHVzaCgnLS1wYWNrYWdlJywgZHJpdmVyUGFja2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYCR7aW5mb30gUnVubmluZzogJHtwcm9jZXNzLmV4ZWNQYXRofSAke2RyaXZlckFyZ3Muam9pbignICcpfWAsXG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IGV4ZWMocHJvY2Vzcy5leGVjUGF0aCwgZHJpdmVyQXJncywge1xuICAgICAgICAgIGVudixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhgJHtzdWNjZXNzfSBJbnN0YWxsZWQgZHJpdmVyIFwiJHtkcml2ZXJOYW1lfVwiYCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcHBpdW1FbnZ9IGVudlxuICAgICAqL1xuICAgIGNvbnN0IGluc3RhbGxQbHVnaW4gPSBhc3luYyAoZW52KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgJHtpbmZvfSBDaGVja2luZyBpZiBwbHVnaW4gXCIke3BsdWdpbk5hbWV9XCIgaXMgaW5zdGFsbGVkLi4uYCk7XG4gICAgICBjb25zdCBwbHVnaW5MaXN0QXJncyA9IFtBUFBJVU1fQklOLCAncGx1Z2luJywgJ2xpc3QnLCAnLS1qc29uJ107XG4gICAgICBjb25zdCB7c3Rkb3V0OiBwbHVnaW5MaXN0SnNvbn0gPSBhd2FpdCBleGVjKFxuICAgICAgICBwcm9jZXNzLmV4ZWNQYXRoLFxuICAgICAgICBwbHVnaW5MaXN0QXJncyxcbiAgICAgICAge1xuICAgICAgICAgIGVudixcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICBjb25zdCBpbnN0YWxsZWRQbHVnaW5zID0gSlNPTi5wYXJzZShwbHVnaW5MaXN0SnNvbik7XG5cbiAgICAgIGlmICghaW5zdGFsbGVkUGx1Z2luc1twbHVnaW5OYW1lXT8uaW5zdGFsbGVkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIGAke3dhcm5pbmd9IFBsdWdpbiBcIiR7cGx1Z2luTmFtZX1cIiBub3QgaW5zdGFsbGVkOyBpbnN0YWxsaW5nLi4uYCxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcGx1Z2luQXJncyA9IFtcbiAgICAgICAgICBBUFBJVU1fQklOLFxuICAgICAgICAgICdwbHVnaW4nLFxuICAgICAgICAgICdpbnN0YWxsJyxcbiAgICAgICAgICAnLS1zb3VyY2UnLFxuICAgICAgICAgIHBsdWdpblNvdXJjZSxcbiAgICAgICAgICBwbHVnaW5TcGVjLFxuICAgICAgICBdO1xuICAgICAgICBpZiAocGx1Z2luUGFja2FnZSkge1xuICAgICAgICAgIHBsdWdpbkFyZ3MucHVzaCgnLS1wYWNrYWdlJywgcGx1Z2luUGFja2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYCR7aW5mb30gUnVubmluZzogJHtwcm9jZXNzLmV4ZWNQYXRofSAke3BsdWdpbkFyZ3Muam9pbignICcpfWAsXG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IGV4ZWMocHJvY2Vzcy5leGVjUGF0aCwgcGx1Z2luQXJncywge1xuICAgICAgICAgIGVudixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhgJHtzdWNjZXNzfSBJbnN0YWxsZWQgcGx1Z2luIFwiJHtwbHVnaW5OYW1lfVwiYCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNyZWF0ZVNlcnZlciA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghcG9ydCkge1xuICAgICAgICBwb3J0ID0gYXdhaXQgZ2V0UG9ydCgpO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coYCR7aW5mb30gV2lsbCB1c2UgcG9ydCAke3BvcnR9IGZvciBBcHBpdW0gc2VydmVyYCk7XG4gICAgICB0aGlzLnBvcnQgPSBwb3J0O1xuXG4gICAgICAvKiogQHR5cGUge2ltcG9ydCgnYXBwaXVtJykuQXJnc30gKi9cbiAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgIHBvcnQsXG4gICAgICAgIGFkZHJlc3M6IGhvc3QsXG4gICAgICAgIHVzZVBsdWdpbnM6IFtwbHVnaW5OYW1lXSxcbiAgICAgICAgdXNlRHJpdmVyczogW2RyaXZlck5hbWVdLFxuICAgICAgICBhcHBpdW1Ib21lLFxuICAgICAgICAuLi5zZXJ2ZXJBcmdzXG4gICAgICB9O1xuICAgICAgc2VydmVyID0gLyoqIEB0eXBlIHtBcHBpdW1TZXJ2ZXJ9ICovKGF3YWl0IGFwcGl1bVNlcnZlcihhcmdzKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGVudiA9IGF3YWl0IHNldHVwQXBwaXVtSG9tZSgpO1xuICAgIGF3YWl0IGluc3RhbGxEcml2ZXIoZW52KTtcbiAgICBhd2FpdCBpbnN0YWxsUGx1Z2luKGVudik7XG4gICAgYXdhaXQgY3JlYXRlU2VydmVyKCk7XG4gIH0pO1xuXG4gIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VydmVyKSB7XG4gICAgICBhd2FpdCBzZXJ2ZXIuY2xvc2UoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgeyBlMmVTZXR1cCB9O1xuXG4vKipcbiAqIEB0eXBlZGVmIEUyRVNldHVwT3B0c1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFthcHBpdW1Ib21lXSAtIFBhdGggdG8gQXBwaXVtIGhvbWUgZGlyZWN0b3J5XG4gKiBAcHJvcGVydHkge01vY2hhLmJlZm9yZX0gYmVmb3JlIC0gTW9jaGEgXCJiZWZvcmUgYWxsXCIgaG9vayBmdW5jdGlvblxuICogQHByb3BlcnR5IHtNb2NoYS5hZnRlcn0gYWZ0ZXIgLSBNb2NoYSBcImFmdGVyIGFsbFwiIGhvb2sgZnVuY3Rpb25cbiAqIEBwcm9wZXJ0eSB7UGFydGlhbDxpbXBvcnQoJ2FwcGl1bScpLkFyZ3M+fSBbc2VydmVyQXJnc10gLSBBcmd1bWVudHMgdG8gcGFzcyB0byBBcHBpdW0gc2VydmVyXG4gKiBAcHJvcGVydHkge2ltcG9ydCgnYXBwaXVtL3R5cGVzJykuSW5zdGFsbFR5cGUgJiBzdHJpbmd9IFtkcml2ZXJTb3VyY2VdIC0gU291cmNlIG9mIGRyaXZlciB0byBpbnN0YWxsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2RyaXZlclBhY2thZ2VdIC0gUGFja2FnZSBuYW1lIG9mIGRyaXZlciB0byBpbnN0YWxsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2RyaXZlck5hbWVdIC0gTmFtZSBvZiBkcml2ZXIgdG8gaW5zdGFsbFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtkcml2ZXJTcGVjXSAtIFNwZWMgb2YgZHJpdmVyIHRvIGluc3RhbGxcbiAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdhcHBpdW0vdHlwZXMnKS5JbnN0YWxsVHlwZSAmIHN0cmluZ30gW3BsdWdpblNvdXJjZV0gLSBTb3VyY2Ugb2YgcGx1Z2luIHRvIGluc3RhbGxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGx1Z2luUGFja2FnZV0gLSBQYWNrYWdlIG5hbWUgb2YgcGx1Z2luIHRvIGluc3RhbGxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGx1Z2luU3BlY10gLSBTcGVjIG9mIHBsdWdpbiB0byBpbnN0YWxsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3BsdWdpbk5hbWVdIC0gTmFtZSBvZiBwbHVnaW4gdG8gaW5zdGFsbFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtwb3J0XSAtIFBvcnQgdG8gdXNlIGZvciBBcHBpdW0gc2VydmVyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2hvc3RdIC0gSG9zdCB0byB1c2UgZm9yIEFwcGl1bSBzZXJ2ZXJcbiAqL1xuXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkFwcGl1bVNlcnZlcn0gQXBwaXVtU2VydmVyXG4gKi9cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnYXBwaXVtL3R5cGVzJykuQXBwaXVtRW52fSBBcHBpdW1FbnZcbiAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCLFFBQWhCLENBQW5COztBQU9BLFNBQVNDLFFBQVQsQ0FBbUJDLElBQW5CLEVBQXlCO0VBQ3ZCLElBQUk7SUFDRkMsVUFERTtJQUVGQyxNQUZFO0lBR0ZDLEtBSEU7SUFJRkMsVUFBVSxHQUFHLEVBSlg7SUFLRkMsWUFMRTtJQU1GQyxhQU5FO0lBT0ZDLFVBUEU7SUFRRkMsVUFSRTtJQVNGQyxZQVRFO0lBVUZDLGFBVkU7SUFXRkMsVUFYRTtJQVlGQyxVQVpFO0lBYUZDLElBYkU7SUFjRkM7RUFkRSxJQWVBZCxJQWZKO0VBb0JBLElBQUllLE1BQUo7RUFFQWIsTUFBTSxDQUFDLGtCQUFrQjtJQUN2QixNQUFNYyxlQUFlLEdBQUcsWUFBWTtNQUlsQyxNQUFNQyxHQUFHLEdBQUcsRUFBQyxHQUFHQyxPQUFPLENBQUNEO01BQVosQ0FBWjs7TUFFQSxJQUFJaEIsVUFBSixFQUFnQjtRQUNkZ0IsR0FBRyxDQUFDRSxXQUFKLEdBQWtCbEIsVUFBbEI7UUFDQSxNQUFNbUIsWUFBR0MsTUFBSCxDQUFVcEIsVUFBVixDQUFOO1FBQ0FxQixPQUFPLENBQUNDLEdBQVIsQ0FBYSxHQUFFQyxnQkFBSywyQkFBMEJ2QixVQUFXLEVBQXpEO01BQ0Q7O01BRUQsT0FBT2dCLEdBQVA7SUFDRCxDQWJEOztJQW1CQSxNQUFNUSxhQUFhLEdBQUcsTUFBT1IsR0FBUCxJQUFlO01BQUE7O01BQ25DSyxPQUFPLENBQUNDLEdBQVIsQ0FBYSxHQUFFQyxnQkFBSyx3QkFBdUJqQixVQUFXLG1CQUF0RDtNQUNBLE1BQU1tQixjQUFjLEdBQUcsQ0FBQzlCLFVBQUQsRUFBYSxRQUFiLEVB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