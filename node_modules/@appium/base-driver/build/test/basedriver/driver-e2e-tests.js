"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../../lib");

var _axios = _interopRequireDefault(require("axios"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _helpers = require("../helpers");

var _capabilities = require("../../lib/basedriver/capabilities");

const {
  POST,
  DELETE
} = _helpers.METHODS;

function baseDriverE2ETests(DriverClass, defaultCaps = {}) {
  var _defaultCaps$appiumA;

  let address = (_defaultCaps$appiumA = defaultCaps['appium:address']) !== null && _defaultCaps$appiumA !== void 0 ? _defaultCaps$appiumA : _helpers.TEST_HOST;
  let port = defaultCaps['appium:port'];
  const className = DriverClass.name || '(unknown driver)';
  describe(`BaseDriver E2E (as ${className})`, function () {
    let baseServer, d;
    let newSessionURL;
    let createAppiumTestURL;
    let createSessionURL;
    before(async function () {
      var _port;

      port = (_port = port) !== null && _port !== void 0 ? _port : await (0, _helpers.getTestPort)();
      defaultCaps = { ...defaultCaps,
        'appium:port': port
      };
      d = new DriverClass({
        port,
        address
      });
      baseServer = await (0, _lib.server)({
        routeConfiguringFunction: (0, _lib.routeConfiguringFunction)(d),
        port,
        hostname: _helpers.TEST_HOST
      });
      createAppiumTestURL = (0, _helpers.createAppiumURL)(address, port);
      newSessionURL = createAppiumTestURL('', 'session');
      createSessionURL = createAppiumTestURL(_lodash.default, '');
    });
    after(async function () {
      await baseServer.close();
    });

    async function startSession(caps) {
      return (await (0, _axios.default)({
        url: newSessionURL,
        method: POST,
        data: {
          capabilities: {
            alwaysMatch: caps,
            firstMatch: [{}]
          }
        }
      })).data.value;
    }

    async function endSession(id) {
      return (await (0, _axios.default)({
        url: createSessionURL(id),
        method: DELETE,
        validateStatus: null
      })).data.value;
    }

    async function getSession(id) {
      return (await (0, _axios.default)({
        url: createSessionURL(id)
      })).data.value;
    }

    describe('session handling', function () {
      it('should handle idempotency while creating sessions', async function () {
        const sessionIds = [];
        let times = 0;

        do {
          const {
            sessionId
          } = (await (0, _axios.default)({
            url: newSessionURL,
            headers: {
              'X-Idempotency-Key': '123456'
            },
            method: POST,
            data: {
              capabilities: {
                alwaysMatch: defaultCaps,
                firstMatch: [{}]
              }
            },
            simple: false,
            resolveWithFullResponse: true
          })).data.value;
          sessionIds.push(sessionId);
          times++;
        } while (times < 2);

        _lodash.default.uniq(sessionIds).length.should.equal(1);

        const {
          status,
          data
        } = await (0, _axios.default)({
          url: createSessionURL(sessionIds[0]),
          method: DELETE
        });
        status.should.equal(200);
        should.equal(data.value, null);
      });
      it('should handle idempotency while creating parallel sessions', async function () {
        const reqs = [];
        let times = 0;

        do {
          reqs.push((0, _axios.default)({
            url: newSessionURL,
            headers: {
              'X-Idempotency-Key': '12345'
            },
            method: POST,
            data: {
              capabilities: {
                alwaysMatch: defaultCaps,
                firstMatch: [{}]
              }
            }
          }));
          times++;
        } while (times < 2);

        const sessionIds = (await _bluebird.default.all(reqs)).map(x => x.data.value.sessionId);

        _lodash.default.uniq(sessionIds).length.should.equal(1);

        const {
          status,
          data
        } = await (0, _axios.default)({
          url: createSessionURL(sessionIds[0]),
          method: DELETE
        });
        status.should.equal(200);
        should.equal(data.value, null);
      });
      it('should create session and retrieve a session id, then delete it', async function () {
        let {
          status,
          data
        } = await (0, _axios.default)({
          url: newSessionURL,
          method: POST,
          data: {
            capabilities: {
              alwaysMatch: defaultCaps,
              firstMatch: [{}]
            }
          }
        });
        status.should.equal(200);
        should.exist(data.value.sessionId);
        data.value.capabilities.platformName.should.equal(defaultCaps.platformName);
        data.value.capabilities.deviceName.should.equal(defaultCaps['appium:deviceName']);
        ({
          status,
          data
        } = await (0, _axios.default)({
          url: createSessionURL(d.sessionId),
          method: DELETE
        }));
        status.should.equal(200);
        should.equal(data.value, null);
        should.equal(d.sessionId, null);
      });
    });
    it.skip('should throw NYI for commands not implemented', async function () {});
    describe('command timeouts', function () {
      let originalFindElement, originalFindElements;

      async function startTimeoutSession(timeout) {
        const caps = _lodash.default.cloneDeep(defaultCaps);

        caps['appium:newCommandTimeout'] = timeout;
        return await startSession(caps);
      }

      before(function () {
        originalFindElement = d.findElement;

        d.findElement = function () {
          return 'foo';
        }.bind(d);

        originalFindElements = d.findElements;

        d.findElements = async function () {
          await _bluebird.default.delay(200);
          return ['foo'];
        }.bind(d);
      });
      after(function () {
        d.findElement = originalFindElement;
        d.findElements = originalFindElements;
      });
      it('should set a default commandTimeout', async function () {
        let newSession = await startTimeoutSession();
        d.newCommandTimeoutMs.should.be.above(0);
        await endSession(newSession.sessionId);
      });
      it('should timeout on commands using commandTimeout cap', async function () {
        let newSession = await startTimeoutSession(0.25);
        let sessionURL = createSessionURL(d.sessionId);
        await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'element'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        const {
          data
        } = await (0, _axios.default)({
          url: sessionURL,
          validateStatus: null
        });
        should.equal(data.value.error, 'invalid session id');
        should.equal(d.sessionId, null);
        const resp = await endSession(newSession.sessionId);
        should.equal(resp.error, 'invalid session id');
      });
      it('should not timeout with commandTimeout of false', async function () {
        let newSession = await startTimeoutSession(0.1);
        let start = Date.now();
        const {
          value
        } = (await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'elements'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        })).data;
        (Date.now() - start).should.be.above(150);
        value.should.eql(['foo']);
        await endSession(newSession.sessionId);
      });
      it('should not timeout with commandTimeout of 0', async function () {
        d.newCommandTimeoutMs = 2;
        let newSession = await startTimeoutSession(0);
        await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'element'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        const {
          value
        } = (await (0, _axios.default)({
          url: createSessionURL(d.sessionId)
        })).data;
        value.platformName.should.equal(defaultCaps.platformName);
        const resp = await endSession(newSession.sessionId);
        should.equal(resp, null);
        d.newCommandTimeoutMs = 60 * 1000;
      });
      it('should not timeout if its just the command taking awhile', async function () {
        let newSession = await startTimeoutSession(0.25);
        let sessionURL = createSessionURL(d.sessionId);
        await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'element'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        const {
          value
        } = (await (0, _axios.default)({
          url: sessionURL,
          validateStatus: null
        })).data;
        value.error.should.equal('invalid session id');
        should.equal(d.sessionId, null);
        const resp = await endSession(newSession.sessionId);
        resp.error.should.equal('invalid session id');
      });
      it('should not have a timer running before or after a session', async function () {
        should.not.exist(d.noCommandTimer);
        let newSession = await startTimeoutSession(0.25);
        newSession.sessionId.should.equal(d.sessionId);
        should.exist(d.noCommandTimer);
        await endSession(newSession.sessionId);
        should.not.exist(d.noCommandTimer);
      });
    });
    describe('settings api', function () {
      before(function () {
        d.settings = new _lib.DeviceSettings({
          ignoreUnimportantViews: false
        });
      });
      it('should be able to get settings object', function () {
        d.settings.getSettings().ignoreUnimportantViews.should.be.false;
      });
      it('should not reject when `updateSettings` method is not provided', async function () {
        await d.settings.update({
          ignoreUnimportantViews: true
        }).should.not.be.rejected;
      });
      it('should reject for invalid update object', async function () {
        await d.settings.update('invalid json').should.eventually.be.rejectedWith('JSON');
      });
    });
    describe('unexpected exits', function () {
      it('should reject a current command when the driver crashes', async function () {
        d._oldGetStatus = d.getStatus;

        try {
          d.getStatus = async function () {
            await _bluebird.default.delay(5000);
          }.bind(d);

          const reqPromise = (0, _axios.default)({
            url: createAppiumTestURL('', 'status'),
            validateStatus: null
          });
          await _bluebird.default.delay(100);
          const shutdownEventPromise = new _bluebird.default((resolve, reject) => {
            setTimeout(() => reject(new Error('onUnexpectedShutdown event is expected to be fired within 5 seconds timeout')), 5000);
            d.onUnexpectedShutdown(resolve);
          });
          d.startUnexpectedShutdown(new Error('Crashytimes'));
          const {
            value
          } = (await reqPromise).data;
          value.message.should.contain('Crashytimes');
          await shutdownEventPromise;
        } finally {
          d.getStatus = d._oldGetStatus;
        }
      });
    });
    describe('event timings', function () {
      it('should not add timings if not using opt-in cap', async function () {
        const session = await startSession(defaultCaps);
        const res = await getSession(session.sessionId);
        should.not.exist(res.events);
        await endSession(session.sessionId);
      });
      it('should add start session timings', async function () {
        const caps = Object.assign({}, defaultCaps, {
          'appium:eventTimings': true
        });
        const session = await startSession(caps);
        const res = await getSession(session.sessionId);
        should.exist(res.events);
        should.exist(res.events.newSessionRequested);
        should.exist(res.events.newSessionStarted);
        res.events.newSessionRequested[0].should.be.a('number');
        res.events.newSessionStarted[0].should.be.a('number');
        await endSession(session.sessionId);
      });
    });

    if (DriverClass === _lib.BaseDriver) {
      describe('special appium:options capability', function () {
        it('should be able to start a session with caps held in appium:options', async function () {
          const ret = await startSession({
            platformName: 'iOS',
            [_capabilities.PREFIXED_APPIUM_OPTS_CAP]: {
              platformVersion: '11.4',
              'appium:deviceName': 'iPhone 11'
            }
          });
          d.opts.platformVersion.should.eql('11.4');
          d.opts.deviceName.should.eql('iPhone 11');
          await endSession(ret.sessionId);
        });
      });
    }
  });
}

var _default = baseDriverE2ETests;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwiREVMRVRFIiwiTUVUSE9EUyIsImJhc2VEcml2ZXJFMkVUZXN0cyIsIkRyaXZlckNsYXNzIiwiZGVmYXVsdENhcHMiLCJhZGRyZXNzIiwiVEVTVF9IT1NUIiwicG9ydCIsImNsYXNzTmFtZSIsIm5hbWUiLCJkZXNjcmliZSIsImJhc2VTZXJ2ZXIiLCJkIiwibmV3U2Vzc2lvblVSTCIsImNyZWF0ZUFwcGl1bVRlc3RVUkwiLCJjcmVhdGVTZXNzaW9uVVJMIiwiYmVmb3JlIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwiaG9zdG5hbWUiLCJfIiwiYWZ0ZXIiLCJjbG9zZSIsInN0YXJ0U2Vzc2lvbiIsImNhcHMiLCJ1cmwiLCJtZXRob2QiLCJkYXRhIiwiY2FwYWJpbGl0aWVzIiwiYWx3YXlzTWF0Y2giLCJmaXJzdE1hdGNoIiwidmFsdWUiLCJlbmRTZXNzaW9uIiwiaWQiLCJ2YWxpZGF0ZVN0YXR1cyIsImdldFNlc3Npb24iLCJpdCIsInNlc3Npb25JZHMiLCJ0aW1lcyIsInNlc3Npb25JZCIsImhlYWRlcnMiLCJzaW1wbGUiLCJyZXNvbHZlV2l0aEZ1bGxSZXNwb25zZSIsInB1c2giLCJ1bmlxIiwibGVuZ3RoIiwic2hvdWxkIiwiZXF1YWwiLCJzdGF0dXMiLCJyZXFzIiwiQiIsImFsbCIsIm1hcCIsIngiLCJleGlzdCIsInBsYXRmb3JtTmFtZSIsImRldmljZU5hbWUiLCJza2lwIiwib3JpZ2luYWxGaW5kRWxlbWVudCIsIm9yaWdpbmFsRmluZEVsZW1lbnRzIiwic3RhcnRUaW1lb3V0U2Vzc2lvbiIsInRpbWVvdXQiLCJjbG9uZURlZXAiLCJmaW5kRWxlbWVudCIsImJpbmQiLCJmaW5kRWxlbWVudHMiLCJkZWxheSIsIm5ld1Nlc3Npb24iLCJuZXdDb21tYW5kVGltZW91dE1zIiwiYmUiLCJhYm92ZSIsInNlc3Npb25VUkwiLCJ1c2luZyIsImVycm9yIiwicmVzcCIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsImVxbCIsIm5vdCIsIm5vQ29tbWFuZFRpbWVyIiwic2V0dGluZ3MiLCJEZXZpY2VTZXR0aW5ncyIsImlnbm9yZVVuaW1wb3J0YW50Vmlld3MiLCJnZXRTZXR0aW5ncyIsImZhbHNlIiwidXBkYXRlIiwicmVqZWN0ZWQiLCJldmVudHVhbGx5IiwicmVqZWN0ZWRXaXRoIiwiX29sZEdldFN0YXR1cyIsImdldFN0YXR1cyIsInJlcVByb21pc2UiLCJzaHV0ZG93bkV2ZW50UHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZXRUaW1lb3V0IiwiRXJyb3IiLCJvblVuZXhwZWN0ZWRTaHV0ZG93biIsInN0YXJ0VW5leHBlY3RlZFNodXRkb3duIiwibWVzc2FnZSIsImNvbnRhaW4iLCJzZXNzaW9uIiwicmVzIiwiZXZlbnRzIiwiT2JqZWN0IiwiYXNzaWduIiwibmV3U2Vzc2lvblJlcXVlc3RlZCIsIm5ld1Nlc3Npb25TdGFydGVkIiwiYSIsIkJhc2VEcml2ZXIiLCJyZXQiLCJQUkVGSVhFRF9BUFBJVU1fT1BUU19DQVAiLCJwbGF0Zm9ybVZlcnNpb24iLCJvcHRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9iYXNlZHJpdmVyL2RyaXZlci1lMmUtdGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEJhc2VEcml2ZXIsIHNlcnZlciwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLCBEZXZpY2VTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgVEVTVF9IT1NULCBnZXRUZXN0UG9ydCwgY3JlYXRlQXBwaXVtVVJMLCBNRVRIT0RTIH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBQUkVGSVhFRF9BUFBJVU1fT1BUU19DQVAgfSBmcm9tICcuLi8uLi9saWIvYmFzZWRyaXZlci9jYXBhYmlsaXRpZXMnO1xuY29uc3Qge1BPU1QsIERFTEVURX0gPSBNRVRIT0RTO1xuXG5mdW5jdGlvbiBiYXNlRHJpdmVyRTJFVGVzdHMgKERyaXZlckNsYXNzLCBkZWZhdWx0Q2FwcyA9IHt9KSB7XG4gIGxldCBhZGRyZXNzID0gZGVmYXVsdENhcHNbJ2FwcGl1bTphZGRyZXNzJ10gPz8gVEVTVF9IT1NUO1xuICBsZXQgcG9ydCA9IGRlZmF1bHRDYXBzWydhcHBpdW06cG9ydCddO1xuICBjb25zdCBjbGFzc05hbWUgPSBEcml2ZXJDbGFzcy5uYW1lIHx8ICcodW5rbm93biBkcml2ZXIpJztcblxuICBkZXNjcmliZShgQmFzZURyaXZlciBFMkUgKGFzICR7Y2xhc3NOYW1lfSlgLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGJhc2VTZXJ2ZXIsIGQ7XG4gICAgLyoqXG4gICAgICAgKiBUaGlzIFVSTCBjcmVhdGVzIGEgbmV3IHNlc3Npb25cbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKiovXG4gICAgbGV0IG5ld1Nlc3Npb25VUkw7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgVVJMIHdpdGggYmFzZSBob3N0L3BvcnQuIFN1cHBseSBgc2Vzc2lvbmAgYW5kIGBwYXRobmFtZWBcbiAgICAgKiBAdHlwZSB7Xy5DdXJyaWVkRnVuY3Rpb24yPHN0cmluZyxzdHJpbmcsc3RyaW5nPn1cbiAgICAgKi9cbiAgICBsZXQgY3JlYXRlQXBwaXVtVGVzdFVSTDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBVUkwgd2l0aCB0aGUgZ2l2ZW4gc2Vzc2lvbiBJRCBhbmQgYSBibGFuayBwYXRobmFtZTtcbiAgICAgKiBlLmcuLCBgaHR0cDovL2Zvby5iYXI6MTIzL3Nlc3Npb24vPHNlc3Npb24taWQ+YFxuICAgICAqICBAdHlwZSB7Xy5DdXJyaWVkRnVuY3Rpb24xPHN0cmluZyxzdHJpbmc+fVxuICAgICAqL1xuICAgIGxldCBjcmVhdGVTZXNzaW9uVVJMO1xuXG4gICAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBvcnQgPSBwb3J0ID8/IGF3YWl0IGdldFRlc3RQb3J0KCk7XG4gICAgICBkZWZhdWx0Q2FwcyA9IHsuLi5kZWZhdWx0Q2FwcywgJ2FwcGl1bTpwb3J0JzogcG9ydH07XG4gICAgICBkID0gbmV3IERyaXZlckNsYXNzKHtwb3J0LCBhZGRyZXNzfSk7XG4gICAgICBiYXNlU2VydmVyID0gYXdhaXQgc2VydmVyKHtcbiAgICAgICAgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uOiByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24oZCksXG4gICAgICAgIHBvcnQsXG4gICAgICAgIGhvc3RuYW1lOiBURVNUX0hPU1RcbiAgICAgIH0pO1xuICAgICAgY3JlYXRlQXBwaXVtVGVzdFVSTCA9IGNyZWF0ZUFwcGl1bVVSTChhZGRyZXNzLCBwb3J0KTtcbiAgICAgIG5ld1Nlc3Npb25VUkwgPSBjcmVhdGVBcHBpdW1UZXN0VVJMKCcnLCAnc2Vzc2lvbicpO1xuICAgICAgY3JlYXRlU2Vzc2lvblVSTCA9IGNyZWF0ZUFwcGl1bVRlc3RVUkwoXywgJycpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXIoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgYmFzZVNlcnZlci5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gc3RhcnRTZXNzaW9uIChjYXBzKSB7XG4gICAgICByZXR1cm4gKGF3YWl0IGF4aW9zKHtcbiAgICAgICAgdXJsOiBuZXdTZXNzaW9uVVJMLFxuICAgICAgICBtZXRob2Q6IFBPU1QsXG4gICAgICAgIGRhdGE6IHtjYXBhYmlsaXRpZXM6IHthbHdheXNNYXRjaDogY2FwcywgZmlyc3RNYXRjaDogW3t9XX19LFxuICAgICAgfSkpLmRhdGEudmFsdWU7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gZW5kU2Vzc2lvbiAoaWQpIHtcbiAgICAgIHJldHVybiAoYXdhaXQgYXhpb3Moe1xuICAgICAgICB1cmw6IGNyZWF0ZVNlc3Npb25VUkwoaWQpLFxuICAgICAgICBtZXRob2Q6IERFTEVURSxcbiAgICAgICAgdmFsaWRhdGVTdGF0dXM6IG51bGwsXG4gICAgICB9KSkuZGF0YS52YWx1ZTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBnZXRTZXNzaW9uIChpZCkge1xuICAgICAgcmV0dXJuIChhd2FpdCBheGlvcyh7XG4gICAgICAgIHVybDogY3JlYXRlU2Vzc2lvblVSTChpZCksXG4gICAgICB9KSkuZGF0YS52YWx1ZTtcbiAgICB9XG5cbiAgICBkZXNjcmliZSgnc2Vzc2lvbiBoYW5kbGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIGlkZW1wb3RlbmN5IHdoaWxlIGNyZWF0aW5nIHNlc3Npb25zJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzZXNzaW9uSWRzID0gW107XG4gICAgICAgIGxldCB0aW1lcyA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBjb25zdCB7c2Vzc2lvbklkfSA9IChhd2FpdCBheGlvcyh7XG4gICAgICAgICAgICB1cmw6IG5ld1Nlc3Npb25VUkwsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICdYLUlkZW1wb3RlbmN5LUtleSc6ICcxMjM0NTYnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGhvZDogUE9TVCxcbiAgICAgICAgICAgIGRhdGE6IHtjYXBhYmlsaXRpZXM6IHthbHdheXNNYXRjaDogZGVmYXVsdENhcHMsIGZpcnN0TWF0Y2g6IFt7fV19fSxcbiAgICAgICAgICAgIHNpbXBsZTogZmFsc2UsXG4gICAgICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZVxuICAgICAgICAgIH0pKS5kYXRhLnZhbHVlO1xuXG4gICAgICAgICAgc2Vzc2lvbklkcy5wdXNoKHNlc3Npb25JZCk7XG4gICAgICAgICAgdGltZXMrKztcbiAgICAgICAgfSB3aGlsZSAodGltZXMgPCAyKTtcbiAgICAgICAgXy51bmlxKHNlc3Npb25JZHMpLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XG5cbiAgICAgICAgY29uc3Qge3N0YXR1cywgZGF0YX0gPSBhd2FpdCBheGlvcyh7XG4gICAgICAgICAgdXJsOiBjcmVhdGVTZXNzaW9uVVJMKHNlc3Npb25JZHNbMF0pLFxuICAgICAgICAgIG1ldGhvZDogREVMRVRFLFxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdHVzLnNob3VsZC5lcXVhbCgyMDApO1xuICAgICAgICBzaG91bGQuZXF1YWwoZGF0YS52YWx1ZSwgbnVsbCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgaWRlbXBvdGVuY3kgd2hpbGUgY3JlYXRpbmcgcGFyYWxsZWwgc2Vzc2lvbnMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHJlcXMgPSBbXTtcbiAgICAgICAgbGV0IHRpbWVzID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHJlcXMucHVzaChheGlvcyh7XG4gICAgICAgICAgICB1cmw6IG5ld1Nlc3Npb25VUkwsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICdYLUlkZW1wb3RlbmN5LUtleSc6ICcxMjM0NScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0aG9kOiBQT1NULFxuICAgICAgICAgICAgZGF0YToge2NhcGFiaWxpdGllczoge2Fsd2F5c01hdGNoOiBkZWZhdWx0Q2FwcywgZmlyc3RNYXRjaDogW3t9XX19LFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICB0aW1lcysrO1xuICAgICAgICB9IHdoaWxlICh0aW1lcyA8IDIpO1xuICAgICAgICBjb25zdCBzZXNzaW9uSWRzID0gKGF3YWl0IEIuYWxsKHJlcXMpKS5tYXAoKHgpID0+IHguZGF0YS52YWx1ZS5zZXNzaW9uSWQpO1xuICAgICAgICBfLnVuaXEoc2Vzc2lvbklkcykubGVuZ3RoLnNob3VsZC5lcXVhbCgxKTtcblxuICAgICAgICBjb25zdCB7c3RhdHVzLCBkYXRhfSA9IGF3YWl0IGF4aW9zKHtcbiAgICAgICAgICB1cmw6IGNyZWF0ZVNlc3Npb25VUkwoc2Vzc2lvbklkc1swXSksXG4gICAgICAgICAgbWV0aG9kOiBERUxFVEUsXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuc2hvdWxkLmVxdWFsKDIwMCk7XG4gICAgICAgIHNob3VsZC5lcXVhbChkYXRhLnZhbHVlLCBudWxsKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBzZXNzaW9uIGFuZCByZXRyaWV2ZSBhIHNlc3Npb24gaWQsIHRoZW4gZGVsZXRlIGl0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQge3N0YXR1cywgZGF0YX0gPSBhd2FpdCBheGlvcyh7XG4gICAgICAgICAgdXJsOiBuZXdTZXNzaW9uVVJMLFxuICAgICAgICAgIG1ldGhvZDogUE9TVCxcbiAgICAgICAgICBkYXRhOiB7Y2FwYWJpbGl0aWVzOiB7YWx3YXlzTWF0Y2g6IGRlZmF1bHRDYXBzLCBmaXJzdE1hdGNoOiBbe31dfX0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YXR1cy5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICAgICAgc2hvdWxkLmV4aXN0KGRhdGEudmFsdWUuc2Vzc2lvbklkKTtcbiAgICAgICAgZGF0YS52YWx1ZS5jYXBhYmlsaXRpZXMucGxhdGZvcm1OYW1lLnNob3VsZC5lcXVhbChkZWZhdWx0Q2Fwcy5wbGF0Zm9ybU5hbWUpO1xuICAgICAgICBkYXRhLnZhbHVlLmNhcGFiaWxpdGllcy5kZXZpY2VOYW1lLnNob3VsZC5lcXVhbChkZWZhdWx0Q2Fwc1snYXBwaXVtOmRldmljZU5hbWUnXSk7XG5cbiAgICAgICAgKHtzdGF0dXMsIGRhdGF9ID0gYXdhaXQgYXhpb3Moe1xuICAgICAgICAgIHVybDogY3JlYXRlU2Vzc2lvblVSTChkLnNlc3Npb25JZCksXG4gICAgICAgICAgbWV0aG9kOiBERUxFVEUsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBzdGF0dXMuc2hvdWxkLmVxdWFsKDIwMCk7XG4gICAgICAgIHNob3VsZC5lcXVhbChkYXRhLnZhbHVlLCBudWxsKTtcbiAgICAgICAgc2hvdWxkLmVxdWFsKGQuc2Vzc2lvbklkLCBudWxsKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQuc2tpcCgnc2hvdWxkIHRocm93IE5ZSSBmb3IgY29tbWFuZHMgbm90IGltcGxlbWVudGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2NvbW1hbmQgdGltZW91dHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgb3JpZ2luYWxGaW5kRWxlbWVudCwgb3JpZ2luYWxGaW5kRWxlbWVudHM7XG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0VGltZW91dFNlc3Npb24gKHRpbWVvdXQpIHtcbiAgICAgICAgY29uc3QgY2FwcyA9IF8uY2xvbmVEZWVwKGRlZmF1bHRDYXBzKTtcbiAgICAgICAgY2Fwc1snYXBwaXVtOm5ld0NvbW1hbmRUaW1lb3V0J10gPSB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gYXdhaXQgc3RhcnRTZXNzaW9uKGNhcHMpO1xuICAgICAgfVxuXG4gICAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBvcmlnaW5hbEZpbmRFbGVtZW50ID0gZC5maW5kRWxlbWVudDtcbiAgICAgICAgZC5maW5kRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJ2Zvbyc7XG4gICAgICAgIH0uYmluZChkKTtcblxuICAgICAgICBvcmlnaW5hbEZpbmRFbGVtZW50cyA9IGQuZmluZEVsZW1lbnRzO1xuICAgICAgICBkLmZpbmRFbGVtZW50cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBCLmRlbGF5KDIwMCk7XG4gICAgICAgICAgcmV0dXJuIFsnZm9vJ107XG4gICAgICAgIH0uYmluZChkKTtcbiAgICAgIH0pO1xuXG4gICAgICBhZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGQuZmluZEVsZW1lbnQgPSBvcmlnaW5hbEZpbmRFbGVtZW50O1xuICAgICAgICBkLmZpbmRFbGVtZW50cyA9IG9yaWdpbmFsRmluZEVsZW1lbnRzO1xuICAgICAgfSk7XG5cblxuICAgICAgaXQoJ3Nob3VsZCBzZXQgYSBkZWZhdWx0IGNvbW1hbmRUaW1lb3V0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbmV3U2Vzc2lvbiA9IGF3YWl0IHN0YXJ0VGltZW91dFNlc3Npb24oKTtcbiAgICAgICAgZC5uZXdDb21tYW5kVGltZW91dE1zLnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihuZXdTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCB0aW1lb3V0IG9uIGNvbW1hbmRzIHVzaW5nIGNvbW1hbmRUaW1lb3V0IGNhcCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IG5ld1Nlc3Npb24gPSBhd2FpdCBzdGFydFRpbWVvdXRTZXNzaW9uKDAuMjUpO1xuICAgICAgICAvLyBYWFg6IHJhY2UgY29uZGl0aW9uOiB3ZSBtdXN0IGJ1aWxkIHRoaXMgVVJMIGJlZm9yZSAuLi5zb21ldGhpbmcgaGFwcGVucy4uLlxuICAgICAgICAvLyB3aGljaCBjYXVzZXMgYGQuc2Vzc2lvbklkYCB0byBiZSBtaXNzaW5nXG4gICAgICAgIGxldCBzZXNzaW9uVVJMID0gY3JlYXRlU2Vzc2lvblVSTChkLnNlc3Npb25JZCk7XG4gICAgICAgIGF3YWl0IGF4aW9zKHtcbiAgICAgICAgICB1cmw6IGNyZWF0ZUFwcGl1bVRlc3RVUkwoZC5zZXNzaW9uSWQsICdlbGVtZW50JyksXG4gICAgICAgICAgbWV0aG9kOiBQT1NULFxuICAgICAgICAgIGRhdGE6IHt1c2luZzogJ25hbWUnLCB2YWx1ZTogJ2Zvbyd9LFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgQi5kZWxheSg0MDApO1xuICAgICAgICBjb25zdCB7ZGF0YX0gPSBhd2FpdCBheGlvcyh7XG4gICAgICAgICAgdXJsOiBzZXNzaW9uVVJMLFxuICAgICAgICAgIHZhbGlkYXRlU3RhdHVzOiBudWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgc2hvdWxkLmVxdWFsKGRhdGEudmFsdWUuZXJyb3IsICdpbnZhbGlkIHNlc3Npb24gaWQnKTtcbiAgICAgICAgc2hvdWxkLmVxdWFsKGQuc2Vzc2lvbklkLCBudWxsKTtcbiAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICBzaG91bGQuZXF1YWwocmVzcC5lcnJvciwgJ2ludmFsaWQgc2Vzc2lvbiBpZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbm90IHRpbWVvdXQgd2l0aCBjb21tYW5kVGltZW91dCBvZiBmYWxzZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IG5ld1Nlc3Npb24gPSBhd2FpdCBzdGFydFRpbWVvdXRTZXNzaW9uKDAuMSk7XG4gICAgICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IHt2YWx1ZX0gPSAoYXdhaXQgYXhpb3Moe1xuICAgICAgICAgIHVybDogY3JlYXRlQXBwaXVtVGVzdFVSTChkLnNlc3Npb25JZCwgJ2VsZW1lbnRzJyksXG4gICAgICAgICAgbWV0aG9kOiBQT1NULFxuICAgICAgICAgIGRhdGE6IHt1c2luZzogJ25hbWUnLCB2YWx1ZTogJ2Zvbyd9LFxuICAgICAgICB9KSkuZGF0YTtcbiAgICAgICAgKERhdGUubm93KCkgLSBzdGFydCkuc2hvdWxkLmJlLmFib3ZlKDE1MCk7XG4gICAgICAgIHZhbHVlLnNob3VsZC5lcWwoWydmb28nXSk7XG4gICAgICAgIGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbm90IHRpbWVvdXQgd2l0aCBjb21tYW5kVGltZW91dCBvZiAwJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSAyO1xuICAgICAgICBsZXQgbmV3U2Vzc2lvbiA9IGF3YWl0IHN0YXJ0VGltZW91dFNlc3Npb24oMCk7XG5cbiAgICAgICAgYXdhaXQgYXhpb3Moe1xuICAgICAgICAgIHVybDogY3JlYXRlQXBwaXVtVGVzdFVSTChkLnNlc3Npb25JZCwgJ2VsZW1lbnQnKSxcbiAgICAgICAgICBtZXRob2Q6IFBPU1QsXG4gICAgICAgICAgZGF0YToge3VzaW5nOiAnbmFtZScsIHZhbHVlOiAnZm9vJ30sXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDQwMCk7XG4gICAgICAgIGNvbnN0IHt2YWx1ZX0gPSAoYXdhaXQgYXhpb3Moe1xuICAgICAgICAgIHVybDogY3JlYXRlU2Vzc2lvblVSTChkLnNlc3Npb25JZCksXG4gICAgICAgIH0pKS5kYXRhO1xuICAgICAgICB2YWx1ZS5wbGF0Zm9ybU5hbWUuc2hvdWxkLmVxdWFsKGRlZmF1bHRDYXBzLnBsYXRmb3JtTmFtZSk7XG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBlbmRTZXNzaW9uKG5ld1Nlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgc2hvdWxkLmVxdWFsKHJlc3AsIG51bGwpO1xuXG4gICAgICAgIGQubmV3Q29tbWFuZFRpbWVvdXRNcyA9IDYwICogMTAwMDtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIG5vdCB0aW1lb3V0IGlmIGl0cyBqdXN0IHRoZSBjb21tYW5kIHRha2luZyBhd2hpbGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBuZXdTZXNzaW9uID0gYXdhaXQgc3RhcnRUaW1lb3V0U2Vzc2lvbigwLjI1KTtcbiAgICAgICAgLy8gWFhYOiByYWNlIGNvbmRpdGlvbjogd2UgbXVzdCBidWlsZCB0aGlzIFVSTCBiZWZvcmUgLi4uc29tZXRoaW5nIGhhcHBlbnMuLi5cbiAgICAgICAgLy8gd2hpY2ggY2F1c2VzIGBkLnNlc3Npb25JZGAgdG8gYmUgbWlzc2luZ1xuICAgICAgICBsZXQgc2Vzc2lvblVSTCA9IGNyZWF0ZVNlc3Npb25VUkwoZC5zZXNzaW9uSWQpO1xuICAgICAgICBhd2FpdCBheGlvcyh7XG4gICAgICAgICAgdXJsOiBjcmVhdGVBcHBpdW1UZXN0VVJMKGQuc2Vzc2lvbklkLCAnZWxlbWVudCcpLFxuICAgICAgICAgIG1ldGhvZDogUE9TVCxcbiAgICAgICAgICBkYXRhOiB7dXNpbmc6ICduYW1lJywgdmFsdWU6ICdmb28nfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkoNDAwKTtcbiAgICAgICAgY29uc3Qge3ZhbHVlfSA9IChhd2FpdCBheGlvcyh7XG4gICAgICAgICAgdXJsOiBzZXNzaW9uVVJMLFxuICAgICAgICAgIHZhbGlkYXRlU3RhdHVzOiBudWxsLFxuICAgICAgICB9KSkuZGF0YTtcbiAgICAgICAgdmFsdWUuZXJyb3Iuc2hvdWxkLmVxdWFsKCdpbnZhbGlkIHNlc3Npb24gaWQnKTtcbiAgICAgICAgc2hvdWxkLmVxdWFsKGQuc2Vzc2lvbklkLCBudWxsKTtcbiAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICByZXNwLmVycm9yLnNob3VsZC5lcXVhbCgnaW52YWxpZCBzZXNzaW9uIGlkJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgaGF2ZSBhIHRpbWVyIHJ1bm5pbmcgYmVmb3JlIG9yIGFmdGVyIGEgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2hvdWxkLm5vdC5leGlzdChkLm5vQ29tbWFuZFRpbWVyKTtcbiAgICAgICAgbGV0IG5ld1Nlc3Npb24gPSBhd2FpdCBzdGFydFRpbWVvdXRTZXNzaW9uKDAuMjUpO1xuICAgICAgICBuZXdTZXNzaW9uLnNlc3Npb25JZC5zaG91bGQuZXF1YWwoZC5zZXNzaW9uSWQpO1xuICAgICAgICBzaG91bGQuZXhpc3QoZC5ub0NvbW1hbmRUaW1lcik7XG4gICAgICAgIGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICBzaG91bGQubm90LmV4aXN0KGQubm9Db21tYW5kVGltZXIpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdzZXR0aW5ncyBhcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBkLnNldHRpbmdzID0gbmV3IERldmljZVNldHRpbmdzKHtpZ25vcmVVbmltcG9ydGFudFZpZXdzOiBmYWxzZX0pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHNldHRpbmdzIG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZC5zZXR0aW5ncy5nZXRTZXR0aW5ncygpLmlnbm9yZVVuaW1wb3J0YW50Vmlld3Muc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIG5vdCByZWplY3Qgd2hlbiBgdXBkYXRlU2V0dGluZ3NgIG1ldGhvZCBpcyBub3QgcHJvdmlkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuc2V0dGluZ3MudXBkYXRlKHtpZ25vcmVVbmltcG9ydGFudFZpZXdzOiB0cnVlfSkuc2hvdWxkLm5vdC5iZS5yZWplY3RlZDtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCByZWplY3QgZm9yIGludmFsaWQgdXBkYXRlIG9iamVjdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgZC5zZXR0aW5ncy51cGRhdGUoJ2ludmFsaWQganNvbicpLnNob3VsZC5ldmVudHVhbGx5XG4gICAgICAgICAgICAgICAgLmJlLnJlamVjdGVkV2l0aCgnSlNPTicpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndW5leHBlY3RlZCBleGl0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgcmVqZWN0IGEgY3VycmVudCBjb21tYW5kIHdoZW4gdGhlIGRyaXZlciBjcmFzaGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLl9vbGRHZXRTdGF0dXMgPSBkLmdldFN0YXR1cztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkLmdldFN0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGF3YWl0IEIuZGVsYXkoNTAwMCk7XG4gICAgICAgICAgfS5iaW5kKGQpO1xuICAgICAgICAgIGNvbnN0IHJlcVByb21pc2UgPSBheGlvcyh7XG4gICAgICAgICAgICB1cmw6IGNyZWF0ZUFwcGl1bVRlc3RVUkwoJycsICdzdGF0dXMnKSxcbiAgICAgICAgICAgIHZhbGlkYXRlU3RhdHVzOiBudWxsLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSByZXF1ZXN0IGdldHMgdG8gdGhlIHNlcnZlciBiZWZvcmUgb3VyIHNodXRkb3duXG4gICAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgICAgIGNvbnN0IHNodXRkb3duRXZlbnRQcm9taXNlID0gbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdvblVuZXhwZWN0ZWRTaHV0ZG93biBldmVudCBpcyBleHBlY3RlZCB0byBiZSBmaXJlZCB3aXRoaW4gNSBzZWNvbmRzIHRpbWVvdXQnKSksIDUwMDApO1xuICAgICAgICAgICAgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bihyZXNvbHZlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignQ3Jhc2h5dGltZXMnKSk7XG4gICAgICAgICAgY29uc3Qge3ZhbHVlfSA9IChhd2FpdCByZXFQcm9taXNlKS5kYXRhO1xuICAgICAgICAgIHZhbHVlLm1lc3NhZ2Uuc2hvdWxkLmNvbnRhaW4oJ0NyYXNoeXRpbWVzJyk7XG4gICAgICAgICAgYXdhaXQgc2h1dGRvd25FdmVudFByb21pc2U7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZC5nZXRTdGF0dXMgPSBkLl9vbGRHZXRTdGF0dXM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2V2ZW50IHRpbWluZ3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIG5vdCBhZGQgdGltaW5ncyBpZiBub3QgdXNpbmcgb3B0LWluIGNhcCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHN0YXJ0U2Vzc2lvbihkZWZhdWx0Q2Fwcyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldFNlc3Npb24oc2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICBzaG91bGQubm90LmV4aXN0KHJlcy5ldmVudHMpO1xuICAgICAgICBhd2FpdCBlbmRTZXNzaW9uKHNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBhZGQgc3RhcnQgc2Vzc2lvbiB0aW1pbmdzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBjYXBzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENhcHMsIHsnYXBwaXVtOmV2ZW50VGltaW5ncyc6IHRydWV9KTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHN0YXJ0U2Vzc2lvbihjYXBzKTtcbiAgICAgICAgY29uc3QgcmVzID0gKGF3YWl0IGdldFNlc3Npb24oc2Vzc2lvbi5zZXNzaW9uSWQpKTtcbiAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMpO1xuICAgICAgICBzaG91bGQuZXhpc3QocmVzLmV2ZW50cy5uZXdTZXNzaW9uUmVxdWVzdGVkKTtcbiAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMubmV3U2Vzc2lvblN0YXJ0ZWQpO1xuICAgICAgICByZXMuZXZlbnRzLm5ld1Nlc3Npb25SZXF1ZXN0ZWRbMF0uc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICByZXMuZXZlbnRzLm5ld1Nlc3Npb25TdGFydGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihzZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChEcml2ZXJDbGFzcyA9PT0gQmFzZURyaXZlcikge1xuICAgICAgLy8gb25seSBydW4gdGhpcyB0ZXN0IG9uIGJhc2Vkcml2ZXIsIG5vdCBvdGhlciBkcml2ZXJzIHdoaWNoIGFsc28gdXNlIHRoZXNlIHRlc3RzLCBzaW5jZSB3ZVxuICAgICAgLy8gZG9uJ3Qgd2FudCB0aGVtIHRvIHRyeSBhbmQgc3RhcnQgc2Vzc2lvbnMgd2l0aCB0aGVzZSByYW5kb20gY2FwYWJpbGl0aWVzIHRoYXQgYXJlXG4gICAgICAvLyBuZWNlc3NhcnkgdG8gdGVzdCB0aGUgYXBwaXVtIG9wdGlvbnMgbG9naWNcbiAgICAgIGRlc2NyaWJlKCdzcGVjaWFsIGFwcGl1bTpvcHRpb25zIGNhcGFiaWxpdHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBzdGFydCBhIHNlc3Npb24gd2l0aCBjYXBzIGhlbGQgaW4gYXBwaXVtOm9wdGlvbnMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgc3RhcnRTZXNzaW9uKHtcbiAgICAgICAgICAgIHBsYXRmb3JtTmFtZTogJ2lPUycsXG4gICAgICAgICAgICBbUFJFRklYRURfQVBQSVVNX09QVFNfQ0FQXToge1xuICAgICAgICAgICAgICBwbGF0Zm9ybVZlcnNpb246ICcxMS40JyxcbiAgICAgICAgICAgICAgJ2FwcGl1bTpkZXZpY2VOYW1lJzogJ2lQaG9uZSAxMScsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZC5vcHRzLnBsYXRmb3JtVmVyc2lvbi5zaG91bGQuZXFsKCcxMS40Jyk7XG4gICAgICAgICAgZC5vcHRzLmRldmljZU5hbWUuc2hvdWxkLmVxbCgnaVBob25lIDExJyk7XG4gICAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihyZXQuc2Vzc2lvbklkKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlRHJpdmVyRTJFVGVzdHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0EsTUFBTTtFQUFDQSxJQUFEO0VBQU9DO0FBQVAsSUFBaUJDLGdCQUF2Qjs7QUFFQSxTQUFTQyxrQkFBVCxDQUE2QkMsV0FBN0IsRUFBMENDLFdBQVcsR0FBRyxFQUF4RCxFQUE0RDtFQUFBOztFQUMxRCxJQUFJQyxPQUFPLDJCQUFHRCxXQUFXLENBQUMsZ0JBQUQsQ0FBZCx1RUFBb0NFLGtCQUEvQztFQUNBLElBQUlDLElBQUksR0FBR0gsV0FBVyxDQUFDLGFBQUQsQ0FBdEI7RUFDQSxNQUFNSSxTQUFTLEdBQUdMLFdBQVcsQ0FBQ00sSUFBWixJQUFvQixrQkFBdEM7RUFFQUMsUUFBUSxDQUFFLHNCQUFxQkYsU0FBVSxHQUFqQyxFQUFxQyxZQUFZO0lBQ3ZELElBQUlHLFVBQUosRUFBZ0JDLENBQWhCO0lBS0EsSUFBSUMsYUFBSjtJQU1BLElBQUlDLG1CQUFKO0lBT0EsSUFBSUMsZ0JBQUo7SUFFQUMsTUFBTSxDQUFDLGtCQUFrQjtNQUFBOztNQUN2QlQsSUFBSSxZQUFHQSxJQUFILHlDQUFXLE1BQU0sMkJBQXJCO01BQ0FILFdBQVcsR0FBRyxFQUFDLEdBQUdBLFdBQUo7UUFBaUIsZUFBZUc7TUFBaEMsQ0FBZDtNQUNBSyxDQUFDLEdBQUcsSUFBSVQsV0FBSixDQUFnQjtRQUFDSSxJQUFEO1FBQU9GO01BQVAsQ0FBaEIsQ0FBSjtNQUNBTSxVQUFVLEdBQUcsTUFBTSxpQkFBTztRQUN4Qk0sd0JBQXdCLEVB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