"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _support = require("@appium/support");

var _sinon = _interopRequireDefault(require("sinon"));

var _deviceSettings = require("../../../lib/basedriver/device-settings");

var _errors = require("../../../lib/protocol/errors");

const {
  expect
} = chai;
describe('DeviceSettings', function () {
  let sandbox;
  beforeEach(function () {
    sandbox = _sinon.default.createSandbox();
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('constructor', function () {
    describe('when no parameteres are provided to the constructor', function () {
      it('should not throw', function () {
        expect(() => new _deviceSettings.DeviceSettings()).not.to.throw();
      });
    });
  });
  describe('instance method', function () {
    describe('getSettings()', function () {
      it('should return a clone of the internal settings object', function () {
        const settings = {
          foo: 'bar',
          bar: 'foo'
        };
        const deviceSettings = new _deviceSettings.DeviceSettings(settings);
        expect(deviceSettings.getSettings()).to.eql(settings);
      });
    });
    describe('update()', function () {
      describe('when no parameters are provided', function () {
        it('should reject with an InvalidArgumentError', async function () {
          const deviceSettings = new _deviceSettings.DeviceSettings();
          await expect(deviceSettings.update()).to.be.rejectedWith(_errors.InvalidArgumentError, /with valid JSON/i);
        });
      });
      describe('when a non-plain-object `newSettings` param is provided', function () {
        it('should reject with an InvalidArgumentError', async function () {
          const deviceSettings = new _deviceSettings.DeviceSettings();
          await expect(deviceSettings.update(null)).to.be.rejectedWith(_errors.InvalidArgumentError, /with valid JSON/i);
        });
      });
      describe('when the size of the `newSettings` param exceeds `MAX_SETTINGS_SIZE`', function () {
        beforeEach(function () {
          sandbox.stub(_support.node, 'getObjectSize').returns(_deviceSettings.MAX_SETTINGS_SIZE + 1);
        });
        it('should reject with an InvalidArgumentError', async function () {
          const deviceSettings = new _deviceSettings.DeviceSettings();
          await expect(deviceSettings.update({
            stuff: 'things'
          })).to.be.rejectedWith(_errors.InvalidArgumentError, /object size exceeds/i);
        });
      });
      describe('when the `newSettings` param is valid', function () {
        let onSettingsUpdate;
        beforeEach(function () {
          onSettingsUpdate = sandbox.stub();
        });
        describe('when the new settings do not differ', function () {
          it('should not call the `_onSettingsUpdate` listener', async function () {
            const deviceSettings = new _deviceSettings.DeviceSettings({
              stuff: 'things'
            }, onSettingsUpdate);
            await deviceSettings.update({
              stuff: 'things'
            });
            expect(onSettingsUpdate).not.to.have.been.called;
          });
        });
        describe('when the new settings differ', function () {
          it('should call the `_onSettingsUpdate` listener', async function () {
            const deviceSettings = new _deviceSettings.DeviceSettings({}, onSettingsUpdate);
            await deviceSettings.update({
              stuff: 'things'
            });
            expect(onSettingsUpdate).to.have.been.calledOnceWithExactly('stuff', 'things', undefined);
          });
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,