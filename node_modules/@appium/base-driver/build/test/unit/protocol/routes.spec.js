"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = require("lodash");

var _protocol = require("../../../lib/protocol");

var _crypto = _interopRequireDefault(require("crypto"));

describe('Protocol', function () {
  describe('ensure protocol consistency', function () {
    it('should not change protocol between patch versions', function () {
      let shasum = _crypto.default.createHash('sha1');

      for (let [url, urlMapping] of _lodash._.toPairs(_protocol.METHOD_MAP)) {
        shasum.update(url);

        for (let [method, methodMapping] of _lodash._.toPairs(urlMapping)) {
          shasum.update(method);

          if (methodMapping.command) {
            shasum.update(methodMapping.command);
          }

          if (methodMapping.payloadParams) {
            let allParams = _lodash._.flatten(methodMapping.payloadParams.required);

            if (methodMapping.payloadParams.optional) {
              allParams = allParams.concat(_lodash._.flatten(methodMapping.payloadParams.optional));
            }

            for (let param of allParams) {
              shasum.update(param);
            }

            if (methodMapping.payloadParams.wrap) {
              shasum.update('skip');
              shasum.update(methodMapping.payloadParams.wrap);
            }
          }
        }
      }

      let hash = shasum.digest('hex').substring(0, 8);
      hash.should.equal('736bf246');
    });
  });
  describe('check route to command name conversion', function () {
    it('should properly lookup correct command name for endpoint with session', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/timeouts', 'POST');
      cmdName.should.equal('timeouts');
    });
    it('should properly lookup correct command name for endpoint with session', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/timeouts/implicit_wait', 'POST');
      cmdName.should.equal('implicitWait');
    });
    it('should properly lookup correct command name for endpoint without session', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/status', 'GET');
      cmdName.should.equal('getStatus');
    });
    it('should properly lookup correct command name for endpoint without leading slash', function () {
      const cmdName = (0, _protocol.routeToCommandName)('status', 'GET');
      cmdName.should.equal('getStatus');
    });
    it('should properly lookup correct command name for fully specified endpoint', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/status', 'GET');
      cmdName.should.equal('getStatus');
    });
    it('should not find command name if incorrect input data has been specified', function () {
      for (let [route, method] of [['/status', 'POST'], ['/xstatus', 'GET'], ['status', 'POST']]) {
        const cmdName = (0, _protocol.routeToCommandName)(route, method);
        chai.should().equal(cmdName, undefined);
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0Iiwic2hhc3VtIiwiY3J5cHRvIiwiY3JlYXRlSGFzaCIsInVybCIsInVybE1hcHBpbmciLCJfIiwidG9QYWlycyIsIk1FVEhPRF9NQVAiLCJ1cGRhdGUiLCJtZXRob2QiLCJtZXRob2RNYXBwaW5nIiwiY29tbWFuZCIsInBheWxvYWRQYXJhbXMiLCJhbGxQYXJhbXMiLCJmbGF0dGVuIiwicmVxdWlyZWQiLCJvcHRpb25hbCIsImNvbmNhdCIsInBhcmFtIiwid3JhcCIsImhhc2giLCJkaWdlc3QiLCJzdWJzdHJpbmciLCJzaG91bGQiLCJlcXVhbCIsImNtZE5hbWUiLCJyb3V0ZSIsImNoYWkiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3VuaXQvcHJvdG9jb2wvcm91dGVzLnNwZWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IF8gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTUVUSE9EX01BUCwgcm91dGVUb0NvbW1hbmROYW1lIH0gZnJvbSAnLi4vLi4vLi4vbGliL3Byb3RvY29sJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuXG5cbmRlc2NyaWJlKCdQcm90b2NvbCcsIGZ1bmN0aW9uICgpIHtcblxuICAvLyBUT0RPIHRlc3QgYWdhaW5zdCBhbiBleHBsaWNpdCBwcm90b2NvbCByYXRoZXIgdGhhbiBhIGhhc2ggb2YgYSBwcmV2aW91c1xuICAvLyBwcm90b2NvbFxuXG4gIGRlc2NyaWJlKCdlbnN1cmUgcHJvdG9jb2wgY29uc2lzdGVuY3knLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBub3QgY2hhbmdlIHByb3RvY29sIGJldHdlZW4gcGF0Y2ggdmVyc2lvbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc2hhc3VtID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKTtcbiAgICAgIGZvciAobGV0IFt1cmwsIHVybE1hcHBpbmddIG9mIF8udG9QYWlycyhNRVRIT0RfTUFQKSkge1xuICAgICAgICBzaGFzdW0udXBkYXRlKHVybCk7XG4gICAgICAgIGZvciAobGV0IFttZXRob2QsIG1ldGhvZE1hcHBpbmddIG9mIF8udG9QYWlycyh1cmxNYXBwaW5nKSkge1xuICAgICAgICAgIHNoYXN1bS51cGRhdGUobWV0aG9kKTtcbiAgICAgICAgICBpZiAobWV0aG9kTWFwcGluZy5jb21tYW5kKSB7XG4gICAgICAgICAgICBzaGFzdW0udXBkYXRlKG1ldGhvZE1hcHBpbmcuY29tbWFuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMpIHtcbiAgICAgICAgICAgIGxldCBhbGxQYXJhbXMgPSBfLmZsYXR0ZW4obWV0aG9kTWFwcGluZy5wYXlsb2FkUGFyYW1zLnJlcXVpcmVkKTtcbiAgICAgICAgICAgIGlmIChtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgYWxsUGFyYW1zID0gYWxsUGFyYW1zLmNvbmNhdChfLmZsYXR0ZW4obWV0aG9kTWFwcGluZy5wYXlsb2FkUGFyYW1zLm9wdGlvbmFsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBwYXJhbSBvZiBhbGxQYXJhbXMpIHtcbiAgICAgICAgICAgICAgc2hhc3VtLnVwZGF0ZShwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWV0aG9kTWFwcGluZy5wYXlsb2FkUGFyYW1zLndyYXApIHtcbiAgICAgICAgICAgICAgc2hhc3VtLnVwZGF0ZSgnc2tpcCcpO1xuICAgICAgICAgICAgICBzaGFzdW0udXBkYXRlKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcy53cmFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBoYXNoID0gc2hhc3VtLmRpZ2VzdCgnaGV4Jykuc3Vic3RyaW5nKDAsIDgpO1xuICAgICAgLy8gTW9kaWZ5IHRoZSBoYXNoIHdoZW5ldmVyIHRoZSBwcm90b2NvbCBoYXMgaW50ZW50aW9uYWxseSBiZWVuIG1vZGlmaWVkLlxuICAgICAgaGFzaC5zaG91bGQuZXF1YWwoJzczNmJmMjQ2Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjaGVjayByb3V0ZSB0byBjb21tYW5kIG5hbWUgY29udmVyc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGxvb2t1cCBjb3JyZWN0IGNvbW1hbmQgbmFtZSBmb3IgZW5kcG9pbnQgd2l0aCBzZXNzaW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY21kTmFtZSA9IHJvdXRlVG9Db21tYW5kTmFtZSgnL3RpbWVvdXRzJywgJ1BPU1QnKTtcbiAgICAgIGNtZE5hbWUuc2hvdWxkLmVxdWFsKCd0aW1lb3V0cycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcm9wZXJseSBsb29rdXAgY29ycmVjdCBjb21tYW5kIG5hbWUgZm9yIGVuZHBvaW50IHdpdGggc2Vzc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNtZE5hbWUgPSByb3V0ZVRvQ29tbWFuZE5hbWUoJy90aW1lb3V0cy9pbXBsaWNpdF93YWl0JywgJ1BPU1QnKTtcbiAgICAgIGNtZE5hbWUuc2hvdWxkLmVxdWFsKCdpbXBsaWNpdFdhaXQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvcGVybHkgbG9va3VwIGNvcnJlY3QgY29tbWFuZCBuYW1lIGZvciBlbmRwb2ludCB3aXRob3V0IHNlc3Npb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBjbWROYW1lID0gcm91dGVUb0NvbW1hbmROYW1lKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgICAgY21kTmFtZS5zaG91bGQuZXF1YWwoJ2dldFN0YXR1cycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcm9wZXJseSBsb29rdXAgY29ycmVjdCBjb21tYW5kIG5hbWUgZm9yIGVuZHBvaW50IHdpdGhvdXQgbGVhZGluZyBzbGFzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNtZE5hbWUgPSByb3V0ZVRvQ29tbWFuZE5hbWUoJ3N0YXR1cycsICdHRVQnKTtcbiAgICAgIGNtZE5hbWUuc2hvdWxkLmVxdWFsKCdnZXRTdGF0dXMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvcGVybHkgbG9va3VwIGNvcnJlY3QgY29tbWFuZCBuYW1lIGZvciBmdWxseSBzcGVjaWZpZWQgZW5kcG9pbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBjbWROYW1lID0gcm91dGVUb0NvbW1hbmROYW1lKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgICAgY21kTmFtZS5zaG91bGQuZXF1YWwoJ2dldFN0YXR1cycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgZmluZCBjb21tYW5kIG5hbWUgaWYgaW5jb3JyZWN0IGlucHV0IGRhdGEgaGFzIGJlZW4gc3BlY2lmaWVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yIChsZXQgW3JvdXRlLCBtZXRob2RdIG9mIFtbJy9zdGF0dXMnLCAnUE9TVCddLCBbJy94c3RhdHVzJywgJ0dFVCddLCBbJ3N0YXR1cycsICdQT1NUJ11dKSB7XG4gICAgICAgIGNvbnN0IGNtZE5hbWUgPSByb3V0ZVRvQ29tbWFuZE5hbWUocm91dGUsIG1ldGhvZCk7XG4gICAgICAgIGNoYWkuc2hvdWxkKCkuZXF1YWwoY21kTmFtZSwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFJQUEsUUFBUSxDQUFDLFVBQUQsRUFBYSxZQUFZO0VBSy9CQSxRQUFRLENBQUMsNkJBQUQsRUFBZ0MsWUFBWTtJQUNsREMsRUFBRSxDQUFDLG1EQUFELEVBQXNELFlBQVk7TUFDbEUsSUFBSUMsTUFB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