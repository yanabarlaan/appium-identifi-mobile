"use strict";

require("source-map-support/register");

var _lib = require("../../../lib");

var _server2 = require("../../../lib/express/server");

var _sinon = require("sinon");

var _helpers = require("../../helpers");

const newMethodMap = {
  '/session/:sessionId/fake': {
    GET: {
      command: 'fakeGet'
    },
    POST: {
      command: 'fakePost',
      payloadParams: {
        required: ['fakeParam']
      }
    }
  }
};

const updateServer = (app, httpServer) => {
  app.updated = true;
  httpServer.updated = true;
};

function fakeDriver() {
  return {
    sessionExists: () => {},
    executeCommand: () => {}
  };
}

describe('server configuration', function () {
  let port;
  let sandbox;

  function fakeApp() {
    const app = {
      use: sandbox.spy(),
      all: sandbox.spy(),
      get: sandbox.spy(),
      post: sandbox.spy(),
      delete: sandbox.spy(),
      totalCount: () => app.use.callCount + app.all.callCount + app.get.callCount + app.post.callCount + app.delete.callCount
    };
    return app;
  }

  before(async function () {
    port = await (0, _helpers.getTestPort)(true);
  });
  beforeEach(function () {
    sandbox = (0, _sinon.createSandbox)();
  });
  afterEach(function () {
    sandbox.restore();
  });
  it('should actually use the middleware', function () {
    const app = fakeApp();

    const configureRoutes = () => {};

    (0, _server2.configureServer)({
      app,
      addRoutes: configureRoutes
    });
    app.use.callCount.should.equal(14);
    app.all.callCount.should.equal(4);
  });
  it('should apply new methods in plugins to the standard method map', function () {
    const app1 = fakeApp();
    const app2 = fakeApp();
    const driver = fakeDriver();
    const addRoutes = (0, _lib.routeConfiguringFunction)(driver);
    (0, _server2.configureServer)({
      app: app1,
      addRoutes
    });
    (0, _server2.configureServer)({
      app: app2,
      addRoutes,
      extraMethodMap: newMethodMap
    });
    app2.totalCount().should.eql(app1.totalCount() + 2);
  });
  it('should silently reject new methods in plugins if not plain objects', function () {
    const app1 = fakeApp();
    const app2 = fakeApp();
    const driver = fakeDriver();
    const addRoutes = (0, _lib.routeConfiguringFunction)(driver);
    (0, _server2.configureServer)({
      app: app1,
      addRoutes
    });
    (0, _server2.configureServer)({
      app: app2,
      addRoutes,
      extraMethodMap: []
    });
    app2.totalCount().should.eql(app1.totalCount());
  });
  it('should allow plugins to update the server', async function () {
    const driver = fakeDriver();

    const _server = await (0, _lib.server)({
      routeConfiguringFunction: (0, _lib.routeConfiguringFunction)(driver),
      port,
      extraMethodMap: newMethodMap,
      serverUpdaters: [updateServer]
    });

    try {
      _server.updated.should.be.true;
    } finally {
      await _server.close();
    }
  });
  it('should reject if error thrown in configureRoutes parameter', async function () {
    const configureRoutes = () => {
      throw new Error('I am Mr. MeeSeeks look at me!');
    };

    await (0, _lib.server)({
      routeConfiguringFunction: configureRoutes,
      port
    }).should.be.rejectedWith('MeeSeeks');
  });
  describe('#normalizeBasePath', function () {
    it('should throw an error for paths of the wrong type', function () {
      should.throw(() => {
        (0, _server2.normalizeBasePath)(null);
      });
      should.throw(() => {
        (0, _server2.normalizeBasePath)(1);
      });
    });
    it('should remove trailing slashes', function () {
      (0, _server2.normalizeBasePath)('/wd/hub/').should.eql('/wd/hub');
      (0, _server2.normalizeBasePath)('/foo/').should.eql('/foo');
      (0, _server2.normalizeBasePath)('/').should.eql('');
    });
    it('should ensure a leading slash is present', function () {
      (0, _server2.normalizeBasePath)('foo').should.eql('/foo');
      (0, _server2.normalizeBasePath)('wd/hub').should.eql('/wd/hub');
      (0, _server2.normalizeBasePath)('wd/hub/').should.eql('/wd/hub');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,