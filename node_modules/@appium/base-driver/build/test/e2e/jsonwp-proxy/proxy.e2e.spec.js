"use strict";

require("source-map-support/register");

var _lib = require("../../../lib");

var _fakeDriver = require("../protocol/fake-driver");

describe('proxy', function () {
  const jwproxy = new _lib.JWProxy();
  let baseServer;
  before(async function () {
    baseServer = await (0, _lib.server)({
      routeConfiguringFunction: (0, _lib.routeConfiguringFunction)(new _fakeDriver.FakeDriver()),
      port: 4444
    });
  });
  after(async function () {
    await baseServer.close();
  });
  it('should proxy status straight', async function () {
    let [res, resBody] = await jwproxy.proxy('/status', 'GET');
    res.statusCode.should.equal(200);
    resBody.value.should.equal(`I'm fine`);
  });
  it('should proxy status as command', async function () {
    const res = await jwproxy.command('/status', 'GET');
    res.should.eql(`I'm fine`);
  });
  describe('new session', function () {
    afterEach(async function () {
      await jwproxy.command('', 'DELETE');
    });
    it('should start a new session', async function () {
      const caps = {
        browserName: 'fake'
      };
      const res = await jwproxy.command('/session', 'POST', {
        capabilities: {
          alwaysMatch: caps
        }
      });
      res.capabilities.alwaysMatch.should.have.property('browserName');
      jwproxy.sessionId.should.have.length(48);
    });
  });
  describe('delete session', function () {
    beforeEach(async function () {
      await jwproxy.command('/session', 'POST', {
        desiredCapabilities: {}
      });
    });
    it('should quit a session', async function () {
      const res = await jwproxy.command('', 'DELETE');
      should.not.exist(res);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsImp3cHJveHkiLCJKV1Byb3h5IiwiYmFzZVNlcnZlciIsImJlZm9yZSIsInJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiIsIkZha2VEcml2ZXIiLCJwb3J0IiwiYWZ0ZXIiLCJjbG9zZSIsIml0IiwicmVzIiwicmVzQm9keSIsInByb3h5Iiwic3RhdHVzQ29kZSIsInNob3VsZCIsImVxdWFsIiwidmFsdWUiLCJjb21tYW5kIiwiZXFsIiwiYWZ0ZXJFYWNoIiwiY2FwcyIsImJyb3dzZXJOYW1lIiwiY2FwYWJpbGl0aWVzIiwiYWx3YXlzTWF0Y2giLCJoYXZlIiwicHJvcGVydHkiLCJzZXNzaW9uSWQiLCJsZW5ndGgiLCJiZWZvcmVFYWNoIiwiZGVzaXJlZENhcGFiaWxpdGllcyIsIm5vdCIsImV4aXN0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9lMmUvanNvbndwLXByb3h5L3Byb3h5LmUyZS5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpXUHJveHksIHNlcnZlciwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCB7IEZha2VEcml2ZXIgfSBmcm9tICcuLi9wcm90b2NvbC9mYWtlLWRyaXZlcic7XG5cbmRlc2NyaWJlKCdwcm94eScsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgandwcm94eSA9IG5ldyBKV1Byb3h5KCk7XG4gIGxldCBiYXNlU2VydmVyO1xuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGJhc2VTZXJ2ZXIgPSBhd2FpdCBzZXJ2ZXIoe1xuICAgICAgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uOiByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24obmV3IEZha2VEcml2ZXIoKSksXG4gICAgICBwb3J0OiA0NDQ0LFxuICAgIH0pO1xuICB9KTtcbiAgYWZ0ZXIoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGJhc2VTZXJ2ZXIuY2xvc2UoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwcm94eSBzdGF0dXMgc3RyYWlnaHQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IFtyZXMsIHJlc0JvZHldID0gYXdhaXQgandwcm94eS5wcm94eSgnL3N0YXR1cycsICdHRVQnKTtcbiAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICByZXNCb2R5LnZhbHVlLnNob3VsZC5lcXVhbChgSSdtIGZpbmVgKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcHJveHkgc3RhdHVzIGFzIGNvbW1hbmQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgandwcm94eS5jb21tYW5kKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgIHJlcy5zaG91bGQuZXFsKGBJJ20gZmluZWApO1xuICB9KTtcbiAgZGVzY3JpYmUoJ25ldyBzZXNzaW9uJywgZnVuY3Rpb24gKCkge1xuICAgIGFmdGVyRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJycsICdERUxFVEUnKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHN0YXJ0IGEgbmV3IHNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBjYXBzID0ge2Jyb3dzZXJOYW1lOiAnZmFrZSd9O1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgandwcm94eS5jb21tYW5kKCcvc2Vzc2lvbicsICdQT1NUJywge2NhcGFiaWxpdGllczoge2Fsd2F5c01hdGNoOiBjYXBzfX0pO1xuICAgICAgcmVzLmNhcGFiaWxpdGllcy5hbHdheXNNYXRjaC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYnJvd3Nlck5hbWUnKTtcbiAgICAgIGp3cHJveHkuc2Vzc2lvbklkLnNob3VsZC5oYXZlLmxlbmd0aCg0OCk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZGVsZXRlIHNlc3Npb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJy9zZXNzaW9uJywgJ1BPU1QnLCB7ZGVzaXJlZENhcGFiaWxpdGllczoge319KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHF1aXQgYSBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgandwcm94eS5jb21tYW5kKCcnLCAnREVMRVRFJyk7XG4gICAgICBzaG91bGQubm90LmV4aXN0KHJlcyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFZO0VBQzVCLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxZQUFKLEVBQWhCO0VBQ0EsSUFBSUMsVUFBSjtFQUNBQyxNQUFNLENBQUMsa0JBQWtCO0lBQ3ZCRCxVQUFVLEdBQUcsTUFBTSxpQkFBTztNQUN4QkUsd0JBQXdCLEVBQUUsbUNBQXlCLElBQUlDLHNCQUFKLEVBQXpCLENBREY7TUFFeEJDLElBQUksRUFBRTtJQUZrQixDQUFQLENBQW5CO0VBSUQsQ0FMSyxDQUFOO0VBTUFDLEtBQUssQ0FBQyxrQkFBa0I7SUFDdEIsTUFBTUwsVUFBVSxDQUFDTSxLQUFYLEVBQU47RUFDRCxDQUZJLENBQUw7RUFJQUMsRUFBRSxDQUFDLDhCQUFELEVBQWlDLGtCQUFrQjtJQUNuRCxJQUFJLENBQUNDLEdBQUQsRUFBTUMsT0FBTixJQUFpQixNQUFNWCxPQUFPLENBQUNZLEtBQVIsQ0FBYyxTQUFkLEVBQXlCLEtBQXpCLENBQTNCO0lBQ0FGLEdBQUcsQ0FBQ0csVUFBSixDQUFlQyxNQUFmLENBQXNCQyxLQUF0QixDQUE0QixHQUE1QjtJQUNBSixPQUFPLENBQUNLLEtBQVIsQ0FBY0YsTUFBZCxDQUFxQkMsS0FBckIsQ0FBNEIsVUFBNUI7RUFDRCxDQUpDLENBQUY7RUFLQU4sRUFBRSxDQUFDLGdDQUFELEVBQW1DLGtCQUFrQjtJQUNyRCxNQUFNQyxHQUFHLEdBQUcsTUFBTVYsT0FBTyxDQUFDaUIsT0FBUixDQUFnQixTQUFoQixFQUEyQixLQUEzQixDQUFsQjtJQUNBUCxHQUFHLENBQUNJLE1BQUosQ0FBV0ksR0FBWCxDQUFnQixVQUFoQjtFQUNELENBSEMsQ0FBRjtFQUlBbkIsUUFBUSxDQUFDLGFBQUQsRUFBZ0IsWUFBWTtJQUNsQ29CLFNBQVMsQ0FBQyxrQkFBa0I7TUFDMUIsTUFBTW5CLE9BQU8sQ0FBQ2lCLE9BQVIsQ0FBZ0IsRUFBaEIsRUFBb0IsUUFBcEIsQ0FBTjtJQUNELENBRlEsQ0FBVDtJQUdBUixFQUFFLENBQUMsNEJBQUQsRUFBK0Isa0JBQWtCO01BQ2pELE1BQU1XLElBQUksR0FBRztRQUFDQyxXQUFXLEVBQUU7TUFBZCxDQUFiO01BQ0EsTUFBTVgsR0FBRyxHQUFHLE1BQU1WLE9BQU8sQ0FBQ2lCLE9BQVIsQ0FBZ0IsVUFBaEIsRUFBNEIsTUFBNUIsRUFBb0M7UUFBQ0ssWUFBWSxFQUFFO1VBQUNDLFdBQVcsRUFBRUg7UUFBZDtNQUFmLENBQXBDLENBQWxCO01BQ0FWLEdBQUcsQ0FBQ1ksWUFBSixDQUFpQkMsV0FBakIsQ0FBNkJULE1BQTdCLENBQW9DVSxJQUFwQyxDQUF5Q0MsUUFBekMsQ0FBa0QsYUFBbEQ7TUFDQXpCLE9BQU8sQ0FBQzBCLFNBQVIsQ0FBa0JaLE1BQWxCLENBQXlCVSxJQUF6QixDQUE4QkcsTUFBOUIsQ0FBcUMsRUFBckM7SUFDRCxDQUxDLENBQUY7RUFNRCxDQVZPLENBQVI7RUFXQTVCLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFZO0lBQ3JDNkIsVUFBVSxDQUFDLGtCQUFrQjtNQUMzQixNQUFNNUIsT0FBTyxDQUFDaUIsT0FBUixDQUFnQixVQUFoQixFQUE0QixNQUE1QixFQUFvQztRQUFDWSxtQkFBbUIsRUFBRTtNQUF0QixDQUFwQyxDQUFOO0lBQ0QsQ0FGUyxDQUFWO0lBR0FwQixFQUFFLENBQUMsdUJBQUQsRUFBMEIsa0JBQWtCO01BQzVDLE1BQU1DLEdBQUcsR0FBRyxNQUFNVixPQUFPLENBQUNpQixPQUFSLENBQWdCLEVBQWhCLEVBQW9CLFFBQXBCLENBQWxCO01BQ0FILE1BQU0sQ0FBQ2dCLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQnJCLEdBQWpCO0lBQ0QsQ0FIQyxDQUFGO0VBSUQsQ0FSTyxDQUFSO0FBU0QsQ0ExQ08sQ0FBUiJ9