"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixCaps = fixCaps;
exports.isW3cCaps = isW3cCaps;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

function isW3cCaps(caps) {
  if (!_lodash.default.isPlainObject(caps)) {
    return false;
  }

  const isFirstMatchValid = () => _lodash.default.isArray(caps.firstMatch) && !_lodash.default.isEmpty(caps.firstMatch) && _lodash.default.every(caps.firstMatch, _lodash.default.isPlainObject);

  const isAlwaysMatchValid = () => _lodash.default.isPlainObject(caps.alwaysMatch);

  if (_lodash.default.has(caps, 'firstMatch') && _lodash.default.has(caps, 'alwaysMatch')) {
    return isFirstMatchValid() && isAlwaysMatchValid();
  }

  if (_lodash.default.has(caps, 'firstMatch')) {
    return isFirstMatchValid();
  }

  if (_lodash.default.has(caps, 'alwaysMatch')) {
    return isAlwaysMatchValid();
  }

  return false;
}

function fixCaps(originalCaps, desiredCapConstraints, log) {
  let caps = _lodash.default.clone(originalCaps);

  let booleanCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isBoolean === true));

  for (let cap of booleanCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.toLowerCase();

      if (value === 'true' || value === 'false') {
        log.warn(`Capability '${cap}' changed from string to boolean. This may cause unexpected behavior`);
        caps[cap] = value === 'true';
      }
    }
  }

  let intCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isNumber === true));

  for (let cap of intCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.trim();
      let newValue = parseInt(value, 10);

      if (value !== `${newValue}`) {
        newValue = parseFloat(value);
      }

      log.warn(`Capability '${cap}' changed from string ('${value}') to integer (${newValue}). This may cause unexpected behavior`);
      caps[cap] = newValue;
    }
  }

  return caps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1czY0NhcHMiLCJjYXBzIiwiXyIsImlzUGxhaW5PYmplY3QiLCJpc0ZpcnN0TWF0Y2hWYWxpZCIsImlzQXJyYXkiLCJmaXJzdE1hdGNoIiwiaXNFbXB0eSIsImV2ZXJ5IiwiaXNBbHdheXNNYXRjaFZhbGlkIiwiYWx3YXlzTWF0Y2giLCJoYXMiLCJmaXhDYXBzIiwib3JpZ2luYWxDYXBzIiwiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwibG9nIiwiY2xvbmUiLCJib29sZWFuQ2FwcyIsImtleXMiLCJwaWNrQnkiLCJrIiwiaXNCb29sZWFuIiwiY2FwIiwidmFsdWUiLCJpc1N0cmluZyIsInRvTG93ZXJDYXNlIiwid2FybiIsImludENhcHMiLCJpc051bWJlciIsInRyaW0iLCJuZXdWYWx1ZSIsInBhcnNlSW50IiwicGFyc2VGbG9hdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oZWxwZXJzL2NhcGFiaWxpdGllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtY2hlY2tcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuZnVuY3Rpb24gaXNXM2NDYXBzIChjYXBzKSB7XG4gIGlmICghXy5pc1BsYWluT2JqZWN0KGNhcHMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgaXNGaXJzdE1hdGNoVmFsaWQgPSAoKSA9PiBfLmlzQXJyYXkoY2Fwcy5maXJzdE1hdGNoKVxuICAgICYmICFfLmlzRW1wdHkoY2Fwcy5maXJzdE1hdGNoKSAmJiBfLmV2ZXJ5KGNhcHMuZmlyc3RNYXRjaCwgXy5pc1BsYWluT2JqZWN0KTtcbiAgY29uc3QgaXNBbHdheXNNYXRjaFZhbGlkID0gKCkgPT4gXy5pc1BsYWluT2JqZWN0KGNhcHMuYWx3YXlzTWF0Y2gpO1xuICBpZiAoXy5oYXMoY2FwcywgJ2ZpcnN0TWF0Y2gnKSAmJiBfLmhhcyhjYXBzLCAnYWx3YXlzTWF0Y2gnKSkge1xuICAgIHJldHVybiBpc0ZpcnN0TWF0Y2hWYWxpZCgpICYmIGlzQWx3YXlzTWF0Y2hWYWxpZCgpO1xuICB9XG4gIGlmIChfLmhhcyhjYXBzLCAnZmlyc3RNYXRjaCcpKSB7XG4gICAgcmV0dXJuIGlzRmlyc3RNYXRjaFZhbGlkKCk7XG4gIH1cbiAgaWYgKF8uaGFzKGNhcHMsICdhbHdheXNNYXRjaCcpKSB7XG4gICAgcmV0dXJuIGlzQWx3YXlzTWF0Y2hWYWxpZCgpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtDYXBhYmlsaXRpZXN9IG9yaWdpbmFsQ2Fwc1xuICogQHBhcmFtIHtDb25zdHJhaW50c30gZGVzaXJlZENhcENvbnN0cmFpbnRzXG4gKiBAcGFyYW0ge0FwcGl1bUxvZ2dlcn0gbG9nXG4gKiBAcmV0dXJucyB7Q2FwYWJpbGl0aWVzfVxuICovXG5mdW5jdGlvbiBmaXhDYXBzIChvcmlnaW5hbENhcHMsIGRlc2lyZWRDYXBDb25zdHJhaW50cywgbG9nKSB7XG4gIGxldCBjYXBzID0gXy5jbG9uZShvcmlnaW5hbENhcHMpO1xuXG4gIC8vIGJvb2xlYW4gY2FwYWJpbGl0aWVzIGNhbiBiZSBwYXNzZWQgaW4gYXMgc3RyaW5ncyAnZmFsc2UnIGFuZCAndHJ1ZSdcbiAgLy8gd2hpY2ggd2Ugd2FudCB0byB0cmFuc2xhdGUgaW50byBib29sZWFuIHZhbHVlc1xuICBsZXQgYm9vbGVhbkNhcHMgPSBfLmtleXMoXG4gICAgXy5waWNrQnkoZGVzaXJlZENhcENvbnN0cmFpbnRzLCAoaykgPT4gay5pc0Jvb2xlYW4gPT09IHRydWUpLFxuICApO1xuICBmb3IgKGxldCBjYXAgb2YgYm9vbGVhbkNhcHMpIHtcbiAgICBsZXQgdmFsdWUgPSBvcmlnaW5hbENhcHNbY2FwXTtcbiAgICBpZiAoXy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnZmFsc2UnKSB7XG4gICAgICAgIGxvZy53YXJuKFxuICAgICAgICAgIGBDYXBhYmlsaXR5ICcke2NhcH0nIGNoYW5nZWQgZnJvbSBzdHJpbmcgdG8gYm9vbGVhbi4gVGhpcyBtYXkgY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvcmAsXG4gICAgICAgICk7XG4gICAgICAgIGNhcHNbY2FwXSA9IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gaW50IGNhcGFiaWxpdGllcyBhcmUgb2Z0ZW4gc2VudCBpbiBhcyBzdHJpbmdzIGJ5IGZyYW1ld29ya3NcbiAgbGV0IGludENhcHMgPSBfLmtleXMoXG4gICAgXy5waWNrQnkoZGVzaXJlZENhcENvbnN0cmFpbnRzLCAoaykgPT4gay5pc051bWJlciA9PT0gdHJ1ZSksXG4gICk7XG4gIGZvciAobGV0IGNhcCBvZiBpbnRDYXBzKSB7XG4gICAgbGV0IHZhbHVlID0gb3JpZ2luYWxDYXBzW2NhcF07XG4gICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgIGxldCBuZXdWYWx1ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICBpZiAodmFsdWUgIT09IGAke25ld1ZhbHVlfWApIHtcbiAgICAgICAgbmV3VmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGxvZy53YXJuKFxuICAgICAgICBgQ2FwYWJpbGl0eSAnJHtjYXB9JyBjaGFuZ2VkIGZyb20gc3RyaW5nICgnJHt2YWx1ZX0nKSB0byBpbnRlZ2VyICgke25ld1ZhbHVlfSkuIFRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3JgLFxuICAgICAgKTtcbiAgICAgIGNhcHNbY2FwXSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYXBzO1xufVxuXG5leHBvcnQge1xuICBpc1czY0NhcHMsXG4gIGZpeENhcHNcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkNhcGFiaWxpdGllc30gQ2FwYWJpbGl0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuQ29uc3RyYWludHN9IENvbnN0cmFpbnRzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuQXBwaXVtTG9nZ2VyfSBBcHBpdW1Mb2dnZXJcbiAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxTQUFTQSxTQUFULENBQW9CQyxJQUFwQixFQUEwQjtFQUN4QixJQUFJLENBQUNDLGdCQUFFQyxhQUFGLENBQWdCRixJQUFoQixDQUFMLEVBQTRCO0lBQzFCLE9BQU8sS0FBUDtFQUNEOztFQUVELE1BQU1HLGlCQUFpQixHQUFHLE1BQU1GLGdCQUFFRyxPQUFGLENBQVVKLElBQUksQ0FBQ0ssVUFBZixLQUMzQixDQUFDSixnQkFBRUssT0FBRixDQUFVTixJQUFJLENBQUNLLFVBQWYsQ0FEMEIsSUFDSUosZ0JBQUVNLEtBQUYsQ0FBUVAsSUFBSSxDQUFDSyxVQUFiLEVBQXlCSixnQkFBRUMsYUFBM0IsQ0FEcEM7O0VBRUEsTUFBTU0sa0JBQWtCLEdBQUcsTUFBTVAsZ0JBQUVDLGFBQUYsQ0FBZ0JGLElBQUksQ0FBQ1MsV0FBckIsQ0FBakM7O0VBQ0EsSUFBSVIsZ0JBQUVTLEdBQUYsQ0FBTVYsSUFBTixFQUFZLFlBQVosS0FBNkJDLGdCQUFFUyxHQUFGLENBQU1WLElBQU4sRUFBWSxhQUFaLENBQWpDLEVBQTZEO0lBQzNELE9BQU9HLGlCQUFpQixNQUFNSyxrQkFBa0IsRUFBaEQ7RUFDRDs7RUFDRCxJQUFJUCxnQkFBRVMsR0FBRixDQUFNVixJQUFOLEVBQVksWUFBWixDQUFKLEVBQStCO0lBQzdCLE9BQU9HLGlCQUFpQixFQUF4QjtFQUNEOztFQUNELElBQUlGLGdCQUFFUyxHQUFGLENBQU1WLElBQU4sRUFBWSxhQUFaLENBQUosRUFBZ0M7SUFDOUIsT0FBT1Esa0JBQWtCLEVBQXpCO0VBQ0Q7O0VBQ0QsT0FBTyxLQUFQO0FBQ0Q7O0FBU0QsU0FBU0csT0FBVCxDQUFrQkMsWUFBbEIsRUFBZ0NDLHFCQUFoQyxFQUF1REMsR0FBdkQsRUFBNEQ7RUFDMUQsSUFBSWQsSUFBSSxHQUFHQyxnQkFBRWMsS0FBRixDQUFRSCxZQUFSLENBQVg7O0VBSUEsSUFBSUksV0FBVyxHQUFHZixnQkFBRWdCLElBQUYsQ0FDaEJoQixnQkFBRWlCLE1BQUYsQ0FBU0wscUJBQVQsRUFBaUNNLENBQUQsSUFBT0EsQ0FBQyxDQUFDQyxTQUFGLEtBQWdCLElBQXZELENBRGdCLENBQWxCOztFQUdBLEtBQUssSUFBSUMsR0FBVCxJQUFnQkwsV0FBaEIsRUFBNkI7SUFDM0IsSUFBSU0sS0FBSyxHQUFHVixZQUFZLENBQUNTLEdBQUQsQ0FBeEI7O0lBQ0EsSUFBSXBCLGdCQUFFc0IsUUFBRixDQUFXRCxLQUFYLENBQUosRUFBdUI7TUFDckJBLEtBQUssR0FBR0EsS0FBSyxDQUFDRSxXQUFOLEVBQVI7O01BQ0EsSUFBSUYsS0FBSyxLQUFLLE1BQVYsSUFBb0JBLEtBQUssS0FBSyxPQUFsQyxFQUEyQztRQUN6Q1IsR0FBRyxDQUFDVyxJQUFKLENBQ0csZUFBY0osR0FBSSxzRUFEckI7UUFHQXJCLElBQUksQ0FBQ3FCLEdBQUQsQ0FBSixHQUFZQyxLQUFLLEtBQUssTUFBdEI7TUFDRDtJQUNGO0VBQ0Y7O0VBR0QsSUFBSUksT0FBTyxHQUFHekIsZ0JBQUVnQixJQUFGLENBQ1poQixnQkFBRWlCLE1BQUYsQ0FBU0wscUJBQVQsRUFBaUNNLENBQUQsSUFBT0EsQ0FBQyxDQUFDUSxRQUFGLEtBQWUsSUFBdEQsQ0FEWSxDQUFkOztFQUdBLEtBQUssSUFBSU4sR0FBVCxJQUFnQkssT0FBaEIsRUFBeUI7SUFDdkIsSUFBSUosS0FBSyxHQUFHVixZQUFZLENBQUNTLEdBQUQsQ0FBeEI7O0lBQ0EsSUFBSXBCLGdCQUFFc0IsUUFBRixDQUFXRCxLQUFYLENBQUosRUFBdUI7TUFDckJBLEtBQUssR0FBR0EsS0FBSyxDQUFDTSxJQUFOLEVBQVI7TUFDQSxJQUFJQyxRQUFRLEdBQUdDLFFBQVEsQ0FBQ1IsS0FBRCxFQUFRLEVBQVIsQ0FBdkI7O01BQ0EsSUFBSUEsS0FBSyxLQUFNLEdBQUVPLFFBQVMsRUFBMUIsRUFBNkI7UUFDM0JBLFFBQVEsR0FBR0UsVUFBVSxDQUFDVCxLQUFELENBQXJCO01BQ0Q7O01BQ0RSLEdBQUcsQ0FBQ1csSUFBSixDQUNHLGVBQWNKLEdBQUksMkJBQTBCQyxLQUFNLGtCQUFpQk8sUUFBUyx1Q0FEL0U7TUFHQTdCLElBQUksQ0FBQ3FCLEdBQUQsQ0FBSixHQUFZUSxRQUFaO0lBQ0Q7RUFDRjs7RUFFRCxPQUFPN0IsSUFBUDtBQUNEIn0=