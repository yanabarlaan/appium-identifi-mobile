/**
 * @implements {SessionHandler}
 */
export class BaseDriverCore extends DriverCore implements SessionHandler {
    /** @type {Record<string,any>|undefined} */
    cliArgs: Record<string, any> | undefined;
    /**
      * @param {string} cmd
      * @param  {...any[]} args
      * @returns {Promise<any>}
      */
    executeCommand(cmd: string, ...args: any[][]): Promise<any>;
    /**
      *
      * @param {Error} err
      */
    startUnexpectedShutdown(err?: Error): Promise<void>;
    startNewCommandTimeout(): Promise<void>;
    /**
     *
     * @param {import('@appium/types').AppiumServer} server
     * @param {string} host
     * @param {number} port
     * @param {string} path
     */
    assignServer(server: import('@appium/types').AppiumServer, host: string, port: number, path: string): void;
    server: import("@appium/types").AppiumServer | undefined;
    serverHost: string | undefined;
    serverPort: number | undefined;
    serverPath: string | undefined;
    reset(): Promise<void>;
    resetOnUnexpectedShutdown: (() => void) | undefined;
    /**
       *
       * Historically the first two arguments were reserved for JSONWP capabilities.
       * Appium 2 has dropped the support of these, so now we only accept capability
       * objects in W3C format and thus allow any of the three arguments to represent
       * the latter.
       * @param {W3CCapabilities} w3cCapabilities1
       * @param {W3CCapabilities} [w3cCapabilities2]
       * @param {W3CCapabilities} [w3cCapabilities]
       * @param {DriverData[]} [driverData]
       * @returns {Promise<[string,object]>}
       */
    createSession(w3cCapabilities1: W3CCapabilities, w3cCapabilities2?: W3CCapabilities | undefined, w3cCapabilities?: W3CCapabilities | undefined, driverData?: import("@appium/types").DriverData[] | undefined): Promise<[string, object]>;
    /**
      *
      * @param {string} [sessionId]
      * @param {DriverData[]} [driverData]
      * @returns {Promise<void>}
      */
    deleteSession(sessionId?: string | undefined, driverData?: import("@appium/types").DriverData[] | undefined): Promise<void>;
}
export default BaseDriver;
export type HTTPMethod = import('@appium/types').HTTPMethod;
export type Driver = import('@appium/types').Driver;
export type ExternalDriver = import('@appium/types').ExternalDriver;
export type Capabilities = import('@appium/types').Capabilities;
export type W3CCapabilities = import('@appium/types').W3CCapabilities;
export type DriverData = import('@appium/types').DriverData;
export type UpdateServerCallback = (app: import('express').Express, httpServer: import('@appium/types').AppiumServer) => import('type-fest').Promisable<void>;
/**
 * This is used to extend {@linkcode BaseDriverCore } by the mixins and also external drivers.
 */
export type BaseDriverBase<Proto = {}, Static = {}> = import('@appium/types').Class<BaseDriverCore & Proto, BaseDriverStatic & Static>;
/**
 * Static properties of `BaseDriver` and optional properties for subclasses.
 */
export type BaseDriverStatic<T extends import("@appium/types").ExternalDriver = import("@appium/types").ExternalDriver> = {
    baseVersion: string;
    updateServer?: UpdateServerCallback | undefined;
    newMethodMap?: import("@appium/types").MethodMap<T> | undefined;
};
export type SessionHandler = import('@appium/types').SessionHandler<[string, object], void>;
import { DriverCore } from "./core";
declare const BaseDriver_base: import("./commands/session").SessionBase;
/**
 * This ensures that all of the mixins correctly implement the interface described in {@linkcode Driver}.
 * @implements {Driver}
 */
export class BaseDriver extends BaseDriver_base implements Driver {
}
//# sourceMappingURL=driver.d.ts.map