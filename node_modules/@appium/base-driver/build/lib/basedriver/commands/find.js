"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindMixin = FindMixin;

require("source-map-support/register");

var _protocol = require("../../protocol");

function FindMixin(Base) {
  class FindCommands extends Base {
    async findElement(strategy, selector) {
      return await this.findElOrElsWithProcessing(strategy, selector, false);
    }

    async findElements(strategy, selector) {
      return await this.findElOrElsWithProcessing(strategy, selector, true);
    }

    async findElementFromElement(strategy, selector, elementId) {
      return await this.findElOrElsWithProcessing(strategy, selector, false, elementId);
    }

    async findElementsFromElement(strategy, selector, elementId) {
      return await this.findElOrElsWithProcessing(strategy, selector, true, elementId);
    }

    async findElOrEls(strategy, selector, mult, context) {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for find.');
    }

    async getPageSource() {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for find.');
    }

    async findElOrElsWithProcessing(strategy, selector, mult, context) {
      this.validateLocatorStrategy(strategy);

      try {
        return await this.findElOrEls(strategy, selector, mult, context);
      } catch (err) {
        if (this.opts.printPageSourceOnFindFailure) {
          const src = await this.getPageSource();
          this.log.debug(`Error finding element${mult ? 's' : ''}: ${err.message}`);
          this.log.debug(`Page source requested through 'printPageSourceOnFindFailure':`);
          this.log.debug(src);
        }

        throw err;
      }
    }

  }

  return FindCommands;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaW5kTWl4aW4iLCJCYXNlIiwiRmluZENvbW1hbmRzIiwiZmluZEVsZW1lbnQiLCJzdHJhdGVneSIsInNlbGVjdG9yIiwiZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyIsImZpbmRFbGVtZW50cyIsImZpbmRFbGVtZW50RnJvbUVsZW1lbnQiLCJlbGVtZW50SWQiLCJmaW5kRWxlbWVudHNGcm9tRWxlbWVudCIsImZpbmRFbE9yRWxzIiwibXVsdCIsImNvbnRleHQiLCJlcnJvcnMiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiZ2V0UGFnZVNvdXJjZSIsInZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5IiwiZXJyIiwib3B0cyIsInByaW50UGFnZVNvdXJjZU9uRmluZEZhaWx1cmUiLCJzcmMiLCJsb2ciLCJkZWJ1ZyIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvYmFzZWRyaXZlci9jb21tYW5kcy9maW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWF3YWl0ICovXG4vLyBAdHMtY2hlY2tcbmltcG9ydCB7ZXJyb3JzfSBmcm9tICcuLi8uLi9wcm90b2NvbCc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7RXZlbnRCYXNlfSBCYXNlXG4gKiBAcmV0dXJucyB7RmluZEJhc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGaW5kTWl4aW4gKEJhc2UpIHtcbiAgLyoqXG4gICAqIEBpbXBsZW1lbnRzIHtJRmluZENvbW1hbmRzfVxuICAgKi9cbiAgY2xhc3MgRmluZENvbW1hbmRzIGV4dGVuZHMgQmFzZSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxFbGVtZW50Pn1cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kRWxlbWVudCAoc3RyYXRlZ3ksIHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5maW5kRWxPckVsc1dpdGhQcm9jZXNzaW5nKHN0cmF0ZWd5LCBzZWxlY3RvciwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RWxlbWVudFtdPn1cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kRWxlbWVudHMgKHN0cmF0ZWd5LCBzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyhzdHJhdGVneSwgc2VsZWN0b3IsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RWxlbWVudD59XG4gICAgICovXG4gICAgYXN5bmMgZmluZEVsZW1lbnRGcm9tRWxlbWVudCAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBlbGVtZW50SWQpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmZpbmRFbE9yRWxzV2l0aFByb2Nlc3NpbmcoXG4gICAgICAgIHN0cmF0ZWd5LFxuICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGVsZW1lbnRJZCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxFbGVtZW50W10+fVxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRFbGVtZW50c0Zyb21FbGVtZW50IChzdHJhdGVneSwgc2VsZWN0b3IsIGVsZW1lbnRJZCkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyhcbiAgICAgICAgc3RyYXRlZ3ksXG4gICAgICAgIHNlbGVjdG9yLFxuICAgICAgICB0cnVlLFxuICAgICAgICBlbGVtZW50SWQsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBPdmVycmlkZSB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGZvciB5b3VyIG93biBkcml2ZXIsIGFuZCB0aGUgcmVzdCBpcyB0YWtlblxuICAgIC8vIGNhcmUgb2YhXG4gICAgLy8gUmV0dXJucyBhbiBvYmplY3Qgd2hpY2ggYWRoZXJlcyB0byB0aGUgd2F5IHRoZSBKU09OIFdpcmUgUHJvdG9jb2wgcmVwcmVzZW50cyBlbGVtZW50czpcbiAgICAvLyB7IEVMRU1FTlQ6ICMgfSAgICBlZzogeyBFTEVNRU5UOiAzIH0gIG9yIHsgRUxFTUVOVDogMS4wMjMgfVxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSB7Ym9vbGVhbn0gTXVsdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJhdGVneVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgICAqIEBwYXJhbSB7TXVsdH0gbXVsdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGV4dF1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNdWx0IGV4dGVuZHMgdHJ1ZSA/IEVsZW1lbnRbXSA6IEVsZW1lbnQ+fVxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRFbE9yRWxzIChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcignTm90IGltcGxlbWVudGVkIHlldCBmb3IgZmluZC4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldFBhZ2VTb3VyY2UgKCkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0IGZvciBmaW5kLicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUge2Jvb2xlYW59IE11bHRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyYXRlZ3lcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge011bHR9IG11bHRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRleHRdXG4gICAgICogQHJldHVybnMge1Byb21pc2U8TXVsdCBleHRlbmRzIHRydWUgPyBFbGVtZW50W10gOiBFbGVtZW50Pn1cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kRWxPckVsc1dpdGhQcm9jZXNzaW5nIChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpIHtcbiAgICAgIHRoaXMudmFsaWRhdGVMb2NhdG9yU3RyYXRlZ3koc3RyYXRlZ3kpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsT3JFbHMoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAodGhpcy5vcHRzLnByaW50UGFnZVNvdXJjZU9uRmluZEZhaWx1cmUpIHtcbiAgICAgICAgICBjb25zdCBzcmMgPSBhd2FpdCB0aGlzLmdldFBhZ2VTb3VyY2UoKTtcbiAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZyhcbiAgICAgICAgICAgIGBFcnJvciBmaW5kaW5nIGVsZW1lbnQke211bHQgPyAncycgOiAnJ306ICR7ZXJyLm1lc3NhZ2V9YCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMubG9nLmRlYnVnKFxuICAgICAgICAgICAgYFBhZ2Ugc291cmNlIHJlcXVlc3RlZCB0aHJvdWdoICdwcmludFBhZ2VTb3VyY2VPbkZpbmRGYWlsdXJlJzpgLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5sb2cuZGVidWcoc3JjKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdGlsbCB3YW50IHRoZSBlcnJvciB0byBvY2N1clxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEZpbmRDb21tYW5kcztcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkZpbmRDb21tYW5kc30gSUZpbmRDb21tYW5kc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9ldmVudCcpLkV2ZW50QmFzZX0gRXZlbnRCYXNlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9kcml2ZXInKS5CYXNlRHJpdmVyQmFzZTxpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5UaW1lb3V0Q29tbWFuZHMgJiBpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5FdmVudENvbW1hbmRzICYgSUZpbmRDb21tYW5kcz59IEZpbmRCYXNlXG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7O0FBT08sU0FBU0EsU0FBVCxDQUFvQkMsSUFBcEIsRUFBMEI7RUFJL0IsTUFBTUMsWUFBTixTQUEyQkQsSUFBM0IsQ0FBZ0M7SUFLYixNQUFYRSxXQUFXLENBQUVDLFFBQUYsRUFBWUMsUUFBWixFQUFzQjtNQUNyQyxPQUFPLE1BQU0sS0FBS0MseUJBQUwsQ0FBK0JGLFFBQS9CLEVBQXlDQyxRQUF6QyxFQUFtRCxLQUFuRCxDQUFiO0lBQ0Q7O0lBTWlCLE1BQVpFLFlBQVksQ0FBRUgsUUFBRixFQUFZQyxRQUFaLEVBQXNCO01BQ3RDLE9BQU8sTUFBTSxLQUFLQyx5QkFBTCxDQUErQkYsUUFBL0IsRUFBeUNDLFFBQXpDLEVBQW1ELElBQW5ELENBQWI7SUFDRDs7SUFNMkIsTUFBdEJHLHNCQUFzQixDQUFFSixRQUFGLEVBQVlDLFFBQVosRUFBc0JJLFNBQXRCLEVBQWlDO01BQzNELE9BQU8sTUFBTSxLQUFLSCx5QkFBTCxDQUNYRixRQURXLEVBRVhDLFFBRlcsRUFHWCxLQUhXLEVBSVhJLFNBSlcsQ0FBYjtJQU1EOztJQU00QixNQUF2QkMsdUJBQXVCLENBQUVOLFFBQUYsRUFBWUMsUUFBWixFQUFzQkksU0FBdEIsRUFBaUM7TUFDNUQsT0FBTyxNQUFNLEtBQUtILHlCQUFMLENBQ1hGLFFBRFcsRUFFWEMsUUFGVyxFQUdYLElBSFcsRUFJWEksU0FKVyxDQUFiO0lBTUQ7O0lBYWdCLE1BQVhFLFdBQVcsQ0FBRVAsUUFBRixFQUFZQyxRQUFaLEVBQXNCTyxJQUF0QixFQUE0QkMsT0FBNUIsRUFBcUM7TUFDcEQsTUFBTSxJQUFJQyxpQkFBT0MsbUJBQVgsQ0FBK0IsK0JBQS9CLENBQU47SUFDRDs7SUFLa0IsTUFBYkMsYUFBYSxHQUFJO01BQ3JCLE1BQU0sSUFBSUYsaUJBQU9DLG1CQUFYLENBQStCLCtCQUEvQixDQUFOO0lBQ0Q7O0lBUzhCLE1BQXpCVCx5QkFBeUIsQ0FBRUYsUUFBRixFQUFZQyxRQUFaLEVBQXNCTyxJQUF0QixFQUE0QkMsT0FBNUIsRUFBcUM7TUFDbEUsS0FBS0ksdUJBQUwsQ0FBNkJiLFFBQTdCOztNQUNBLElBQUk7UUFDRixPQUFPLE1BQU0sS0FBS08sV0FBTCxDQUFpQlAsUUFBakIsRUFBMkJDLFFBQTNCLEVBQXFDTyxJQUFyQyxFQUEyQ0MsT0FBM0MsQ0FBYjtNQUNELENBRkQsQ0FFRSxPQUFPSyxHQUFQLEVBQVk7UUFDWixJQUFJLEtBQUtDLElBQUwsQ0FBVUMsNEJBQWQsRUFBNEM7VUFDMUMsTUFBTUMsR0FBRyxHQUFHLE1BQU0sS0FBS0wsYUFBTCxFQUFsQjtVQUNBLEtBQUtNLEdBQUwsQ0FBU0MsS0FBVCxDQUNHLHdCQUF1QlgsSUFBSSxHQUFHLEdBQUgsR0FBUyxFQUFHLEtBQUlNLEdBQUcsQ0FBQ00sT0FBUSxFQUQxRDtVQUdBLEtBQUtGLEdBQUwsQ0FBU0MsS0FBVCxDQUNHLCtEQURIO1VBR0EsS0FBS0QsR0FBTCxDQUFTQyxLQUFULENBQWVGLEdBQWY7UUFDRDs7UUFFRCxNQUFNSCxHQUFOO01BQ0Q7SUFDRjs7RUExRjZCOztFQTZGaEMsT0FBT2hCLFlBQVA7QUFDRCJ9