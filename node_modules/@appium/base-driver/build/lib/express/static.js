"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STATIC_DIR = void 0;
exports.guineaPig = guineaPig;
exports.guineaPigAppBanner = guineaPigAppBanner;
exports.guineaPigScrollable = guineaPigScrollable;
exports.welcome = welcome;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _bluebird = _interopRequireDefault(require("bluebird"));

let STATIC_DIR = _path.default.resolve(__dirname, '..', '..', '..', 'static');

exports.STATIC_DIR = STATIC_DIR;

if (_lodash.default.isNull(_path.default.resolve(__dirname).match(/build[/\\]lib[/\\]express$/))) {
  exports.STATIC_DIR = STATIC_DIR = _path.default.resolve(__dirname, '..', '..', 'static');
}

async function guineaPigTemplate(req, res, page) {
  const delay = parseInt(req.params.delay || req.query.delay || 0, 10);
  const throwError = req.params.throwError || req.query.throwError || '';
  let params = {
    throwError,
    serverTime: new Date(),
    userAgent: req.headers['user-agent'],
    comment: 'None'
  };

  if (req.method === 'POST') {
    params.comment = req.body.comments || params.comment;
  }

  _logger.default.debug(`Sending guinea pig response with params: ${JSON.stringify(params)}`);

  if (delay) {
    _logger.default.debug(`Waiting ${delay}ms before responding`);

    await _bluebird.default.delay(delay);
  }

  res.set('content-type', 'text/html');
  res.cookie('guineacookie1', 'i am a cookie value', {
    path: '/'
  });
  res.cookie('guineacookie2', 'cooki√©2', {
    path: '/'
  });
  res.cookie('guineacookie3', 'cant access this', {
    domain: '.blargimarg.com',
    path: '/'
  });
  res.send((await getTemplate(page))(params));
}

async function guineaPig(req, res) {
  return await guineaPigTemplate(req, res, 'guinea-pig.html');
}

async function guineaPigScrollable(req, res) {
  return await guineaPigTemplate(req, res, 'guinea-pig-scrollable.html');
}

async function guineaPigAppBanner(req, res) {
  return await guineaPigTemplate(req, res, 'guinea-pig-app-banner.html');
}

async function welcome(req, res) {
  let params = {
    message: 'Let\'s browse!'
  };

  _logger.default.debug(`Sending welcome response with params: ${JSON.stringify(params)}`);

  res.send((await getTemplate('welcome.html'))(params));
}

async function getTemplate(templateName) {
  let content = await _support.fs.readFile(_path.default.resolve(STATIC_DIR, 'test', templateName));
  return _lodash.default.template(content.toString());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTVEFUSUNfRElSIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJfIiwiaXNOdWxsIiwibWF0Y2giLCJndWluZWFQaWdUZW1wbGF0ZSIsInJlcSIsInJlcyIsInBhZ2UiLCJkZWxheSIsInBhcnNlSW50IiwicGFyYW1zIiwicXVlcnkiLCJ0aHJvd0Vycm9yIiwic2VydmVyVGltZSIsIkRhdGUiLCJ1c2VyQWdlbnQiLCJoZWFkZXJzIiwiY29tbWVudCIsIm1ldGhvZCIsImJvZHkiLCJjb21tZW50cyIsImxvZyIsImRlYnVnIiwiSlNPTiIsInN0cmluZ2lmeSIsIkIiLCJzZXQiLCJjb29raWUiLCJkb21haW4iLCJzZW5kIiwiZ2V0VGVtcGxhdGUiLCJndWluZWFQaWciLCJndWluZWFQaWdTY3JvbGxhYmxlIiwiZ3VpbmVhUGlnQXBwQmFubmVyIiwid2VsY29tZSIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZU5hbWUiLCJjb250ZW50IiwiZnMiLCJyZWFkRmlsZSIsInRlbXBsYXRlIiwidG9TdHJpbmciXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZXhwcmVzcy9zdGF0aWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxubGV0IFNUQVRJQ19ESVIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nLCAnc3RhdGljJyk7XG5pZiAoXy5pc051bGwocGF0aC5yZXNvbHZlKF9fZGlybmFtZSkubWF0Y2goL2J1aWxkWy9cXFxcXWxpYlsvXFxcXF1leHByZXNzJC8pKSkge1xuICAvLyBpbiBzb21lIGNvbnRleHRzIHdlIGFyZSBub3QgaW4gdGhlIGJ1aWxkIGRpcmVjdG9yeSxcbiAgLy8gc28gd2UgZG9uJ3Qgd2FudCB0byBnbyBiYWNrIHRoZSBleHRyYSBsZXZlbFxuICBTVEFUSUNfRElSID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3N0YXRpYycpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBndWluZWFQaWdUZW1wbGF0ZSAocmVxLCByZXMsIHBhZ2UpIHtcbiAgY29uc3QgZGVsYXkgPSBwYXJzZUludChyZXEucGFyYW1zLmRlbGF5IHx8IHJlcS5xdWVyeS5kZWxheSB8fCAwLCAxMCk7XG4gIGNvbnN0IHRocm93RXJyb3IgPSByZXEucGFyYW1zLnRocm93RXJyb3IgfHwgcmVxLnF1ZXJ5LnRocm93RXJyb3IgfHwgJyc7XG4gIGxldCBwYXJhbXMgPSB7XG4gICAgdGhyb3dFcnJvcixcbiAgICBzZXJ2ZXJUaW1lOiBuZXcgRGF0ZSgpLFxuICAgIHVzZXJBZ2VudDogcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXSxcbiAgICBjb21tZW50OiAnTm9uZSdcbiAgfTtcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xuICAgIHBhcmFtcy5jb21tZW50ID0gcmVxLmJvZHkuY29tbWVudHMgfHwgcGFyYW1zLmNvbW1lbnQ7XG4gIH1cbiAgbG9nLmRlYnVnKGBTZW5kaW5nIGd1aW5lYSBwaWcgcmVzcG9uc2Ugd2l0aCBwYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zKX1gKTtcbiAgaWYgKGRlbGF5KSB7XG4gICAgbG9nLmRlYnVnKGBXYWl0aW5nICR7ZGVsYXl9bXMgYmVmb3JlIHJlc3BvbmRpbmdgKTtcbiAgICBhd2FpdCBCLmRlbGF5KGRlbGF5KTtcbiAgfVxuICByZXMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9odG1sJyk7XG4gIHJlcy5jb29raWUoJ2d1aW5lYWNvb2tpZTEnLCAnaSBhbSBhIGNvb2tpZSB2YWx1ZScsIHtwYXRoOiAnLyd9KTtcbiAgcmVzLmNvb2tpZSgnZ3VpbmVhY29va2llMicsICdjb29racOpMicsIHtwYXRoOiAnLyd9KTtcbiAgcmVzLmNvb2tpZSgnZ3VpbmVhY29va2llMycsICdjYW50IGFjY2VzcyB0aGlzJywge1xuICAgIGRvbWFpbjogJy5ibGFyZ2ltYXJnLmNvbScsXG4gICAgcGF0aDogJy8nXG4gIH0pO1xuICByZXMuc2VuZCgoYXdhaXQgZ2V0VGVtcGxhdGUocGFnZSkpKHBhcmFtcykpO1xufVxuXG4vKlxuICogRHluYW1pYyBwYWdlIG1hcHBlZCB0byAvdGVzdC9ndWluZWEtcGlnXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGd1aW5lYVBpZyAocmVxLCByZXMpIHtcbiAgcmV0dXJuIGF3YWl0IGd1aW5lYVBpZ1RlbXBsYXRlKHJlcSwgcmVzLCAnZ3VpbmVhLXBpZy5odG1sJyk7XG59XG5cbi8qXG4gKiBEeW5hbWljIHBhZ2UgbWFwcGVkIHRvIC90ZXN0L2d1aW5lYS1waWctc2Nyb2xsYWJsZVxuICovXG5hc3luYyBmdW5jdGlvbiBndWluZWFQaWdTY3JvbGxhYmxlIChyZXEsIHJlcykge1xuICByZXR1cm4gYXdhaXQgZ3VpbmVhUGlnVGVtcGxhdGUocmVxLCByZXMsICdndWluZWEtcGlnLXNjcm9sbGFibGUuaHRtbCcpO1xufVxuXG4vKlxuICogRHluYW1pYyBwYWdlIG1hcHBlZCB0byAvdGVzdC9ndWluZWEtcGlnLWFwcC1iYW5uZXJcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ3VpbmVhUGlnQXBwQmFubmVyIChyZXEsIHJlcykge1xuICByZXR1cm4gYXdhaXQgZ3VpbmVhUGlnVGVtcGxhdGUocmVxLCByZXMsICdndWluZWEtcGlnLWFwcC1iYW5uZXIuaHRtbCcpO1xufVxuXG4vKlxuICogRHluYW1pYyBwYWdlIG1hcHBlZCB0byAvd2VsY29tZVxuICovXG5hc3luYyBmdW5jdGlvbiB3ZWxjb21lIChyZXEsIHJlcykge1xuICBsZXQgcGFyYW1zID0ge21lc3NhZ2U6ICdMZXRcXCdzIGJyb3dzZSEnfTtcbiAgbG9nLmRlYnVnKGBTZW5kaW5nIHdlbGNvbWUgcmVzcG9uc2Ugd2l0aCBwYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zKX1gKTtcbiAgcmVzLnNlbmQoKGF3YWl0IGdldFRlbXBsYXRlKCd3ZWxjb21lLmh0bWwnKSkocGFyYW1zKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRlbXBsYXRlICh0ZW1wbGF0ZU5hbWUpIHtcbiAgbGV0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoU1RBVElDX0RJUiwgJ3Rlc3QnLCB0ZW1wbGF0ZU5hbWUpKTtcbiAgcmV0dXJuIF8udGVtcGxhdGUoY29udGVudC50b1N0cmluZygpKTtcbn1cblxuZXhwb3J0IHsgZ3VpbmVhUGlnLCBndWluZWFQaWdTY3JvbGxhYmxlLCBndWluZWFQaWdBcHBCYW5uZXIsIHdlbGNvbWUsIFNUQVRJQ19ESVIgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsVUFBVSxHQUFHQyxjQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsSUFBeEIsRUFBOEIsSUFBOUIsRUFBb0MsSUFBcEMsRUFBMEMsUUFBMUMsQ0FBakI7Ozs7QUFDQSxJQUFJQyxnQkFBRUMsTUFBRixDQUFTSixjQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0JHLEtBQXhCLENBQThCLDRCQUE5QixDQUFULENBQUosRUFBMkU7RUFHekUscUJBQUFOLFVBQVUsR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLFFBQXBDLENBQWI7QUFDRDs7QUFFRCxlQUFlSSxpQkFBZixDQUFrQ0MsR0FBbEMsRUFBdUNDLEdBQXZDLEVBQTRDQyxJQUE1QyxFQUFrRDtFQUNoRCxNQUFNQyxLQUFLLEdBQUdDLFFBQVEsQ0FBQ0osR0FBRyxDQUFDSyxNQUFKLENBQVdGLEtBQVgsSUFBb0JILEdBQUcsQ0FBQ00sS0FBSixDQUFVSCxLQUE5QixJQUF1QyxDQUF4QyxFQUEyQyxFQUEzQyxDQUF0QjtFQUNBLE1BQU1JLFVBQVUsR0FBR1AsR0FB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