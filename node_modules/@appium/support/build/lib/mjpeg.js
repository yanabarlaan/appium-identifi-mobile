"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MJpegStream = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _imageUtil = require("./image-util");

var _stream = require("stream");

var _node = require("./node");

var _axios = _interopRequireDefault(require("axios"));

let MJpegConsumer = null;

async function initMJpegConsumer() {
  if (!MJpegConsumer) {
    try {
      MJpegConsumer = await (0, _node.requirePackage)('mjpeg-consumer');
    } catch (ign) {}
  }

  if (!MJpegConsumer) {
    throw new Error('mjpeg-consumer module is required to use MJPEG-over-HTTP features. ' + 'Please install it first (npm i -g mjpeg-consumer) and restart Appium.');
  }
}

const MJPEG_SERVER_TIMEOUT_MS = 10000;

class MJpegStream extends _stream.Writable {
  updateCount = 0;

  constructor(mJpegUrl, errorHandler = _lodash.default.noop, options = {}) {
    super(options);
    this.errorHandler = errorHandler;
    this.url = mJpegUrl;
    this.clear();
  }

  get lastChunkBase64() {
    const lastChunk = this.lastChunk;
    return !_lodash.default.isEmpty(this.lastChunk) && _lodash.default.isBuffer(this.lastChunk) ? lastChunk.toString('base64') : null;
  }

  async lastChunkPNG() {
    const lastChunk = this.lastChunk;

    if (_lodash.default.isEmpty(lastChunk) || !_lodash.default.isBuffer(lastChunk)) {
      return null;
    }

    try {
      const jpg = await (0, _imageUtil.getJimpImage)(lastChunk);
      return await jpg.getBuffer(_imageUtil.MIME_PNG);
    } catch (e) {
      return null;
    }
  }

  async lastChunkPNGBase64() {
    const png = await this.lastChunkPNG();
    return png ? png.toString('base64') : null;
  }

  clear() {
    this.registerStartSuccess = null;
    this.registerStartFailure = null;
    this.responseStream = null;
    this.consumer = null;
    this.lastChunk = null;
    this.updateCount = 0;
  }

  async start(serverTimeout = MJPEG_SERVER_TIMEOUT_MS) {
    this.stop();
    await initMJpegConsumer();
    this.consumer = new MJpegConsumer();
    const startPromise = new _bluebird.default((res, rej) => {
      this.registerStartSuccess = res;
      this.registerStartFailure = rej;
    }).timeout(serverTimeout, `Waited ${serverTimeout}ms but the MJPEG server never sent any images`);
    const url = this.url;

    const onErr = err => {
      this.lastChunk = null;

      _logger.default.error(`Error getting MJpeg screenshot chunk: ${err.message}`);

      this.errorHandler(err);

      if (this.registerStartFailure) {
        this.registerStartFailure(err);
      }
    };

    const onClose = () => {
      _logger.default.debug(`The connection to MJPEG server at ${url} has been closed`);

      this.lastChunk = null;
    };

    try {
      this.responseStream = (await (0, _axios.default)({
        url,
        responseType: 'stream',
        timeout: serverTimeout
      })).data;
    } catch (e) {
      return onErr(e);
    }

    this.responseStream.once('close', onClose).on('error', onErr).pipe(this.consumer).pipe(this);
    await startPromise;
  }

  stop() {
    if (!this.consumer) {
      return;
    }

    this.responseStream.unpipe(this.consumer);
    this.consumer.unpipe(this);
    this.responseStream.destroy();
    this.clear();
  }

  write(data) {
    this.lastChunk = data;
    this.updateCount++;

    if (this.registerStartSuccess) {
      this.registerStartSuccess();
      this.registerStartSuccess = null;
    }

    return true;
  }

}

exports.MJpegStream = MJpegStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,