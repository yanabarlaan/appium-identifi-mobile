/**
 * @extends {ExtensionConfig<PluginType>}
 */
export class PluginConfig extends ExtensionConfig<"plugin"> {
    /**
     * A mapping of {@link Manifest} instances to {@link PluginConfig} instances.
     *
     * `Manifest` and {@link ExtensionConfig} have a one-to-many relationship; each `Manifest` should be associated with a `DriverConfig` and a `PluginConfig`; no more, no less.
     *
     * This variable tracks the `Manifest`-to-`PluginConfig` portion.
     *
     * @type {WeakMap<Manifest,PluginConfig>}
     * @private
     */
    private static _instances;
    /**
     * Creates a new {@link PluginConfig} instance for a {@link Manifest} instance.
     *
     * @param {Manifest} manifest
     * @param {PluginConfigOptions} [opts]
     * @throws If `manifest` already associated with a `PluginConfig`
     * @returns {PluginConfig}
     */
    static create(manifest: Manifest, { extData, logFn }?: PluginConfigOptions | undefined): PluginConfig;
    /**
      * Returns a PluginConfig associated with a Manifest
      * @param {Manifest} manifest
      * @returns {PluginConfig|undefined}
      */
    static getInstance(manifest: Manifest): PluginConfig | undefined;
    /**
    * Call {@link PluginConfig.create} instead.
    *
    * Just calls the superclass' constructor with the correct extension type
    * @private
    * @param {Manifest} manifest - IO object
    * @param {PluginConfigOptions} [opts]
    */
    private constructor();
    /**
    *
    * @param {(keyof PluginRecord)[]} activeNames
    * @returns {void}
    */
    print(activeNames: (keyof PluginRecord)[]): void;
}
export type PluginConfigOptions = {
    /**
     * - Optional logging function
     */
    logFn?: import("./extension-config").ExtensionLogFn | undefined;
    /**
     * - Extension data
     */
    extData?: import("../../types").PluginRecord | undefined;
};
export type PluginRecord = import('../../types/appium-manifest').PluginRecord;
export type PluginType = import('../../types').PluginType;
export type PluginMetadata = import('../../types/external-manifest').ExtMetadata<PluginType>;
export type Manifest = import('./manifest').Manifest;
import { ExtensionConfig } from "./extension-config";
//# sourceMappingURL=plugin-config.d.ts.map