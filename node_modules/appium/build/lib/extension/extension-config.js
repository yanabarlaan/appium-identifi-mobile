"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INSTALL_TYPE_NPM = exports.INSTALL_TYPE_LOCAL = exports.INSTALL_TYPE_GITHUB = exports.INSTALL_TYPE_GIT = exports.INSTALL_TYPES = exports.ExtensionConfig = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _logger = _interopRequireDefault(require("../logger"));

var _schema = require("../schema/schema");

const INSTALL_TYPE_NPM = 'npm';
exports.INSTALL_TYPE_NPM = INSTALL_TYPE_NPM;
const INSTALL_TYPE_LOCAL = 'local';
exports.INSTALL_TYPE_LOCAL = INSTALL_TYPE_LOCAL;
const INSTALL_TYPE_GITHUB = 'github';
exports.INSTALL_TYPE_GITHUB = INSTALL_TYPE_GITHUB;
const INSTALL_TYPE_GIT = 'git';
exports.INSTALL_TYPE_GIT = INSTALL_TYPE_GIT;
const INSTALL_TYPES = new Set([INSTALL_TYPE_GIT, INSTALL_TYPE_GITHUB, INSTALL_TYPE_LOCAL, INSTALL_TYPE_NPM]);
exports.INSTALL_TYPES = INSTALL_TYPES;

class ExtensionConfig {
  extensionType;
  configKey;
  installedExtensions;
  log;
  manifest;

  constructor(extensionType, manifest, logFn) {
    const logger = _lodash.default.isFunction(logFn) ? logFn : _logger.default.error.bind(_logger.default);
    this.extensionType = extensionType;
    this.configKey = `${extensionType}s`;
    this.installedExtensions = manifest.getExtensionData(extensionType);
    this.log = logger;
    this.manifest = manifest;
  }

  get manifestPath() {
    return this.manifest.manifestPath;
  }

  get appiumHome() {
    return this.manifest.appiumHome;
  }

  validate(exts) {
    const foundProblems = {};

    for (const [extName, extData] of _lodash.default.toPairs(exts)) {
      foundProblems[extName] = [...this.getGenericConfigProblems(extData, extName), ...this.getConfigProblems(extData), ...this.getSchemaProblems(extData, extName)];
    }

    const problemSummaries = [];

    for (const [extName, problems] of _lodash.default.toPairs(foundProblems)) {
      if (_lodash.default.isEmpty(problems)) {
        continue;
      }

      delete exts[extName];
      problemSummaries.push(`${this.extensionType} ${extName} had errors and will not ` + `be available. Errors:`);

      for (const problem of problems) {
        problemSummaries.push(`  - ${problem.err} (Actual value: ` + `${JSON.stringify(problem.val)})`);
      }
    }

    if (!_lodash.default.isEmpty(problemSummaries)) {
      this.log(`Appium encountered one or more errors while validating ` + `the ${this.configKey} extension file (${this.manifestPath}):`);

      for (const summary of problemSummaries) {
        this.log(summary);
      }
    }

    return exts;
  }

  getSchemaProblems(extData, extName) {
    const problems = [];
    const {
      schema: argSchemaPath
    } = extData;

    if (ExtensionConfig.extDataHasSchema(extData)) {
      if (_lodash.default.isString(argSchemaPath)) {
        if ((0, _schema.isAllowedSchemaFileExtension)(argSchemaPath)) {
          try {
            this.readExtensionSchema(extName, extData);
          } catch (err) {
            problems.push({
              err: `Unable to register schema at path ${argSchemaPath}; ${err.message}`,
              val: argSchemaPath
            });
          }
        } else {
          problems.push({
            err: `Schema file has unsupported extension. Allowed: ${[..._schema.ALLOWED_SCHEMA_EXTENSIONS].join(', ')}`,
            val: argSchemaPath
          });
        }
      } else if (_lodash.default.isPlainObject(argSchemaPath)) {
        try {
          this.readExtensionSchema(extName, extData);
        } catch (err) {
          problems.push({
            err: `Unable to register embedded schema; ${err.message}`,
            val: argSchemaPath
          });
        }
      } else {
        problems.push({
          err: 'Incorrectly formatted schema field; must be a path to a schema file or a schema object.',
          val: argSchemaPath
        });
      }
    }

    return problems;
  }

  getGenericConfigProblems(extData, extName) {
    const {
      version,
      pkgName,
      installSpec,
      installType,
      mainClass
    } = extData;
    const problems = [];

    if (!_lodash.default.isString(version)) {
      problems.push({
        err: 'Missing or incorrect version',
        val: version
      });
    }

    if (!_lodash.default.isString(pkgName)) {
      problems.push({
        err: 'Missing or incorrect NPM package name',
        val: pkgName
      });
    }

    if (!_lodash.default.isString(installSpec)) {
      problems.push({
        err: 'Missing or incorrect installation spec',
        val: installSpec
      });
    }

    if (!INSTALL_TYPES.has(installType)) {
      problems.push({
        err: 'Missing or incorrect install type',
        val: installType
      });
    }

    if (!_lodash.default.isString(mainClass)) {
      problems.push({
        err: 'Missing or incorrect driver class name',
        val: mainClass
      });
    }

    return problems;
  }

  getConfigProblems(extData) {
    return [];
  }

  async addExtension(extName, extData, {
    write = true
  } = {}) {
    this.manifest.addExtension(this.extensionType, extName, extData);

    if (write) {
      await this.manifest.write();
    }
  }

  async updateExtension(extName, extData, {
    write = true
  } = {}) {
    this.installedExtensions[extName] = { ...this.installedExtensions[extName],
      ...extData
    };

    if (write) {
      await this.manifest.write();
    }
  }

  async removeExtension(extName, {
    write = true
  } = {}) {
    delete this.installedExtensions[extName];

    if (write) {
      await this.manifest.write();
    }
  }

  print(activeNames) {
    if (_lodash.default.isEmpty(this.installedExtensions)) {
      _logger.default.info(`No ${this.configKey} have been installed in ${this.appiumHome}. Use the "appium ${this.extensionType}" ` + 'command to install the one(s) you want to use.');

      return;
    }

    _logger.default.info(`Available ${this.configKey}:`);

    for (const [extName, extData] of _lodash.default.toPairs(this.installedExtensions)) {
      _logger.default.info(`  - ${this.extensionDesc(extName, extData)}`);
    }
  }

  extensionDesc(extName, extData) {
    throw new Error('This must be implemented in a subclass');
  }

  getInstallPath(extName) {
    return _path.default.join(this.appiumHome, 'node_modules', this.installedExtensions[extName].pkgName);
  }

  require(extName) {
    const {
      mainClass
    } = this.installedExtensions[extName];
    const reqPath = this.getInstallPath(extName);

    const reqResolved = require.resolve(reqPath);

    if (process.env.APPIUM_RELOAD_EXTENSIONS && require.cache[reqResolved]) {
      _logger.default.debug(`Removing ${reqResolved} from require cache`);

      delete require.cache[reqResolved];
    }

    _logger.default.debug(`Requiring ${this.extensionType} at ${reqPath}`);

    return require(reqPath)[mainClass];
  }

  isInstalled(extName) {
    return _lodash.default.includes(Object.keys(this.installedExtensions), extName);
  }

  static _readExtensionSchema(appiumHome, extType, extName, extData) {
    const {
      pkgName,
      schema: argSchemaPath
    } = extData;

    if (!argSchemaPath) {
      throw new TypeError(`No \`schema\` property found in config for ${extType} ${pkgName} -- why is this function being called?`);
    }

    let moduleObject;

    if (_lodash.default.isString(argSchemaPath)) {
      const schemaPath = (0, _resolveFrom.default)(appiumHome, _path.default.join(pkgName, argSchemaPath));
      moduleObject = require(schemaPath);
    } else {
      moduleObject = argSchemaPath;
    }

    const schema = moduleObject.__esModule ? moduleObject.default : moduleObject;
    (0, _schema.registerSchema)(extType, extName, schema);
    return schema;
  }

  static extDataHasSchema(extData) {
    return _lodash.default.isString(extData === null || extData === void 0 ? void 0 : extData.schema) || _lodash.default.isObject(extData === null || extData === void 0 ? void 0 : extData.schema);
  }

  readExtensionSchema(extName, extData) {
    return ExtensionConfig._readExtensionSchema(this.appiumHome, this.extensionType, extName, extData);
  }

}

exports.ExtensionConfig = ExtensionConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,