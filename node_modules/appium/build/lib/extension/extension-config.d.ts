/**
 * This class is abstract. It should not be instantiated directly.
 *
 * Subclasses should provide the generic parameter to implement.
 * @template {ExtensionType} ExtType
 */
export class ExtensionConfig<ExtType extends import("../../types").ExtensionType> {
    /**
     * Intended to be called by corresponding instance methods of subclass.
     * @private
     * @template {ExtensionType} ExtType
     * @param {string} appiumHome
     * @param {ExtType} extType
     * @param {ExtName<ExtType>} extName - Extension name (unique to its type)
     * @param {ExtManifestWithSchema<ExtType>} extData - Extension config
     * @returns {import('ajv').SchemaObject|undefined}
     */
    private static _readExtensionSchema;
    /**
     * Returns `true` if a specific {@link ExtManifest} object has a `schema` prop.
     * The {@link ExtManifest} object becomes a {@link ExtManifestWithSchema} object.
     * @template {ExtensionType} ExtType
     * @param {ExtManifest<ExtType>} extData
     * @returns {extData is ExtManifestWithSchema<ExtType>}
     */
    static extDataHasSchema<ExtType_1 extends import("../../types").ExtensionType>(extData: ExtManifest<ExtType_1>): extData is ExtManifestWithSchema<ExtType_1>;
    /**
     * @protected
     * @param {ExtType} extensionType - Type of extension
     * @param {Manifest} manifest - `Manifest` instance
     * @param {ExtensionLogFn} [logFn]
     */
    protected constructor();
    /** @type {ExtType} */
    extensionType: ExtType;
    /** @type {`${ExtType}s`} */
    configKey: `${ExtType}s`;
    /** @type {ExtRecord<ExtType>} */
    installedExtensions: ExtRecord<ExtType>;
    /** @type {ExtensionLogFn} */
    log: ExtensionLogFn;
    /** @type {Manifest} */
    manifest: Manifest;
    get manifestPath(): string;
    get appiumHome(): string;
    /**
     * Checks extensions for problems
     * @param {ExtRecord<ExtType>} exts - Extension data
     */
    validate(exts: ExtRecord<ExtType>): ExtRecord<ExtType>;
    /**
     * @param {ExtManifest<ExtType>} extData
     * @param {ExtName<ExtType>} extName
     * @returns {Problem[]}
     */
    getSchemaProblems(extData: ExtManifest<ExtType>, extName: ExtName<ExtType>): Problem[];
    /**
     * @param {ExtManifest<ExtType>} extData
     * @param {ExtName<ExtType>} extName
     * @returns {Problem[]}
     */
    getGenericConfigProblems(extData: ExtManifest<ExtType>, extName: ExtName<ExtType>): Problem[];
    /**
     * @abstract
     * @param {ExtManifest<ExtType>} extData
     * @returns {Problem[]}
     */
    getConfigProblems(extData: ExtManifest<ExtType>): Problem[];
    /**
     * @param {string} extName
     * @param {ExtManifest<ExtType>} extData
     * @param {ExtensionConfigMutationOpts} [opts]
     * @returns {Promise<void>}
     */
    addExtension(extName: string, extData: ExtManifest<ExtType>, { write }?: ExtensionConfigMutationOpts | undefined): Promise<void>;
    /**
     * @param {ExtName<ExtType>} extName
     * @param {ExtManifest<ExtType>|import('../cli/extension-command').ExtensionFields<ExtType>} extData
     * @param {ExtensionConfigMutationOpts} [opts]
     * @returns {Promise<void>}
     */
    updateExtension(extName: ExtName<ExtType>, extData: ExtManifest<ExtType> | import('../cli/extension-command').ExtensionFields<ExtType>, { write }?: ExtensionConfigMutationOpts | undefined): Promise<void>;
    /**
     * @param {ExtName<ExtType>} extName
     * @param {ExtensionConfigMutationOpts} [opts]
     * @returns {Promise<void>}
     */
    removeExtension(extName: ExtName<ExtType>, { write }?: ExtensionConfigMutationOpts | undefined): Promise<void>;
    /**
     * @param {ExtName<ExtType>[]} [activeNames]
     * @returns {void}
     */
    print(activeNames?: string[] | undefined): void;
    /**
     * Returns a string describing the extension. Subclasses must implement.
     * @param {ExtName<ExtType>} extName - Extension name
     * @param {ExtManifest<ExtType>} extData - Extension data
     * @returns {string}
     * @abstract
     */
    extensionDesc(extName: ExtName<ExtType>, extData: ExtManifest<ExtType>): string;
    /**
     * @param {string} extName
     * @returns {string}
     */
    getInstallPath(extName: string): string;
    /**
     * Loads extension and returns its main class (constructor)
     * @param {ExtName<ExtType>} extName
     * @returns {ExtClass<ExtType>}
     */
    require(extName: ExtName<ExtType>): ExtClass<ExtType>;
    /**
     * @param {string} extName
     * @returns {boolean}
     */
    isInstalled(extName: string): boolean;
    /**
     * If an extension provides a schema, this will load the schema and attempt to
     * register it with the schema registrar.
     * @param {ExtName<ExtType>} extName - Name of extension
     * @param {ExtManifestWithSchema<ExtType>} extData - Extension data
     * @returns {import('ajv').SchemaObject|undefined}
     */
    readExtensionSchema(extName: ExtName<ExtType>, extData: ExtManifestWithSchema<ExtType>): import('ajv').SchemaObject | undefined;
}
/**
 * Config problem
 */
export type Problem = {
    /**
     * - Error message
     */
    err: string;
    /**
     * - Associated value
     */
    val: any;
};
/**
 * An optional logging function provided to an {@link ExtensionConfig } subclass.
 */
export type ExtensionLogFn = (...args: any[]) => void;
export type ExtensionType = import('../../types').ExtensionType;
export type Manifest = import('./manifest').Manifest;
export type ExtManifest<T> = import('../../types/appium-manifest').ExtManifest<T>;
export type ExtManifestWithSchema<T> = import('../../types/appium-manifest').ExtManifestWithSchema<T>;
export type ExtName<T> = import('../../types/appium-manifest').ExtName<T>;
export type ExtClass<T> = import('../../types/extension').ExtClass<T>;
export type ExtRecord<T> = import('../../types/appium-manifest').ExtRecord<T>;
/**
 * Options for various methods in {@link ExtensionConfig }
 */
export type ExtensionConfigMutationOpts = {
    /**
     * Whether or not to write the manifest to disk after a mutation operation
     */
    write?: boolean | undefined;
};
/**
 * A valid install type
 */
export type InstallType = typeof INSTALL_TYPE_NPM | typeof INSTALL_TYPE_GIT | typeof INSTALL_TYPE_LOCAL | typeof INSTALL_TYPE_GITHUB;
export const INSTALL_TYPE_NPM: "npm";
export const INSTALL_TYPE_GIT: "git";
export const INSTALL_TYPE_LOCAL: "local";
export const INSTALL_TYPE_GITHUB: "github";
/** @type {Set<InstallType>} */
export const INSTALL_TYPES: Set<InstallType>;
//# sourceMappingURL=extension-config.d.ts.map