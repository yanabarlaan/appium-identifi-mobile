"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getActiveDrivers = getActiveDrivers;
exports.getActivePlugins = getActivePlugins;
exports.loadExtensions = loadExtensions;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _logger = _interopRequireDefault(require("../logger"));

var _driverConfig = require("./driver-config");

var _manifest = require("./manifest");

var _pluginConfig = require("./plugin-config");

async function loadExtensions(appiumHome) {
  var _DriverConfig$getInst, _PluginConfig$getInst;

  const manifest = _manifest.Manifest.getInstance(appiumHome);

  const {
    drivers,
    plugins
  } = await manifest.read();
  const driverConfig = (_DriverConfig$getInst = _driverConfig.DriverConfig.getInstance(manifest)) !== null && _DriverConfig$getInst !== void 0 ? _DriverConfig$getInst : _driverConfig.DriverConfig.create(manifest, {
    extData: drivers
  });
  const pluginConfig = (_PluginConfig$getInst = _pluginConfig.PluginConfig.getInstance(manifest)) !== null && _PluginConfig$getInst !== void 0 ? _PluginConfig$getInst : _pluginConfig.PluginConfig.create(manifest, {
    extData: plugins
  });
  return {
    driverConfig,
    pluginConfig
  };
}

function getActivePlugins(pluginConfig, usePlugins = []) {
  return _lodash.default.compact(Object.keys(pluginConfig.installedExtensions).filter(pluginName => _lodash.default.includes(usePlugins, pluginName) || usePlugins.length === 1 && usePlugins[0] === _constants.USE_ALL_PLUGINS).map(pluginName => {
    try {
      _logger.default.info(`Attempting to load plugin ${pluginName}...`);

      const PluginClass = pluginConfig.require(pluginName);

      PluginClass.pluginName = pluginName;
      return PluginClass;
    } catch (err) {
      _logger.default.error(`Could not load plugin '${pluginName}', so it will not be available. Error ` + `in loading the plugin was: ${err.message}`);

      _logger.default.debug(err.stack);
    }
  }));
}

function getActiveDrivers(driverConfig, useDrivers = []) {
  return _lodash.default.compact(Object.keys(driverConfig.installedExtensions).filter(driverName => _lodash.default.includes(useDrivers, driverName) || useDrivers.length === 0).map(driverName => {
    try {
      _logger.default.info(`Attempting to load driver ${driverName}...`);

      return driverConfig.require(driverName);
    } catch (err) {
      _logger.default.error(`Could not load driver '${driverName}', so it will not be available. Error ` + `in loading the driver was: ${err.message}`);

      _logger.default.debug(err.stack);
    }
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,