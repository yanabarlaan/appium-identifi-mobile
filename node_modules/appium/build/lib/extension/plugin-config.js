"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PluginConfig = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _extensionConfig = require("./extension-config");

var _logger = _interopRequireDefault(require("../logger"));

var _constants = require("../constants");

class PluginConfig extends _extensionConfig.ExtensionConfig {
  static _instances = new WeakMap();

  constructor(manifest, {
    extData,
    logFn
  } = {}) {
    super(_constants.PLUGIN_TYPE, manifest, logFn);

    if (extData) {
      this.validate(extData);
    }
  }

  static create(manifest, {
    extData,
    logFn
  } = {}) {
    const instance = new PluginConfig(manifest, {
      logFn,
      extData
    });

    if (PluginConfig.getInstance(manifest)) {
      throw new Error(`Manifest with APPIUM_HOME ${manifest.appiumHome} already has a PluginConfig; use PluginConfig.getInstance() to retrieve it.`);
    }

    PluginConfig._instances.set(manifest, instance);

    return instance;
  }

  static getInstance(manifest) {
    return PluginConfig._instances.get(manifest);
  }

  extensionDesc(pluginName, {
    version
  }) {
    return `${pluginName}@${version}`;
  }

  print(activeNames) {
    const pluginNames = Object.keys(this.installedExtensions);

    if (_lodash.default.isEmpty(pluginNames)) {
      _logger.default.info(`No plugins have been installed. Use the "appium plugin" ` + 'command to install the one(s) you want to use.');

      return;
    }

    _logger.default.info(`Available plugins:`);

    for (const [pluginName, pluginData] of _lodash.default.toPairs(this.installedExtensions)) {
      const activeTxt = _lodash.default.includes(activeNames, pluginName) ? ' (ACTIVE)' : '';

      _logger.default.info(`  - ${this.extensionDesc(pluginName, pluginData)}${activeTxt}`);
    }

    if (_lodash.default.isEmpty(activeNames)) {
      _logger.default.info('No plugins activated. Use the --use-plugins flag with names of plugins to activate');
    }
  }

}

exports.PluginConfig = PluginConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbHVnaW5Db25maWciLCJFeHRlbnNpb25Db25maWciLCJfaW5zdGFuY2VzIiwiV2Vha01hcCIsImNvbnN0cnVjdG9yIiwibWFuaWZlc3QiLCJleHREYXRhIiwibG9nRm4iLCJQTFVHSU5fVFlQRSIsInZhbGlkYXRlIiwiY3JlYXRlIiwiaW5zdGFuY2UiLCJnZXRJbnN0YW5jZSIsIkVycm9yIiwiYXBwaXVtSG9tZSIsInNldCIsImdldCIsImV4dGVuc2lvbkRlc2MiLCJwbHVnaW5OYW1lIiwidmVyc2lvbiIsInByaW50IiwiYWN0aXZlTmFtZXMiLCJwbHVnaW5OYW1lcyIsIk9iamVjdCIsImtleXMiLCJpbnN0YWxsZWRFeHRlbnNpb25zIiwiXyIsImlzRW1wdHkiLCJsb2ciLCJpbmZvIiwicGx1Z2luRGF0YSIsInRvUGFpcnMiLCJhY3RpdmVUeHQiLCJpbmNsdWRlcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9leHRlbnNpb24vcGx1Z2luLWNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge0V4dGVuc2lvbkNvbmZpZ30gZnJvbSAnLi9leHRlbnNpb24tY29uZmlnJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7UExVR0lOX1RZUEV9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbi8qKlxuICogQGV4dGVuZHMge0V4dGVuc2lvbkNvbmZpZzxQbHVnaW5UeXBlPn1cbiAqL1xuZXhwb3J0IGNsYXNzIFBsdWdpbkNvbmZpZyBleHRlbmRzIEV4dGVuc2lvbkNvbmZpZyB7XG5cbiAgLyoqXG4gICAqIEEgbWFwcGluZyBvZiB7QGxpbmsgTWFuaWZlc3R9IGluc3RhbmNlcyB0byB7QGxpbmsgUGx1Z2luQ29uZmlnfSBpbnN0YW5jZXMuXG4gICAqXG4gICAqIGBNYW5pZmVzdGAgYW5kIHtAbGluayBFeHRlbnNpb25Db25maWd9IGhhdmUgYSBvbmUtdG8tbWFueSByZWxhdGlvbnNoaXA7IGVhY2ggYE1hbmlmZXN0YCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoIGEgYERyaXZlckNvbmZpZ2AgYW5kIGEgYFBsdWdpbkNvbmZpZ2A7IG5vIG1vcmUsIG5vIGxlc3MuXG4gICAqXG4gICAqIFRoaXMgdmFyaWFibGUgdHJhY2tzIHRoZSBgTWFuaWZlc3RgLXRvLWBQbHVnaW5Db25maWdgIHBvcnRpb24uXG4gICAqXG4gICAqIEB0eXBlIHtXZWFrTWFwPE1hbmlmZXN0LFBsdWdpbkNvbmZpZz59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAgc3RhdGljIF9pbnN0YW5jZXMgPSBuZXcgV2Vha01hcCgpO1xuXG4gICAvKipcbiAgICogQ2FsbCB7QGxpbmsgUGx1Z2luQ29uZmlnLmNyZWF0ZX0gaW5zdGVhZC5cbiAgICpcbiAgICogSnVzdCBjYWxscyB0aGUgc3VwZXJjbGFzcycgY29uc3RydWN0b3Igd2l0aCB0aGUgY29ycmVjdCBleHRlbnNpb24gdHlwZVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge01hbmlmZXN0fSBtYW5pZmVzdCAtIElPIG9iamVjdFxuICAgKiBAcGFyYW0ge1BsdWdpbkNvbmZpZ09wdGlvbnN9IFtvcHRzXVxuICAgKi9cbiAgIGNvbnN0cnVjdG9yIChtYW5pZmVzdCwge2V4dERhdGEsIGxvZ0ZufSA9IHt9KSB7XG4gICAgIHN1cGVyKFBMVUdJTl9UWVBFLCBtYW5pZmVzdCwgbG9nRm4pO1xuXG4gICAgIGlmIChleHREYXRhKSB7XG4gICAgICAgdGhpcy52YWxpZGF0ZShleHREYXRhKTtcbiAgICAgfVxuICAgfVxuXG4gICAvKipcbiAgICAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIFBsdWdpbkNvbmZpZ30gaW5zdGFuY2UgZm9yIGEge0BsaW5rIE1hbmlmZXN0fSBpbnN0YW5jZS5cbiAgICAqXG4gICAgKiBAcGFyYW0ge01hbmlmZXN0fSBtYW5pZmVzdFxuICAgICogQHBhcmFtIHtQbHVnaW5Db25maWdPcHRpb25zfSBbb3B0c11cbiAgICAqIEB0aHJvd3MgSWYgYG1hbmlmZXN0YCBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCBhIGBQbHVnaW5Db25maWdgXG4gICAgKiBAcmV0dXJucyB7UGx1Z2luQ29uZmlnfVxuICAgICovXG4gICBzdGF0aWMgY3JlYXRlIChtYW5pZmVzdCwge2V4dERhdGEsIGxvZ0ZufSA9IHt9KSB7XG4gICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFBsdWdpbkNvbmZpZyhtYW5pZmVzdCwge2xvZ0ZuLCBleHREYXRhfSk7XG4gICAgIGlmIChQbHVnaW5Db25maWcuZ2V0SW5zdGFuY2UobWFuaWZlc3QpKSB7XG4gICAgICAgdGhyb3cgbmV3IEVycm9yKGBNYW5pZmVzdCB3aXRoIEFQUElVTV9IT01FICR7bWFuaWZlc3QuYXBwaXVtSG9tZX0gYWxyZWFkeSBoYXMgYSBQbHVnaW5Db25maWc7IHVzZSBQbHVnaW5Db25maWcuZ2V0SW5zdGFuY2UoKSB0byByZXRyaWV2ZSBpdC5gKTtcbiAgICAgfVxuICAgICBQbHVnaW5Db25maWcuX2luc3RhbmNlcy5zZXQobWFuaWZlc3QsIGluc3RhbmNlKTtcbiAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgfVxuXG4gICAvKipcbiAgICAgKiBSZXR1cm5zIGEgUGx1Z2luQ29uZmlnIGFzc29jaWF0ZWQgd2l0aCBhIE1hbmlmZXN0XG4gICAgICogQHBhcmFtIHtNYW5pZmVzdH0gbWFuaWZlc3RcbiAgICAgKiBAcmV0dXJucyB7UGx1Z2luQ29uZmlnfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgIHN0YXRpYyBnZXRJbnN0YW5jZSAobWFuaWZlc3QpIHtcbiAgICAgcmV0dXJuIFBsdWdpbkNvbmZpZy5faW5zdGFuY2VzLmdldChtYW5pZmVzdCk7XG4gICB9XG5cbiAgIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1Z2luTmFtZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdHlwZXMvYXBwaXVtLW1hbmlmZXN0JykuRXh0TWFuaWZlc3Q8UGx1Z2luVHlwZT59IHBsdWdpbkRhdGFcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gICBleHRlbnNpb25EZXNjIChwbHVnaW5OYW1lLCB7dmVyc2lvbn0pIHtcbiAgICAgcmV0dXJuIGAke3BsdWdpbk5hbWV9QCR7dmVyc2lvbn1gO1xuICAgfVxuXG4gICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsoa2V5b2YgUGx1Z2luUmVjb3JkKVtdfSBhY3RpdmVOYW1lc1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gICBwcmludCAoYWN0aXZlTmFtZXMpIHtcbiAgICAgY29uc3QgcGx1Z2luTmFtZXMgPSBPYmplY3Qua2V5cyh0aGlzLmluc3RhbGxlZEV4dGVuc2lvbnMpO1xuXG4gICAgIGlmIChfLmlzRW1wdHkocGx1Z2luTmFtZXMpKSB7XG4gICAgICAgbG9nLmluZm8oYE5vIHBsdWdpbnMgaGF2ZSBiZWVuIGluc3RhbGxlZC4gVXNlIHRoZSBcImFwcGl1bSBwbHVnaW5cIiBgICtcbiAgICAgICAgICAgICAgICdjb21tYW5kIHRvIGluc3RhbGwgdGhlIG9uZShzKSB5b3Ugd2FudCB0byB1c2UuJyk7XG4gICAgICAgcmV0dXJuO1xuICAgICB9XG5cbiAgICAgbG9nLmluZm8oYEF2YWlsYWJsZSBwbHVnaW5zOmApO1xuICAgICBmb3IgKGNvbnN0IFtwbHVnaW5OYW1lLCBwbHVnaW5EYXRhXSBvZiBfLnRvUGFpcnModGhpcy5pbnN0YWxsZWRFeHRlbnNpb25zKSkge1xuICAgICAgIGNvbnN0IGFjdGl2ZVR4dCA9IF8uaW5jbHVkZXMoYWN0aXZlTmFtZXMsIHBsdWdpbk5hbWUpID8gJyAoQUNUSVZFKScgOiAnJztcbiAgICAgICBsb2cuaW5mbyhgICAtICR7dGhpcy5leHRlbnNpb25EZXNjKHBsdWdpbk5hbWUsIHBsdWdpbkRhdGEpfSR7YWN0aXZlVHh0fWApO1xuICAgICB9XG5cbiAgICAgaWYgKF8uaXNFbXB0eShhY3RpdmVOYW1lcykpIHtcbiAgICAgICBsb2cuaW5mbygnTm8gcGx1Z2lucyBhY3RpdmF0ZWQuIFVzZSB0aGUgLS11c2UtcGx1Z2lucyBmbGFnIHdpdGggbmFtZXMgb2YgcGx1Z2lucyB0byBhY3RpdmF0ZScpO1xuICAgICB9XG4gICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYgUGx1Z2luQ29uZmlnT3B0aW9uc1xuICogQHByb3BlcnR5IHtpbXBvcnQoJy4vZXh0ZW5zaW9uLWNvbmZpZycpLkV4dGVuc2lvbkxvZ0ZufSBbbG9nRm5dIC0gT3B0aW9uYWwgbG9nZ2luZyBmdW5jdGlvblxuICogQHByb3BlcnR5IHtpbXBvcnQoJy4uLy4uL3R5cGVzL2FwcGl1bS1tYW5pZmVzdCcpLlBsdWdpblJlY29yZH0gW2V4dERhdGFdIC0gRXh0ZW5zaW9uIGRhdGFcbiAqL1xuXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvYXBwaXVtLW1hbmlmZXN0JykuUGx1Z2luUmVjb3JkfSBQbHVnaW5SZWNvcmRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzJykuUGx1Z2luVHlwZX0gUGx1Z2luVHlwZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvZXh0ZXJuYWwtbWFuaWZlc3QnKS5FeHRNZXRhZGF0YTxQbHVnaW5UeXBlPn0gUGx1Z2luTWV0YWRhdGFcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vbWFuaWZlc3QnKS5NYW5pZmVzdH0gTWFuaWZlc3RcbiAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUtPLE1BQU1BLFlBQU4sU0FBMkJDLGdDQUEzQixDQUEyQztFQVk5QixPQUFWQyxVQUFVLEdBQUcsSUFBSUMsT0FBSixFQUFIOztFQVVqQkMsV0FBVyxDQUFFQyxRQUFGLEVBQVk7SUFBQ0MsT0FBRDtJQUFVQztFQUFWLElBQW1CLEVBQS9CLEVBQW1DO0lBQzVDLE1BQU1DLHNCQUFOLEVBQW1CSCxRQUFuQixFQUE2QkUsS0FBN0I7O0lBRUEsSUFBSUQsT0FBSixFQUFhO01BQ1gsS0FBS0csUUFBTCxDQUFjSCxPQUFkO0lBQ0Q7RUFDRjs7RUFVWSxPQUFOSSxNQUFNLENBQUVMLFFBQUYsRUFBWTtJQUFDQyxPQUFEO0lBQVVDO0VBQVYsSUFBbUIsRUFBL0IsRUFBbUM7SUFDOUMsTUFBTUksUUFBUSxHQUFHLElBQUlYLFlBQUosQ0FBaUJLLFFBQWpCLEVBQTJCO01BQUNFLEtBQUQ7TUFBUUQ7SUFBUixDQUEzQixDQUFqQjs7SUFDQSxJQUFJTixZQUFZLENBQUNZLFdBQWIsQ0FBeUJQLFFBQXpCLENBQUosRUFBd0M7TUFDdEMsTUFBTSxJQUFJUSxLQUFKLENBQVcsNkJBQTRCUixRQUFRLENBQUNTLFVBQVcsNkVBQTNELENBQU47SUFDRDs7SUFDRGQsWUFBWSxDQUFDRSxVQUFiLENBQXdCYSxHQUF4QixDQUE0QlYsUUFBNUIsRUFBc0NNLFFBQXRDOztJQUNBLE9BQU9BLFFBQVA7RUFDRDs7RUFPaUIsT0FBWEMsV0FBVyxDQUFFUCxRQUFGLEVBQVk7SUFDNUIsT0FBT0wsWUFBWSxDQUFDRSxVQUFiLENBQXdCYyxHQUF4QixDQUE0QlgsUUFBNUIsQ0FBUDtFQUNEOztFQU9EWSxhQUFhLENBQUVDLFVBQUYsRUFBYztJQUFDQztFQUFELENBQWQsRUFBeUI7SUFDcEMsT0FBUSxHQUFFRCxVQUFXLElBQUdDLE9BQVEsRUFBaEM7RUFDRDs7RUFPREMsS0FBSyxDQUFFQyxXQUFGLEVBQWU7SUFDbEIsTUFBTUMsV0FBVyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLQyxtQkFBakIsQ0FBcEI7O0lBRUEsSUFBSUMsZ0JBQUVDLE9BQUYsQ0FBVUwsV0FBVixDQUFKLEVBQTRCO01BQzFCTSxnQkFBSUMsSUFBSixDQUFVLDBEQUFELEdBQ0QsZ0RBRFI7O01BRUE7SUFDRDs7SUFFREQsZ0JBQUlDLElBQUosQ0FBVSxvQkFBVjs7SUFDQSxLQUFLLE1BQU0sQ0FBQ1gsVUFBRCxFQUFhWSxVQUFiLENBQVgsSUFBdUNKLGdCQUFFSyxPQUFGLENBQVUsS0FBS04sbUJBQWYsQ0FBdkMsRUFBNEU7TUFDMUUsTUFBTU8sU0FBUyxHQUFHTixnQkFBRU8sUUFBRixDQUFXWixXQUFYLEVBQXdCSCxVQUF4QixJQUFzQyxXQUF0QyxHQUFvRCxFQUF0RTs7TUFDQVUsZ0JBQUlDLElBQUosQ0FBVSxPQUFNLEtBQUtaLGFBQUwsQ0FBbUJDLFVBQW5CLEVBQStCWSxVQUEvQixDQUEyQyxHQUFFRSxTQUFVLEVBQXZFO0lBQ0Q7O0lBRUQsSUFBSU4sZ0JBQUVDLE9BQUYsQ0FBVU4sV0FBVixDQUFKLEVBQTRCO01BQzFCTyxnQkFBSUMsSUFBSixDQUFTLG9GQUFUO0lBQ0Q7RUFDRjs7QUF4RjhDIn0=