export type ExtCommand<ExtType extends import("../../types").ExtensionType> = ExtType extends import('../../types').DriverType ? import('@appium/types').Class<DriverCommand> : ExtType extends import('../../types').PluginType ? import('@appium/types').Class<PluginCommand> : never;
/**
 * Run a subcommand of the 'appium driver' type. Each subcommand has its own set of arguments which
 * can be represented as a JS object.
 *
 * @param {Object} args - JS object where the key is the parameter name (as defined in
 * driver-parser.js)
 * @template {import('../extension/manifest').ExtensionType} ExtType
 * @param {import('../extension/extension-config').ExtensionConfig<ExtType>} configObject - Extension config object
 */
export function runExtensionCommand<ExtType extends import("../../types").ExtensionType>(args: any, configObject: import("../extension/extension-config").ExtensionConfig<ExtType>): Promise<any>;
import DriverCommand from "./driver-command";
import PluginCommand from "./plugin-command";
//# sourceMappingURL=extension.d.ts.map