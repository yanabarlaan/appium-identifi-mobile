"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _extensionCommand = _interopRequireDefault(require("./extension-command"));

var _constants = require("../constants");

require("@colors/colors");

const REQ_DRIVER_FIELDS = ['driverName', 'automationName', 'platformNames', 'mainClass'];

class DriverCommand extends _extensionCommand.default {
  constructor({
    config,
    json
  }) {
    super({
      config,
      json
    });
    this.knownExtensions = _constants.KNOWN_DRIVERS;
  }

  async install({
    driver,
    installType,
    packageName
  }) {
    return await super._install({
      installSpec: driver,
      installType,
      packageName
    });
  }

  async uninstall({
    driver
  }) {
    return await super._uninstall({
      installSpec: driver
    });
  }

  async update({
    driver,
    unsafe
  }) {
    return await super._update({
      installSpec: driver,
      unsafe
    });
  }

  async run({
    driver,
    scriptName
  }) {
    return await super._run({
      installSpec: driver,
      scriptName
    });
  }

  getPostInstallText({
    extName,
    extData
  }) {
    return `Driver ${extName}@${extData.version} successfully installed\n`.green + `- automationName: ${extData.automationName.green}\n` + `- platformNames: ${JSON.stringify(extData.platformNames).green}`;
  }

  validateExtensionFields(driverMetadata, installSpec) {
    const missingFields = REQ_DRIVER_FIELDS.reduce((acc, field) => driverMetadata[field] ? acc : [...acc, field], []);

    if (!_lodash.default.isEmpty(missingFields)) {
      throw new Error(`Driver "${installSpec}" did not expose correct fields for compability ` + `with Appium. Missing fields: ${JSON.stringify(missingFields)}`);
    }
  }

}

exports.default = DriverCommand;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSRVFfRFJJVkVSX0ZJRUxEUyIsIkRyaXZlckNvbW1hbmQiLCJFeHRlbnNpb25Db21tYW5kIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJqc29uIiwia25vd25FeHRlbnNpb25zIiwiS05PV05fRFJJVkVSUyIsImluc3RhbGwiLCJkcml2ZXIiLCJpbnN0YWxsVHlwZSIsInBhY2thZ2VOYW1lIiwiX2luc3RhbGwiLCJpbnN0YWxsU3BlYyIsInVuaW5zdGFsbCIsIl91bmluc3RhbGwiLCJ1cGRhdGUiLCJ1bnNhZmUiLCJfdXBkYXRlIiwicnVuIiwic2NyaXB0TmFtZSIsIl9ydW4iLCJnZXRQb3N0SW5zdGFsbFRleHQiLCJleHROYW1lIiwiZXh0RGF0YSIsInZlcnNpb24iLCJncmVlbiIsImF1dG9tYXRpb25OYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsInBsYXRmb3JtTmFtZXMiLCJ2YWxpZGF0ZUV4dGVuc2lvbkZpZWxkcyIsImRyaXZlck1ldGFkYXRhIiwibWlzc2luZ0ZpZWxkcyIsInJlZHVjZSIsImFjYyIsImZpZWxkIiwiXyIsImlzRW1wdHkiLCJFcnJvciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGkvZHJpdmVyLWNvbW1hbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBFeHRlbnNpb25Db21tYW5kIGZyb20gJy4vZXh0ZW5zaW9uLWNvbW1hbmQnO1xuaW1wb3J0IHtLTk9XTl9EUklWRVJTfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0ICdAY29sb3JzL2NvbG9ycyc7XG5cbmNvbnN0IFJFUV9EUklWRVJfRklFTERTID0gW1xuICAnZHJpdmVyTmFtZScsXG4gICdhdXRvbWF0aW9uTmFtZScsXG4gICdwbGF0Zm9ybU5hbWVzJyxcbiAgJ21haW5DbGFzcycsXG5dO1xuXG4vKipcbiAqIEBleHRlbmRzIHtFeHRlbnNpb25Db21tYW5kPERyaXZlclR5cGU+fVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcml2ZXJDb21tYW5kIGV4dGVuZHMgRXh0ZW5zaW9uQ29tbWFuZCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RyaXZlckNvbW1hbmRPcHRpb25zfSBvcHRzXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoe2NvbmZpZywganNvbn0pIHtcbiAgICBzdXBlcih7Y29uZmlnLCBqc29ufSk7XG4gICAgdGhpcy5rbm93bkV4dGVuc2lvbnMgPSBLTk9XTl9EUklWRVJTO1xuICB9XG5cbiAgYXN5bmMgaW5zdGFsbCAoe2RyaXZlciwgaW5zdGFsbFR5cGUsIHBhY2thZ2VOYW1lfSkge1xuICAgIHJldHVybiBhd2FpdCBzdXBlci5faW5zdGFsbCh7XG4gICAgICBpbnN0YWxsU3BlYzogZHJpdmVyLFxuICAgICAgaW5zdGFsbFR5cGUsXG4gICAgICBwYWNrYWdlTmFtZSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHVuaW5zdGFsbCAoe2RyaXZlcn0pIHtcbiAgICByZXR1cm4gYXdhaXQgc3VwZXIuX3VuaW5zdGFsbCh7aW5zdGFsbFNwZWM6IGRyaXZlcn0pO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlICh7ZHJpdmVyLCB1bnNhZmV9KSB7XG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLl91cGRhdGUoe2luc3RhbGxTcGVjOiBkcml2ZXIsIHVuc2FmZX0pO1xuICB9XG5cbiAgYXN5bmMgcnVuICh7ZHJpdmVyLCBzY3JpcHROYW1lfSkge1xuICAgIHJldHVybiBhd2FpdCBzdXBlci5fcnVuKHtpbnN0YWxsU3BlYzogZHJpdmVyLCBzY3JpcHROYW1lfSk7XG4gIH1cblxuICBnZXRQb3N0SW5zdGFsbFRleHQgKHtleHROYW1lLCBleHREYXRhfSkge1xuICAgIHJldHVybiAoXG4gICAgICBgRHJpdmVyICR7ZXh0TmFtZX1AJHtleHREYXRhLnZlcnNpb259IHN1Y2Nlc3NmdWxseSBpbnN0YWxsZWRcXG5gLmdyZWVuICtcbiAgICAgIGAtIGF1dG9tYXRpb25OYW1lOiAke2V4dERhdGEuYXV0b21hdGlvbk5hbWUuZ3JlZW59XFxuYCArXG4gICAgICBgLSBwbGF0Zm9ybU5hbWVzOiAke0pTT04uc3RyaW5naWZ5KGV4dERhdGEucGxhdGZvcm1OYW1lcykuZ3JlZW59YFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGZpZWxkcyBpbiBgYXBwaXVtYCBmaWVsZCBvZiBgZHJpdmVyTWV0YWRhdGFgXG4gICAqXG4gICAqIEZvciBhbnkgYHBhY2thZ2UuanNvbmAgZmllbGRzIHdoaWNoIGEgZHJpdmVyIHJlcXVpcmVzLCB2YWxpZGF0ZSB0aGUgdHlwZSBvZlxuICAgKiB0aG9zZSBmaWVsZHMgb24gdGhlIGBwYWNrYWdlLmpzb25gIGRhdGEsIHRocm93aW5nIGFuIGVycm9yIGlmIGFueXRoaW5nIGlzXG4gICAqIGFtaXNzLlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnYXBwaXVtL3R5cGVzJykuRXh0TWV0YWRhdGE8RHJpdmVyVHlwZT59IGRyaXZlck1ldGFkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnN0YWxsU3BlY1xuICAgKi9cbiAgdmFsaWRhdGVFeHRlbnNpb25GaWVsZHMgKGRyaXZlck1ldGFkYXRhLCBpbnN0YWxsU3BlYykge1xuICAgIGNvbnN0IG1pc3NpbmdGaWVsZHMgPSBSRVFfRFJJVkVSX0ZJRUxEUy5yZWR1Y2UoXG4gICAgICAoYWNjLCBmaWVsZCkgPT4gKGRyaXZlck1ldGFkYXRhW2ZpZWxkXSA/IGFjYyA6IFsuLi5hY2MsIGZpZWxkXSksXG4gICAgICBbXVxuICAgICk7XG5cbiAgICBpZiAoIV8uaXNFbXB0eShtaXNzaW5nRmllbGRzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRHJpdmVyIFwiJHtpbnN0YWxsU3BlY31cIiBkaWQgbm90IGV4cG9zZSBjb3JyZWN0IGZpZWxkcyBmb3IgY29tcGFiaWxpdHkgYCArXG4gICAgICAgICAgYHdpdGggQXBwaXVtLiBNaXNzaW5nIGZpZWxkczogJHtKU09OLnN0cmluZ2lmeShtaXNzaW5nRmllbGRzKX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIERyaXZlckNvbW1hbmRPcHRpb25zXG4gKiBAcHJvcGVydHkge2ltcG9ydCgnLi4vZXh0ZW5zaW9uL2V4dGVuc2lvbi1jb25maWcnKS5FeHRlbnNpb25Db25maWc8RHJpdmVyVHlwZT59IGNvbmZpZ1xuICogQHByb3BlcnR5IHtib29sZWFufSBqc29uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdhcHBpdW0vdHlwZXMnKS5Ecml2ZXJUeXBlfSBEcml2ZXJUeXBlXG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxpQkFBaUIsR0FBRyxDQUN4QixZQUR3QixFQUV4QixnQkFGd0IsRUFHeEIsZUFId0IsRUFJeEIsV0FKd0IsQ0FBMUI7O0FBVWUsTUFBTUMsYUFBTixTQUE0QkMseUJBQTVCLENBQTZDO0VBSTFEQyxXQUFXLENBQUU7SUFBQ0MsTUFBRDtJQUFTQztFQUFULENBQUYsRUFBa0I7SUFDM0IsTUFBTTtNQUFDRCxNQUFEO01BQVNDO0lBQVQsQ0FBTjtJQUNBLEtBQUtDLGVBQUwsR0FBdUJDLHdCQUF2QjtFQUNEOztFQUVZLE1BQVBDLE9BQU8sQ0FBRTtJQUFDQyxNQUFEO0lBQVNDLFdBQVQ7SUFBc0JDO0VBQXRCLENBQUYsRUFBc0M7SUFDakQsT0FBTyxNQUFNLE1BQU1DLFFBQU4sQ0FBZTtNQUMxQkMsV0FBVyxFQUFFSixNQURhO01BRTFCQyxXQUYwQjtNQUcxQkM7SUFIMEIsQ0FBZixDQUFiO0VBS0Q7O0VBRWMsTUFBVEcsU0FBUyxDQUFFO0lBQUNMO0VBQUQsQ0FBRixFQUFZO0lBQ3pCLE9BQU8sTUFBTSxNQUFNTSxVQUFOLENBQWlCO01BQUNGLFdBQVcsRUFBRUo7SUFBZCxDQUFqQixDQUFiO0VBQ0Q7O0VBRVcsTUFBTk8sTUFBTSxDQUFFO0lBQUNQLE1BQUQ7SUFBU1E7RUFBVCxDQUFGLEVBQW9CO0lBQzlCLE9BQU8sTUFBTSxNQUFNQyxPQUFOLENBQWM7TUFBQ0wsV0FBVyxFQUFFSixNQUFkO01BQXNCUTtJQUF0QixDQUFkLENBQWI7RUFDRDs7RUFFUSxNQUFIRSxHQUFHLENBQUU7SUFBQ1YsTUFBRDtJQUFTVztFQUFULENBQUYsRUFBd0I7SUFDL0IsT0FBTyxNQUFNLE1BQU1DLElBQU4sQ0FBVztNQUFDUixXQUFXLEVBQUVKLE1BQWQ7TUFBc0JXO0lBQXRCLENBQVgsQ0FBYjtFQUNEOztFQUVERSxrQkFBa0IsQ0FBRTtJQUFDQyxPQUFEO0lBQVVDO0VBQVYsQ0FBRixFQUFzQjtJQUN0QyxPQUNHLFVBQVNELE9BQVEsSUFBR0MsT0FBTyxDQUFDQyxPQUFRLDJCQUFyQyxDQUFnRUMsS0FBaEUsR0FDQyxxQkFBb0JGLE9BQU8sQ0FBQ0csY0FBUixDQUF1QkQsS0FBTSxJQURsRCxHQUVDLG9CQUFtQkUsSUFBSSxDQUFDQyxTQUFMLENBQWVMLE9BQU8sQ0FBQ00sYUFBdkIsRUFBc0NKLEtBQU0sRUFIbEU7RUFLRDs7RUFXREssdUJBQXVCLENBQUVDLGNBQUYsRUFBa0JuQixXQUFsQixFQUErQjtJQUNwRCxNQUFNb0IsYUFBYSxHQUFHakMsaUJBQWlCLENBQUNrQyxNQUFsQixDQUNwQixDQUFDQyxHQUFELEVBQU1DLEtBQU4sS0FBaUJKLGNBQWMsQ0FBQ0ksS0FBRCxDQUFkLEdBQXdCRCxHQUF4QixHQUE4QixDQUFDLEdBQUdBLEdBQUosRUFBU0MsS0FBVCxDQUQzQixFQUVwQixFQUZvQixDQUF0Qjs7SUFLQSxJQUFJLENBQUNDLGdCQUFFQyxPQUFGLENBQVVMLGFBQVYsQ0FBTCxFQUErQjtNQUM3QixNQUFNLElBQUlNLEtBQUosQ0FDSCxXQUFVMUIsV0FBWSxrREFBdkIsR0FDRyxnQ0FBK0JlLElBQUksQ0FBQ0MsU0FBTCxDQUFlSSxhQUFmLENBQThCLEVBRjVELENBQU47SUFJRDtFQUNGOztBQTFEeUQifQ==