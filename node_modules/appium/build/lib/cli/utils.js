"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RingBuffer = exports.JSON_SPACES = void 0;
exports.errAndQuit = errAndQuit;
exports.log = log;
exports.spinWith = spinWith;

require("source-map-support/register");

var _ora = _interopRequireDefault(require("ora"));

const JSON_SPACES = 4;
exports.JSON_SPACES = JSON_SPACES;

function errAndQuit(json, msg) {
  if (json) {
    console.log(JSON.stringify({
      error: `${msg}`
    }, null, JSON_SPACES));
  } else {
    console.error(`${msg}`.red);

    if (msg.stderr) {
      console.error(`${msg.stderr}`.red);
    }
  }

  process.exit(1);
}

function log(json, msg) {
  !json && console.log(msg);
}

async function spinWith(json, msg, fn) {
  if (json) {
    return await fn();
  }

  const spinner = (0, _ora.default)(msg).start();
  let res;

  try {
    res = await fn();
    spinner.succeed();
    return res;
  } catch (err) {
    spinner.fail();
    throw err;
  }
}

class RingBuffer {
  constructor(size = 50) {
    this.size = size;
    this.buffer = [];
  }

  getBuff() {
    return this.buffer;
  }

  dequeue() {
    this.buffer.shift();
  }

  enqueue(item) {
    if (this.buffer.length >= this.size) {
      this.dequeue();
    }

    this.buffer.push(item);
  }

}

exports.RingBuffer = RingBuffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJKU09OX1NQQUNFUyIsImVyckFuZFF1aXQiLCJqc29uIiwibXNnIiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsInJlZCIsInN0ZGVyciIsInByb2Nlc3MiLCJleGl0Iiwic3BpbldpdGgiLCJmbiIsInNwaW5uZXIiLCJzdGFydCIsInJlcyIsInN1Y2NlZWQiLCJlcnIiLCJmYWlsIiwiUmluZ0J1ZmZlciIsImNvbnN0cnVjdG9yIiwic2l6ZSIsImJ1ZmZlciIsImdldEJ1ZmYiLCJkZXF1ZXVlIiwic2hpZnQiLCJlbnF1ZXVlIiwiaXRlbSIsImxlbmd0aCIsInB1c2giXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY2xpL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxuaW1wb3J0IG9yYSBmcm9tICdvcmEnO1xuXG5jb25zdCBKU09OX1NQQUNFUyA9IDQ7XG5cbi8qKipcbiAqIExvZyBhbiBlcnJvciB0byB0aGUgY29uc29sZSBhbmQgZXhpdCB0aGUgcHJvY2Vzcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0ganNvbiAtIHdoZXRoZXIgd2Ugc2hvdWxkIGxvZyBqc29uIG9yIHRleHRcbiAqIEBwYXJhbSB7YW55fSBtc2cgLSBlcnJvciBtZXNzYWdlLCBvYmplY3QsIEVycm9yIGluc3RhbmNlLCBldGMuXG4gKi9cbmZ1bmN0aW9uIGVyckFuZFF1aXQgKGpzb24sIG1zZykge1xuICBpZiAoanNvbikge1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHtlcnJvcjogYCR7bXNnfWB9LCBudWxsLCBKU09OX1NQQUNFUykpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoYCR7bXNnfWAucmVkKTtcbiAgICBpZiAobXNnLnN0ZGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihgJHttc2cuc3RkZXJyfWAucmVkKTtcbiAgICB9XG4gIH1cbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG4vKipcbiAqIENvbmRpdGlvbmFsbHkgbG9nIHNvbWV0aGluZyB0byB0aGUgY29uc29sZVxuICogQHBhcmFtIHtib29sZWFufSBqc29uIC0gd2hldGhlciB3ZSBhcmUgaW4ganNvbiBtb2RlIChhbmQgc2hvdWxkIHRoZXJlZm9yZSBub3QgbG9nKVxuICogQHBhcmFtIHtzdHJpbmd9IG1zZyAtIHN0cmluZyB0byBsb2dcbiAqL1xuZnVuY3Rpb24gbG9nIChqc29uLCBtc2cpIHtcbiAgIWpzb24gJiYgY29uc29sZS5sb2cobXNnKTtcbn1cblxuLyoqXG4gKiBTdGFydCBhIHNwaW5uZXIsIGV4ZWN1dGUgYW4gYXN5bmMgZnVuY3Rpb24sIGFuZCB0aGVuIHN0b3AgdGhlIHNwaW5uZXJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0ganNvbiAtIHdoZXRoZXIgd2UgYXJlIGluIGpzb24gbW9kZSAoYW5kIHNob3VsZCB0aGVyZWZvcmUgbm90IGxvZylcbiAqIEBwYXJhbSB7c3RyaW5nfSBtc2cgLSBzdHJpbmcgdG8gbG9nXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIGZ1bmN0aW9uIHRvIHdyYXAgd2l0aCBzcGlubmluZ1xuICovXG5hc3luYyBmdW5jdGlvbiBzcGluV2l0aCAoanNvbiwgbXNnLCBmbikge1xuICBpZiAoanNvbikge1xuICAgIHJldHVybiBhd2FpdCBmbigpO1xuICB9XG4gIGNvbnN0IHNwaW5uZXIgPSBvcmEobXNnKS5zdGFydCgpO1xuICBsZXQgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGF3YWl0IGZuKCk7XG4gICAgc3Bpbm5lci5zdWNjZWVkKCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgc3Bpbm5lci5mYWlsKCk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5cbmNsYXNzIFJpbmdCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoc2l6ZSA9IDUwKSB7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICB9XG4gIGdldEJ1ZmYgKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlcjtcbiAgfVxuICBkZXF1ZXVlICgpIHtcbiAgICB0aGlzLmJ1ZmZlci5zaGlmdCgpO1xuICB9XG4gIGVucXVldWUgKGl0ZW0pIHtcbiAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID49IHRoaXMuc2l6ZSkge1xuICAgICAgdGhpcy5kZXF1ZXVlKCk7XG4gICAgfVxuICAgIHRoaXMuYnVmZmVyLnB1c2goaXRlbSk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgZXJyQW5kUXVpdCxcbiAgbG9nLFxuICBzcGluV2l0aCxcbiAgSlNPTl9TUEFDRVMsXG4gIFJpbmdCdWZmZXJcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUEsTUFBTUEsV0FBVyxHQUFHLENBQXBCOzs7QUFPQSxTQUFTQyxVQUFULENBQXFCQyxJQUFyQixFQUEyQkMsR0FBM0IsRUFBZ0M7RUFDOUIsSUFBSUQsSUFBSixFQUFVO0lBQ1JFLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUFJLENBQUNDLFNBQUwsQ0FBZTtNQUFDQyxLQUFLLEVBQUcsR0FBRUwsR0FBSTtJQUFmLENBQWYsRUFBa0MsSUFBbEMsRUFBd0NILFdBQXhDLENBQVo7RUFDRCxDQUZELE1BRU87SUFDTEksT0FBTyxDQUFDSSxLQUFSLENBQWUsR0FBRUwsR0FBSSxFQUFQLENBQVNNLEdBQXZCOztJQUNBLElBQUlOLEdBQUcsQ0FBQ08sTUFBUixFQUFnQjtNQUNkTixPQUFPLENBQUNJLEtBQVIsQ0FBZSxHQUFFTCxHQUFHLENBQUNPLE1BQU8sRUFBZCxDQUFnQkQsR0FBOUI7SUFDRDtFQUNGOztFQUNERSxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiO0FBQ0Q7O0FBT0QsU0FBU1AsR0FBVCxDQUFjSCxJQUFkLEVBQW9CQyxHQUFwQixFQUF5QjtFQUN2QixDQUFDRCxJQUFELElBQVNFLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixHQUFaLENBQVQ7QUFDRDs7QUFRRCxlQUFlVSxRQUFmLENBQXlCWCxJQUF6QixFQUErQkMsR0FBL0IsRUFBb0NXLEVBQXBDLEVBQXdDO0VBQ3RDLElBQUlaLElBQUosRUFBVTtJQUNSLE9BQU8sTUFBTVksRUFBRSxFQUFmO0VBQ0Q7O0VBQ0QsTUFBTUMsT0FBTyxHQUFHLGtCQUFJWixHQUFKLEVBQVNhLEtBQVQsRUFBaEI7RUFDQSxJQUFJQyxHQUFKOztFQUNBLElBQUk7SUFDRkEsR0FBRyxHQUFHLE1BQU1ILEVBQUUsRUFBZDtJQUNBQyxPQUFPLENBQUNHLE9BQVI7SUFDQSxPQUFPRCxHQUFQO0VBQ0QsQ0FKRCxDQUlFLE9BQU9FLEdBQVAsRUFBWTtJQUNaSixPQUFPLENBQUNLLElBQVI7SUFDQSxNQUFNRCxHQUFOO0VBQ0Q7QUFDRjs7QUFFRCxNQUFNRSxVQUFOLENBQWlCO0VBQ2ZDLFdBQVcsQ0FBRUMsSUFBSSxHQUFHLEVBQVQsRUFBYTtJQUN0QixLQUFLQSxJQUFMLEdBQVlBLElBQVo7SUFDQSxLQUFLQyxNQUFMLEdBQWMsRUFBZDtFQUNEOztFQUNEQyxPQUFPLEdBQUk7SUFDVCxPQUFPLEtBQUtELE1BQVo7RUFDRDs7RUFDREUsT0FBTyxHQUFJO0lBQ1QsS0FBS0YsTUFBTCxDQUFZRyxLQUFaO0VBQ0Q7O0VBQ0RDLE9BQU8sQ0FBRUMsSUFBRixFQUFRO0lBQ2IsSUFBSSxLQUFLTCxNQUFMLENBQVlNLE1BQVosSUFBc0IsS0FBS1AsSUFBL0IsRUFBcUM7TUFDbkMsS0FBS0csT0FBTDtJQUNEOztJQUNELEtBQUtGLE1BQUwsQ0FBWU8sSUFBWixDQUFpQkYsSUFBakI7RUFDRDs7QUFoQmMifQ==