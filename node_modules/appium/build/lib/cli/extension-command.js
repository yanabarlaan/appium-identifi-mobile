"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ExtensionCommand = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _support = require("@appium/support");

var _utils = require("./utils");

var _teen_process = require("teen_process");

var _extensionConfig = require("../extension/extension-config");

var _packageChanged = require("../extension/package-changed");

const UPDATE_ALL = 'installed';

class NotUpdatableError extends Error {}

class NoUpdatesAvailableError extends Error {}

class ExtensionCommand {
  config;
  knownExtensions;
  isJsonOutput;

  constructor({
    config,
    json
  }) {
    this.config = config;
    this.isJsonOutput = json;
  }

  get type() {
    return this.config.extensionType;
  }

  async execute(args) {
    const cmd = args[`${this.type}Command`];

    if (!_lodash.default.isFunction(this[cmd])) {
      throw new Error(`Cannot handle ${this.type} command ${cmd}`);
    }

    const executeCmd = this[cmd].bind(this);
    return await executeCmd(args);
  }

  async list({
    showInstalled,
    showUpdates
  }) {
    const lsMsg = `Listing ${showInstalled ? 'installed' : 'available'} ${this.type}s`;
    const installedNames = Object.keys(this.config.installedExtensions);
    const knownNames = Object.keys(this.knownExtensions);
    const exts = [...installedNames, ...knownNames].reduce((acc, name) => {
      if (!acc[name]) {
        if (installedNames.includes(name)) {
          acc[name] = { ...this.config.installedExtensions[name],
            installed: true
          };
        } else if (!showInstalled) {
          acc[name] = {
            pkgName: this.knownExtensions[name],
            installed: false
          };
        }
      }

      return acc;
    }, {});
    await (0, _utils.spinWith)(this.isJsonOutput, lsMsg, async () => {
      if (!showUpdates) {
        return;
      }

      for (const [ext, data] of _lodash.default.toPairs(exts)) {
        if (!data.installed || data.installType !== _extensionConfig.INSTALL_TYPE_NPM) {
          continue;
        }

        const updates = await this.checkForExtensionUpdate(ext);
        data.updateVersion = updates.safeUpdate;
        data.unsafeUpdateVersion = updates.unsafeUpdate;
        data.upToDate = updates.safeUpdate === null && updates.unsafeUpdate === null;
      }
    });
    const listData = exts;

    if (this.isJsonOutput) {
      return listData;
    }

    for (const [name, data] of _lodash.default.toPairs(listData)) {
      let installTxt = ' [not installed]'.grey;
      let updateTxt = '';
      let upToDateTxt = '';
      let unsafeUpdateTxt = '';

      if (data.installed) {
        const {
          installType,
          installSpec,
          updateVersion,
          unsafeUpdateVersion,
          version,
          upToDate
        } = data;
        let typeTxt;

        switch (installType) {
          case _extensionConfig.INSTALL_TYPE_GIT:
          case _extensionConfig.INSTALL_TYPE_GITHUB:
            typeTxt = `(cloned from ${installSpec})`.yellow;
            break;

          case _extensionConfig.INSTALL_TYPE_LOCAL:
            typeTxt = `(linked from ${installSpec})`.magenta;
            break;

          default:
            typeTxt = '(NPM)';
        }

        installTxt = `@${version.yellow} ${('[installed ' + typeTxt + ']').green}`;

        if (showUpdates) {
          if (updateVersion) {
            updateTxt = ` [${updateVersion} available]`.magenta;
          }

          if (upToDate) {
            upToDateTxt = ` [Up to date]`.green;
          }

          if (unsafeUpdateVersion) {
            unsafeUpdateTxt = ` [${unsafeUpdateVersion} available (potentially unsafe)]`.cyan;
          }
        }
      }

      console.log(`- ${name.yellow}${installTxt}${updateTxt}${upToDateTxt}${unsafeUpdateTxt}`);
    }

    return listData;
  }

  async _install({
    installSpec,
    installType,
    packageName
  }) {
    let extData;

    if (packageName && [_extensionConfig.INSTALL_TYPE_LOCAL, _extensionConfig.INSTALL_TYPE_NPM].includes(installType)) {
      throw new Error(`When using --source=${installType}, cannot also use --package`);
    }

    if (!packageName && [_extensionConfig.INSTALL_TYPE_GIT, _extensionConfig.INSTALL_TYPE_GITHUB].includes(installType)) {
      throw new Error(`When using --source=${installType}, must also use --package`);
    }

    if (installType === _extensionConfig.INSTALL_TYPE_GITHUB) {
      if (installSpec.split('/').length !== 2) {
        throw new Error(`Github ${this.type} spec ${installSpec} appeared to be invalid; ` + 'it should be of the form <org>/<repo>');
      }

      extData = await this.installViaNpm({
        installSpec,
        pkgName: packageName
      });
    } else if (installType === _extensionConfig.INSTALL_TYPE_GIT) {
      installSpec = installSpec.replace(/\.git$/, '');
      extData = await this.installViaNpm({
        installSpec,
        pkgName: packageName
      });
    } else {
      let pkgName, pkgVer;

      if (installType === _extensionConfig.INSTALL_TYPE_LOCAL) {
        pkgName = _path.default.isAbsolute(installSpec) ? installSpec : _path.default.resolve(installSpec);
      } else {
        let name;
        const splits = installSpec.split('@');

        if (installSpec[0] === '@') {
          [name, pkgVer] = [`@${splits[1]}`, splits[2]];
        } else {
          [name, pkgVer] = splits;
        }

        if (installType === _extensionConfig.INSTALL_TYPE_NPM) {
          pkgName = name;
        } else {
          const knownNames = Object.keys(this.knownExtensions);

          if (!_lodash.default.includes(knownNames, name)) {
            const msg = `Could not resolve ${this.type}; are you sure it's in the list ` + `of supported ${this.type}s? ${JSON.stringify(knownNames)}`;
            throw new Error(msg);
          }

          pkgName = this.knownExtensions[name];
          installType = _extensionConfig.INSTALL_TYPE_NPM;
        }
      }

      extData = await this.installViaNpm({
        installSpec,
        pkgName,
        pkgVer
      });
    }

    const extName = extData[`${this.type}Name`];
    delete extData[`${this.type}Name`];

    if (this.config.isInstalled(extName)) {
      throw new Error(`A ${this.type} named '${extName}' is already installed. ` + `Did you mean to update? 'appium ${this.type} update'. See ` + `installed ${this.type}s with 'appium ${this.type} list --installed'.`);
    }

    const extManifest = { ...extData,
      installType,
      installSpec
    };
    await this.config.addExtension(extName, extManifest);

    if (await _support.env.hasAppiumDependency(this.config.appiumHome)) {
      await (0, _packageChanged.packageDidChange)(this.config.appiumHome);
    }

    (0, _utils.log)(this.isJsonOutput, this.getPostInstallText({
      extName,
      extData
    }));
    return this.config.installedExtensions;
  }

  async installViaNpm({
    installSpec,
    pkgName,
    pkgVer
  }) {
    const npmSpec = `${pkgName}${pkgVer ? '@' + pkgVer : ''}`;
    const specMsg = npmSpec === installSpec ? '' : ` using NPM install spec '${npmSpec}'`;
    const msg = `Installing '${installSpec}'${specMsg}`;

    try {
      const pkgJsonData = await (0, _utils.spinWith)(this.isJsonOutput, msg, async () => await _support.npm.installPackage(this.config.appiumHome, pkgName, {
        pkgVer
      }));
      return this.getExtensionFields(pkgJsonData, installSpec);
    } catch (err) {
      throw new Error(`Encountered an error when installing package: ${err.message}`);
    }
  }

  getPostInstallText(args) {
    throw new Error('Must be implemented in final class');
  }

  getExtensionFields(pkgJsonData, installSpec) {
    if (!pkgJsonData.appium) {
      throw new Error(`Installed driver did not have an 'appium' section in its ` + `package.json file as expected`);
    }

    const {
      appium,
      name,
      version
    } = pkgJsonData;
    this.validateExtensionFields(appium, installSpec);
    const result = { ...appium,
      pkgName: name,
      version
    };
    return result;
  }

  validateExtensionFields(extMetadata, installSpec) {
    throw new Error('Must be implemented in final class');
  }

  async _uninstall({
    installSpec
  }) {
    if (!this.config.isInstalled(installSpec)) {
      throw new Error(`Can't uninstall ${this.type} '${installSpec}'; it is not installed`);
    }

    const installPath = this.config.getInstallPath(installSpec);

    try {
      await _support.fs.rimraf(installPath);
    } finally {
      await this.config.removeExtension(installSpec);
    }

    (0, _utils.log)(this.isJsonOutput, `Successfully uninstalled ${this.type} '${installSpec}'`.green);
    return this.config.installedExtensions;
  }

  async _update({
    installSpec,
    unsafe
  }) {
    const shouldUpdateAll = installSpec === UPDATE_ALL;

    if (!shouldUpdateAll && !this.config.isInstalled(installSpec)) {
      throw new Error(`The ${this.type} '${installSpec}' was not installed, so can't be updated`);
    }

    const extsToUpdate = shouldUpdateAll ? Object.keys(this.config.installedExtensions) : [installSpec];
    const errors = {};
    const updates = {};

    for (const e of extsToUpdate) {
      try {
        await (0, _utils.spinWith)(this.isJsonOutput, `Checking if ${this.type} '${e}' is updatable`, () => {
          if (this.config.installedExtensions[e].installType !== _extensionConfig.INSTALL_TYPE_NPM) {
            throw new NotUpdatableError();
          }
        });
        const update = await (0, _utils.spinWith)(this.isJsonOutput, `Checking if ${this.type} '${e}' needs an update`, async () => {
          const update = await this.checkForExtensionUpdate(e);

          if (!(update.safeUpdate || update.unsafeUpdate)) {
            throw new NoUpdatesAvailableError();
          }

          return update;
        });

        if (!unsafe && !update.safeUpdate) {
          throw new Error(`The ${this.type} '${e}' has a major revision update ` + `(${update.current} => ${update.unsafeUpdate}), which could include ` + `breaking changes. If you want to apply this update, re-run with --unsafe`);
        }

        const updateVer = unsafe && update.unsafeUpdate ? update.unsafeUpdate : update.safeUpdate;
        await (0, _utils.spinWith)(this.isJsonOutput, `Updating driver '${e}' from ${update.current} to ${updateVer}`, async () => await this.updateExtension(e, updateVer));
        updates[e] = {
          from: update.current,
          to: updateVer
        };
      } catch (err) {
        errors[e] = err;
      }
    }

    (0, _utils.log)(this.isJsonOutput, 'Update report:');

    for (const [e, update] of _lodash.default.toPairs(updates)) {
      (0, _utils.log)(this.isJsonOutput, `- ${this.type} ${e} updated: ${update.from} => ${update.to}`.green);
    }

    for (const [e, err] of _lodash.default.toPairs(errors)) {
      if (err instanceof NotUpdatableError) {
        (0, _utils.log)(this.isJsonOutput, `- '${e}' was not installed via npm, so we could not check ` + `for updates`.yellow);
      } else if (err instanceof NoUpdatesAvailableError) {
        (0, _utils.log)(this.isJsonOutput, `- '${e}' had no updates available`.yellow);
      } else {
        (0, _utils.log)(this.isJsonOutput, `- '${e}' failed to update: ${err}`.red);
      }
    }

    return {
      updates,
      errors
    };
  }

  async checkForExtensionUpdate(ext) {
    const {
      version,
      pkgName
    } = this.config.installedExtensions[ext];
    let unsafeUpdate = await _support.npm.getLatestVersion(this.config.appiumHome, pkgName);
    let safeUpdate = await _support.npm.getLatestSafeUpgradeVersion(this.config.appiumHome, pkgName, version);

    if (!_support.util.compareVersions(unsafeUpdate, '>', version)) {
      unsafeUpdate = null;
      safeUpdate = null;
    }

    if (unsafeUpdate && unsafeUpdate === safeUpdate) {
      unsafeUpdate = null;
    }

    if (safeUpdate && !_support.util.compareVersions(safeUpdate, '>', version)) {
      safeUpdate = null;
    }

    return {
      current: version,
      safeUpdate,
      unsafeUpdate
    };
  }

  async updateExtension(installSpec, version) {
    const {
      pkgName
    } = this.config.installedExtensions[installSpec];
    await _support.fs.rimraf(this.config.getInstallPath(installSpec));
    const extData = await this.installViaNpm({
      installSpec,
      pkgName,
      pkgVer: version
    });
    delete extData[`${this.type}Name`];
    await this.config.updateExtension(installSpec, extData);
  }

  async _run({
    installSpec,
    scriptName
  }) {
    if (!_lodash.default.has(this.config.installedExtensions, installSpec)) {
      throw new Error(`please install the ${this.type} first`);
    }

    const extConfig = this.config.installedExtensions[installSpec];

    if (!extConfig.scripts) {
      throw new Error(`The ${this.type} named '${installSpec}' does not contain the ` + `"scripts" field underneath the "appium" field in its package.json`);
    }

    const extScripts = extConfig.scripts;

    if (!_lodash.default.isPlainObject(extScripts)) {
      throw new Error(`The ${this.type} named '${installSpec}' "scripts" field must be a plain object`);
    }

    if (!_lodash.default.has(extScripts, scriptName)) {
      throw new Error(`The ${this.type} named '${installSpec}' does not support the script: '${scriptName}'`);
    }

    const runner = new _teen_process.SubProcess(process.execPath, [extScripts[scriptName]], {
      cwd: this.config.getInstallPath(installSpec)
    });
    const output = new _utils.RingBuffer(50);
    runner.on('stream-line', line => {
      output.enqueue(line);
      (0, _utils.log)(this.isJsonOutput, line);
    });
    await runner.start(0);

    try {
      await runner.join();
      (0, _utils.log)(this.isJsonOutput, `${scriptName} successfully ran`.green);
      return {
        output: output.getBuff()
      };
    } catch (err) {
      (0, _utils.log)(this.isJsonOutput, `Encountered an error when running '${scriptName}': ${err.message}`.red);
      return {
        error: err.message,
        output: output.getBuff()
      };
    }
  }

}

exports.ExtensionCommand = ExtensionCommand;
var _default = ExtensionCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,