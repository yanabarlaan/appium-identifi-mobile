"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtensionArgs = void 0;
exports.getServerArgs = getServerArgs;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _extensionConfig = require("../extension/extension-config");

var _cliArgs = require("../schema/cli-args");

const DRIVER_EXAMPLE = 'xcuitest';
const PLUGIN_EXAMPLE = 'find_by_image';
const INSTALL_TYPES_ARRAY = [..._extensionConfig.INSTALL_TYPES];
const EXTENSION_TYPES = new Set([_constants.DRIVER_TYPE, _constants.PLUGIN_TYPE]);
const globalExtensionArgs = new Map([[['--json'], {
  required: false,
  default: false,
  action: 'store_true',
  help: 'Use JSON for output format',
  dest: 'json'
}]]);

const getExtensionArgs = _lodash.default.memoize(function getExtensionArgs() {
  const extensionArgs = {};

  for (const type of EXTENSION_TYPES) {
    extensionArgs[type] = {
      [_constants.EXT_SUBCOMMAND_LIST]: makeListArgs(type),
      [_constants.EXT_SUBCOMMAND_INSTALL]: makeInstallArgs(type),
      [_constants.EXT_SUBCOMMAND_UNINSTALL]: makeUninstallArgs(type),
      [_constants.EXT_SUBCOMMAND_UPDATE]: makeUpdateArgs(type),
      [_constants.EXT_SUBCOMMAND_RUN]: makeRunArgs(type)
    };
  }

  return extensionArgs;
});

exports.getExtensionArgs = getExtensionArgs;

function makeListArgs(type) {
  return new Map([...globalExtensionArgs, [['--installed'], {
    required: false,
    default: false,
    action: 'store_true',
    help: `List only installed ${type}s`,
    dest: 'showInstalled'
  }], [['--updates'], {
    required: false,
    default: false,
    action: 'store_true',
    help: 'Show information about newer versions',
    dest: 'showUpdates'
  }]]);
}

function makeInstallArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to install, for example: ` + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['--source'], {
    required: false,
    default: null,
    choices: INSTALL_TYPES_ARRAY,
    help: `Where to look for the ${type} if it is not one of Appium's verified ` + `${type}s. Possible values: ${INSTALL_TYPES_ARRAY.join(', ')}`,
    dest: 'installType'
  }], [['--package'], {
    required: false,
    default: null,
    type: 'str',
    help: `If installing from Git or GitHub, the package name, as defined in the plugin's ` + `package.json file in the "name" field, cannot be determined automatically, and ` + `should be reported here, otherwise the install will probably fail.`,
    dest: 'packageName'
  }]]);
}

function makeUninstallArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: 'Name of the driver to uninstall, for example: ' + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }]]);
}

function makeUpdateArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to update, or the word "installed" to update all installed ` + `${type}s. To see available updates, run "appium ${type} list --installed --updates". ` + 'For example: ' + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['--unsafe'], {
    required: false,
    default: false,
    action: 'store_true',
    help: `Include updates that might have a new major revision, and potentially include ` + `breaking changes`
  }]]);
}

function makeRunArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to run a script from, for example: ` + type === _constants.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['scriptName'], {
    default: null,
    type: 'str',
    help: `Name of the script to run from the ${type}. The script name must be cached ` + `inside the "scripts" field under "appium" inside the ${type}'s "package.json" file`
  }]]);
}

function getServerArgs() {
  return new Map([...(0, _cliArgs.toParserArgs)(), ...serverArgsDisallowedInConfig]);
}

const serverArgsDisallowedInConfig = new Map([[['--shell'], {
  required: false,
  help: 'Enter REPL mode',
  action: 'store_const',
  const: true,
  dest: 'shell'
}], [['--show-build-info'], {
  dest: 'showBuildInfo',
  action: 'store_const',
  const: true,
  required: false,
  help: 'Show info about the Appium build and exit'
}], [['--show-config'], {
  dest: 'showConfig',
  action: 'store_const',
  const: true,
  required: false,
  help: 'Show the current Appium configuration and exit'
}], [['--config'], {
  dest: 'configFile',
  type: 'string',
  required: false,
  help: 'Explicit path to Appium configuration file'
}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEUklWRVJfRVhBTVBMRSIsIlBMVUdJTl9FWEFNUExFIiwiSU5TVEFMTF9UWVBFU19BUlJBWSIsIklOU1RBTExfVFlQRVMiLCJFWFRFTlNJT05fVFlQRVMiLCJTZXQiLCJEUklWRVJfVFlQRSIsIlBMVUdJTl9UWVBFIiwiZ2xvYmFsRXh0ZW5zaW9uQXJncyIsIk1hcCIsInJlcXVpcmVkIiwiZGVmYXVsdCIsImFjdGlvbiIsImhlbHAiLCJkZXN0IiwiZ2V0RXh0ZW5zaW9uQXJncyIsIl8iLCJtZW1vaXplIiwiZXh0ZW5zaW9uQXJncyIsInR5cGUiLCJFWFRfU1VCQ09NTUFORF9MSVNUIiwibWFrZUxpc3RBcmdzIiwiRVhUX1NVQkNPTU1BTkRfSU5TVEFMTCIsIm1ha2VJbnN0YWxsQXJncyIsIkVYVF9TVUJDT01NQU5EX1VOSU5TVEFMTCIsIm1ha2VVbmluc3RhbGxBcmdzIiwiRVhUX1NVQkNPTU1BTkRfVVBEQVRFIiwibWFrZVVwZGF0ZUFyZ3MiLCJFWFRfU1VCQ09NTUFORF9SVU4iLCJtYWtlUnVuQXJncyIsImNob2ljZXMiLCJqb2luIiwiZ2V0U2VydmVyQXJncyIsInNlcnZlckFyZ3NEaXNhbGxvd2VkSW5Db25maWciLCJjb25zdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGkvYXJncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBEUklWRVJfVFlQRSwgUExVR0lOX1RZUEUsIEVYVF9TVUJDT01NQU5EX0lOU1RBTEwsIEVYVF9TVUJDT01NQU5EX0xJU1QsIEVYVF9TVUJDT01NQU5EX1JVTiwgRVhUX1NVQkNPTU1BTkRfVU5JTlNUQUxMLCBFWFRfU1VCQ09NTUFORF9VUERBVEUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSU5TVEFMTF9UWVBFUyB9IGZyb20gJy4uL2V4dGVuc2lvbi9leHRlbnNpb24tY29uZmlnJztcbmltcG9ydCB7IHRvUGFyc2VyQXJncyB9IGZyb20gJy4uL3NjaGVtYS9jbGktYXJncyc7XG5jb25zdCBEUklWRVJfRVhBTVBMRSA9ICd4Y3VpdGVzdCc7XG5jb25zdCBQTFVHSU5fRVhBTVBMRSA9ICdmaW5kX2J5X2ltYWdlJztcblxuLyoqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIHBhc3MgdGhlIGFycmF5IGludG8gYGFyZ3BhcnNlYC4gYGFyZ3BhcnNlYCBpcyBiYWQgYW5kIG11dGF0ZXMgdGhpbmdzLiBXZSBkb24ndCB3YW50IHRoYXQuXG4gKiBCYWQgYGFyZ3BhcnNlYCEgQmFkIVxuICovXG5jb25zdCBJTlNUQUxMX1RZUEVTX0FSUkFZID0gWy4uLklOU1RBTExfVFlQRVNdO1xuXG4vKiogQHR5cGUge1NldDxFeHRlbnNpb25UeXBlPn0gKi9cbmNvbnN0IEVYVEVOU0lPTl9UWVBFUyA9IG5ldyBTZXQoW0RSSVZFUl9UWVBFLCBQTFVHSU5fVFlQRV0pO1xuXG4vLyB0aGlzIHNldCBvZiBhcmdzIHdvcmtzIGZvciBib3RoIGRyaXZlcnMgYW5kIHBsdWdpbnMgKCdleHRlbnNpb25zJylcbi8qKiBAdHlwZSB7QXJndW1lbnREZWZpbml0aW9uc30gKi9cbmNvbnN0IGdsb2JhbEV4dGVuc2lvbkFyZ3MgPSBuZXcgTWFwKFtcbiAgW1snLS1qc29uJ10sIHtcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgYWN0aW9uOiAnc3RvcmVfdHJ1ZScsXG4gICAgaGVscDogJ1VzZSBKU09OIGZvciBvdXRwdXQgZm9ybWF0JyxcbiAgICBkZXN0OiAnanNvbidcbiAgfV1cbl0pO1xuXG4vKipcbiAqIEJ1aWxkcyBhIFJlY29yZCBvZiBleHRlbnNpb24gdHlwZXMgdG8gYSBSZWNvcmQgb2Ygc3ViY29tbWFuZHMgdG8gdGhlaXIgYXJndW1lbnQgZGVmaW5pdGlvbnNcbiAqL1xuY29uc3QgZ2V0RXh0ZW5zaW9uQXJncyA9IF8ubWVtb2l6ZShmdW5jdGlvbiBnZXRFeHRlbnNpb25BcmdzICgpIHtcbiAgY29uc3QgZXh0ZW5zaW9uQXJncyA9IHt9O1xuICBmb3IgKGNvbnN0IHR5cGUgb2YgRVhURU5TSU9OX1RZUEVTKSB7XG4gICAgZXh0ZW5zaW9uQXJnc1t0eXBlXSA9IHtcbiAgICAgIFtFWFRfU1VCQ09NTUFORF9MSVNUXTogbWFrZUxpc3RBcmdzKHR5cGUpLFxuICAgICAgW0VYVF9TVUJDT01NQU5EX0lOU1RBTExdOiBtYWtlSW5zdGFsbEFyZ3ModHlwZSksXG4gICAgICBbRVhUX1NVQkNPTU1BTkRfVU5JTlNUQUxMXTogbWFrZVVuaW5zdGFsbEFyZ3ModHlwZSksXG4gICAgICBbRVhUX1NVQkNPTU1BTkRfVVBEQVRFXTogbWFrZVVwZGF0ZUFyZ3ModHlwZSksXG4gICAgICBbRVhUX1NVQkNPTU1BTkRfUlVOXTogbWFrZVJ1bkFyZ3ModHlwZSksXG4gICAgfTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHtSZWNvcmQ8RXh0ZW5zaW9uVHlwZSwgUmVjb3JkPGltcG9ydCgnLi4vLi4vdHlwZXMvY2xpJykuQ2xpRXh0ZW5zaW9uU3ViY29tbWFuZCxBcmd1bWVudERlZmluaXRpb25zPj59ICovKGV4dGVuc2lvbkFyZ3MpO1xufSk7XG5cbi8qKlxuICogTWFrZXMgdGhlIG9wdHMgZm9yIHRoZSBgbGlzdGAgc3ViY29tbWFuZCBmb3IgZWFjaCBleHRlbnNpb24gdHlwZS5cbiAqIEBwYXJhbSB7RXh0ZW5zaW9uVHlwZX0gdHlwZVxuICogQHJldHVybnMge0FyZ3VtZW50RGVmaW5pdGlvbnN9XG4gKi9cbmZ1bmN0aW9uIG1ha2VMaXN0QXJncyAodHlwZSkge1xuICByZXR1cm4gbmV3IE1hcChbXG4gICAgLi4uZ2xvYmFsRXh0ZW5zaW9uQXJncyxcbiAgICBbWyctLWluc3RhbGxlZCddLCB7XG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIGFjdGlvbjogJ3N0b3JlX3RydWUnLFxuICAgICAgaGVscDogYExpc3Qgb25seSBpbnN0YWxsZWQgJHt0eXBlfXNgLFxuICAgICAgZGVzdDogJ3Nob3dJbnN0YWxsZWQnXG4gICAgfV0sXG4gICAgW1snLS11cGRhdGVzJ10sIHtcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgYWN0aW9uOiAnc3RvcmVfdHJ1ZScsXG4gICAgICBoZWxwOiAnU2hvdyBpbmZvcm1hdGlvbiBhYm91dCBuZXdlciB2ZXJzaW9ucycsXG4gICAgICBkZXN0OiAnc2hvd1VwZGF0ZXMnXG4gICAgfV1cbiAgXSk7XG59XG5cbi8qKlxuICogTWFrZXMgdGhlIG9wdHMgZm9yIHRoZSBgaW5zdGFsbGAgc3ViY29tbWFuZCBmb3IgZWFjaCBleHRlbnNpb24gdHlwZVxuICogQHBhcmFtIHtFeHRlbnNpb25UeXBlfSB0eXBlXG4gKiBAcmV0dXJucyB7QXJndW1lbnREZWZpbml0aW9uc31cbiAqL1xuZnVuY3Rpb24gbWFrZUluc3RhbGxBcmdzICh0eXBlKSB7XG4gIHJldHVybiBuZXcgTWFwKFtcbiAgICAuLi5nbG9iYWxFeHRlbnNpb25BcmdzLFxuICAgIFtbdHlwZV0sIHtcbiAgICAgIHR5cGU6ICdzdHInLFxuICAgICAgaGVscDogYE5hbWUgb2YgdGhlICR7dHlwZX0gdG8gaW5zdGFsbCwgZm9yIGV4YW1wbGU6IGAgK1xuICAgICAgICAgICAgdHlwZSA9PT0gRFJJVkVSX1RZUEUgPyBEUklWRVJfRVhBTVBMRSA6IFBMVUdJTl9FWEFNUExFLFxuICAgIH1dLFxuICAgIFtbJy0tc291cmNlJ10sIHtcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICBjaG9pY2VzOiBJTlNUQUxMX1RZUEVTX0FSUkFZLFxuICAgICAgaGVscDogYFdoZXJlIHRvIGxvb2sgZm9yIHRoZSAke3R5cGV9IGlmIGl0IGlzIG5vdCBvbmUgb2YgQXBwaXVtJ3MgdmVyaWZpZWQgYCArXG4gICAgICAgICAgICBgJHt0eXBlfXMuIFBvc3NpYmxlIHZhbHVlczogJHtJTlNUQUxMX1RZUEVTX0FSUkFZLmpvaW4oJywgJyl9YCxcbiAgICAgIGRlc3Q6ICdpbnN0YWxsVHlwZSdcbiAgICB9XSxcbiAgICBbWyctLXBhY2thZ2UnXSwge1xuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgIHR5cGU6ICdzdHInLFxuICAgICAgaGVscDogYElmIGluc3RhbGxpbmcgZnJvbSBHaXQgb3IgR2l0SHViLCB0aGUgcGFja2FnZSBuYW1lLCBhcyBkZWZpbmVkIGluIHRoZSBwbHVnaW4ncyBgICtcbiAgICAgICAgICAgIGBwYWNrYWdlLmpzb24gZmlsZSBpbiB0aGUgXCJuYW1lXCIgZmllbGQsIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHksIGFuZCBgICtcbiAgICAgICAgICAgIGBzaG91bGQgYmUgcmVwb3J0ZWQgaGVyZSwgb3RoZXJ3aXNlIHRoZSBpbnN0YWxsIHdpbGwgcHJvYmFibHkgZmFpbC5gLFxuICAgICAgZGVzdDogJ3BhY2thZ2VOYW1lJyxcbiAgICB9XSxcbiAgXSk7XG59XG5cblxuLyoqXG4gKiBNYWtlcyB0aGUgb3B0cyBmb3IgdGhlIGB1bmluc3RhbGxgIHN1YmNvbW1hbmQgZm9yIGVhY2ggZXh0ZW5zaW9uIHR5cGVcbiAqIEBwYXJhbSB7RXh0ZW5zaW9uVHlwZX0gdHlwZVxuICogQHJldHVybnMge0FyZ3VtZW50RGVmaW5pdGlvbnN9XG4gKi9cbmZ1bmN0aW9uIG1ha2VVbmluc3RhbGxBcmdzICh0eXBlKSB7XG4gIHJldHVybiBuZXcgTWFwKFtcbiAgICAuLi5nbG9iYWxFeHRlbnNpb25BcmdzLFxuICAgIFtbdHlwZV0sIHtcbiAgICAgIHR5cGU6ICdzdHInLFxuICAgICAgaGVscDogJ05hbWUgb2YgdGhlIGRyaXZlciB0byB1bmluc3RhbGwsIGZvciBleGFtcGxlOiAnICtcbiAgICAgICAgICAgIHR5cGUgPT09IERSSVZFUl9UWVBFID8gRFJJVkVSX0VYQU1QTEUgOiBQTFVHSU5fRVhBTVBMRVxuICAgIH1dLFxuICBdKTtcbn1cblxuLyoqXG4gKiBNYWtlcyB0aGUgb3B0cyBmb3IgdGhlIGB1cGRhdGVgIHN1YmNvbW1hbmQgZm9yIGVhY2ggZXh0ZW5zaW9uIHR5cGVcbiAqIEBwYXJhbSB7RXh0ZW5zaW9uVHlwZX0gdHlwZVxuICogQHJldHVybnMge0FyZ3VtZW50RGVmaW5pdGlvbnN9XG4gKi9cbmZ1bmN0aW9uIG1ha2VVcGRhdGVBcmdzICh0eXBlKSB7XG4gIHJldHVybiBuZXcgTWFwKFtcbiAgICAuLi5nbG9iYWxFeHRlbnNpb25BcmdzLFxuICAgIFtbdHlwZV0sIHtcbiAgICAgIHR5cGU6ICdzdHInLFxuICAgICAgaGVscDogYE5hbWUgb2YgdGhlICR7dHlwZX0gdG8gdXBkYXRlLCBvciB0aGUgd29yZCBcImluc3RhbGxlZFwiIHRvIHVwZGF0ZSBhbGwgaW5zdGFsbGVkIGAgK1xuICAgICAgICAgICAgYCR7dHlwZX1zLiBUbyBzZWUgYXZhaWxhYmxlIHVwZGF0ZXMsIHJ1biBcImFwcGl1bSAke3R5cGV9IGxpc3QgLS1pbnN0YWxsZWQgLS11cGRhdGVzXCIuIGAgK1xuICAgICAgICAgICAgJ0ZvciBleGFtcGxlOiAnICsgdHlwZSA9PT0gRFJJVkVSX1RZUEUgPyBEUklWRVJfRVhBTVBMRSA6IFBMVUdJTl9FWEFNUExFLFxuICAgIH1dLFxuICAgIFtbJy0tdW5zYWZlJ10sIHtcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgYWN0aW9uOiAnc3RvcmVfdHJ1ZScsXG4gICAgICBoZWxwOiBgSW5jbHVkZSB1cGRhdGVzIHRoYXQgbWlnaHQgaGF2ZSBhIG5ldyBtYWpvciByZXZpc2lvbiwgYW5kIHBvdGVudGlhbGx5IGluY2x1ZGUgYCArXG4gICAgICAgICAgICBgYnJlYWtpbmcgY2hhbmdlc2AsXG4gICAgfV0sXG4gIF0pO1xufVxuXG4vKipcbiAqIE1ha2VzIHRoZSBvcHRzIGZvciB0aGUgYHJ1bmAgc3ViY29tbWFuZCBmb3IgZWFjaCBleHRlbnNpb24gdHlwZVxuICogQHBhcmFtIHtFeHRlbnNpb25UeXBlfSB0eXBlXG4gKiBAcmV0dXJucyB7QXJndW1lbnREZWZpbml0aW9uc31cbiAqL1xuZnVuY3Rpb24gbWFrZVJ1bkFyZ3MgKHR5cGUpIHtcbiAgcmV0dXJuIG5ldyBNYXAoW1xuICAgIC4uLmdsb2JhbEV4dGVuc2lvbkFyZ3MsXG4gICAgW1t0eXBlXSwge1xuICAgICAgdHlwZTogJ3N0cicsXG4gICAgICBoZWxwOiBgTmFtZSBvZiB0aGUgJHt0eXBlfSB0byBydW4gYSBzY3JpcHQgZnJvbSwgZm9yIGV4YW1wbGU6IGAgK1xuICAgICAgICAgICAgdHlwZSA9PT0gRFJJVkVSX1RZUEUgPyBEUklWRVJfRVhBTVBMRSA6IFBMVUdJTl9FWEFNUExFLFxuICAgIH1dLFxuICAgIFtbJ3NjcmlwdE5hbWUnXSwge1xuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgIHR5cGU6ICdzdHInLFxuICAgICAgaGVscDogYE5hbWUgb2YgdGhlIHNjcmlwdCB0byBydW4gZnJvbSB0aGUgJHt0eXBlfS4gVGhlIHNjcmlwdCBuYW1lIG11c3QgYmUgY2FjaGVkIGAgK1xuICAgICAgICAgICAgYGluc2lkZSB0aGUgXCJzY3JpcHRzXCIgZmllbGQgdW5kZXIgXCJhcHBpdW1cIiBpbnNpZGUgdGhlICR7dHlwZX0ncyBcInBhY2thZ2UuanNvblwiIGZpbGVgXG4gICAgfV0sXG4gIF0pO1xufVxuXG4vKipcbiAqIERlcml2ZXMgdGhlIG9wdGlvbnMgZm9yIHRoZSBgc2VydmVyYCBjb21tYW5kIGZyb20gdGhlIHNjaGVtYSwgYW5kIGFkZHMgdGhlIGFyZ3VtZW50c1xuICogd2hpY2ggYXJlIGRpc2FsbG93ZWQgaW4gdGhlIGNvbmZpZyBmaWxlLlxuICogQHJldHVybnMge0FyZ3VtZW50RGVmaW5pdGlvbnN9XG4gKi9cbmZ1bmN0aW9uIGdldFNlcnZlckFyZ3MgKCkge1xuICByZXR1cm4gbmV3IE1hcChbXG4gICAgLi4udG9QYXJzZXJBcmdzKCksXG4gICAgLi4uc2VydmVyQXJnc0Rpc2FsbG93ZWRJbkNvbmZpZyxcbiAgXSk7XG59XG5cbi8qKlxuICogVGhlc2UgZG9uJ3QgbWFrZSBzZW5zZSBpbiB0aGUgY29udGV4dCBvZiBhIGNvbmZpZyBmaWxlIGZvciBvYnZpb3VzIHJlYXNvbnMuXG4gKiBAdHlwZSB7QXJndW1lbnREZWZpbml0aW9uc31cbiAqL1xuY29uc3Qgc2VydmVyQXJnc0Rpc2FsbG93ZWRJbkNvbmZpZyA9IG5ldyBNYXAoW1xuICBbXG4gICAgWyctLXNoZWxsJ10sXG4gICAge1xuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgaGVscDogJ0VudGVyIFJFUEwgbW9kZScsXG4gICAgICBhY3Rpb246ICdzdG9yZV9jb25zdCcsXG4gICAgICBjb25zdDogdHJ1ZSxcbiAgICAgIGRlc3Q6ICdzaGVsbCcsXG4gICAgfSxcbiAgXSxcbiAgW1xuICAgIFsnLS1zaG93LWJ1aWxkLWluZm8nXSxcbiAgICB7XG4gICAgICBkZXN0OiAnc2hvd0J1aWxkSW5mbycsXG4gICAgICBhY3Rpb246ICdzdG9yZV9jb25zdCcsXG4gICAgICBjb25zdDogdHJ1ZSxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGhlbHA6ICdTaG93IGluZm8gYWJvdXQgdGhlIEFwcGl1bSBidWlsZCBhbmQgZXhpdCcsXG4gICAgfSxcbiAgXSxcbiAgW1xuICAgIFsnLS1zaG93LWNvbmZpZyddLFxuICAgIHtcbiAgICAgIGRlc3Q6ICdzaG93Q29uZmlnJyxcbiAgICAgIGFjdGlvbjogJ3N0b3JlX2NvbnN0JyxcbiAgICAgIGNvbnN0OiB0cnVlLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgaGVscDogJ1Nob3cgdGhlIGN1cnJlbnQgQXBwaXVtIGNvbmZpZ3VyYXRpb24gYW5kIGV4aXQnLFxuICAgIH1cbiAgXSxcbiAgW1xuICAgIFsnLS1jb25maWcnXSxcbiAgICB7XG4gICAgICBkZXN0OiAnY29uZmlnRmlsZScsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGhlbHA6ICdFeHBsaWNpdCBwYXRoIHRvIEFwcGl1bSBjb25maWd1cmF0aW9uIGZpbGUnLFxuICAgIH0sXG4gIF0sXG5dKTtcblxuZXhwb3J0IHtcbiAgZ2V0U2VydmVyQXJncyxcbiAgZ2V0RXh0ZW5zaW9uQXJnc1xufTtcblxuLyoqXG4gKiBBbGlhc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vZXh0ZW5zaW9uL21hbmlmZXN0JykuRXh0ZW5zaW9uVHlwZX0gRXh0ZW5zaW9uVHlwZVxuICovXG5cbi8qKlxuICogQSB0dXBsZSBvZiBhcmd1bWVudCBhbGlhc2VzIGFuZCBhcmd1bWVudCBvcHRpb25zXG4gKiBAdHlwZWRlZiB7TWFwPHN0cmluZ1tdLGltcG9ydCgnYXJncGFyc2UnKS5Bcmd1bWVudE9wdGlvbnM+fSBBcmd1bWVudERlZmluaXRpb25zXG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0EsTUFBTUEsY0FBYyxHQUFHLFVBQXZCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLGVBQXZCO0FBTUEsTUFBTUMsbUJBQW1CLEdBQUcsQ0FBQyxHQUFHQyw4QkFBSixDQUE1QjtBQUdBLE1BQU1DLGVBQWUsR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FBQ0Msc0JBQUQsRUFBY0Msc0JBQWQsQ0FBUixDQUF4QjtBQUlBLE1BQU1DLG1CQUFtQixHQUFHLElBQUlDLEdBQUosQ0FBUSxDQUNsQyxDQUFDLENBQUMsUUFBRCxDQUFELEVBQWE7RUFDWEMsUUFBUSxFQUFFLEtBREM7RUFFWEMsT0FBTyxFQUFFLEtBRkU7RUFHWEMsTUFBTSxFQUFFLFlBSEc7RUFJWEMsSUFBSSxFQUFFLDRCQUpLO0VBS1hDLElBQUksRUFBRTtBQUxLLENBQWIsQ0FEa0MsQ0FBUixDQUE1Qjs7QUFhQSxNQUFNQyxnQkFBZ0IsR0FBR0MsZ0JBQUVDLE9BQUYsQ0FBVSxTQUFTRixnQkFBVCxHQUE2QjtFQUM5RCxNQUFNRyxhQUFhLEdBQUcsRUFBdEI7O0VBQ0EsS0FBSyxNQUFNQyxJQUFY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