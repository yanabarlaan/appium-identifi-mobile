"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runExtensionCommand = runExtensionCommand;

require("source-map-support/register");

var _driverCommand = _interopRequireDefault(require("./driver-command"));

var _pluginCommand = _interopRequireDefault(require("./plugin-command"));

var _constants = require("../constants");

var _utils = require("./utils");

const commandClasses = Object.freeze({
  [_constants.DRIVER_TYPE]: _driverCommand.default,
  [_constants.PLUGIN_TYPE]: _pluginCommand.default
});

async function runExtensionCommand(args, configObject) {
  let jsonResult = null;
  const {
    extensionType: type
  } = configObject;
  const extCmd = args[`${type}Command`];

  if (!extCmd) {
    throw new TypeError(`Cannot call ${type} command without a subcommand like 'install'`);
  }

  let {
    json,
    suppressOutput
  } = args;

  if (suppressOutput) {
    json = true;
  }

  const logFn = msg => (0, _utils.log)(json, msg);

  let config = configObject;
  config.log = logFn;
  const CommandClass = commandClasses[type];
  const cmd = new CommandClass({
    config,
    json
  });

  try {
    jsonResult = await cmd.execute(args);
  } catch (err) {
    if (suppressOutput) {
      throw err;
    }

    (0, _utils.errAndQuit)(json, err);
  }

  if (json && !suppressOutput) {
    console.log(JSON.stringify(jsonResult, null, _utils.JSON_SPACES));
  }

  return jsonResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kQ2xhc3NlcyIsIk9iamVjdCIsImZyZWV6ZSIsIkRSSVZFUl9UWVBFIiwiRHJpdmVyQ29tbWFuZCIsIlBMVUdJTl9UWVBFIiwiUGx1Z2luQ29tbWFuZCIsInJ1bkV4dGVuc2lvbkNvbW1hbmQiLCJhcmdzIiwiY29uZmlnT2JqZWN0IiwianNvblJlc3VsdCIsImV4dGVuc2lvblR5cGUiLCJ0eXBlIiwiZXh0Q21kIiwiVHlwZUVycm9yIiwianNvbiIsInN1cHByZXNzT3V0cHV0IiwibG9nRm4iLCJtc2ciLCJjb25maWciLCJsb2ciLCJDb21tYW5kQ2xhc3MiLCJjbWQiLCJleGVjdXRlIiwiZXJyIiwiY29uc29sZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJKU09OX1NQQUNFUyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGkvZXh0ZW5zaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxuaW1wb3J0IERyaXZlckNvbW1hbmQgZnJvbSAnLi9kcml2ZXItY29tbWFuZCc7XG5pbXBvcnQgUGx1Z2luQ29tbWFuZCBmcm9tICcuL3BsdWdpbi1jb21tYW5kJztcbmltcG9ydCB7IERSSVZFUl9UWVBFLCBQTFVHSU5fVFlQRSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBlcnJBbmRRdWl0LCBsb2csIEpTT05fU1BBQ0VTIH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGNvbW1hbmRDbGFzc2VzID0gT2JqZWN0LmZyZWV6ZSgvKiogQHR5cGUge2NvbnN0fSAqLyh7XG4gIFtEUklWRVJfVFlQRV06IERyaXZlckNvbW1hbmQsXG4gIFtQTFVHSU5fVFlQRV06IFBsdWdpbkNvbW1hbmRcbn0pKTtcblxuLyoqXG4gKiBSdW4gYSBzdWJjb21tYW5kIG9mIHRoZSAnYXBwaXVtIGRyaXZlcicgdHlwZS4gRWFjaCBzdWJjb21tYW5kIGhhcyBpdHMgb3duIHNldCBvZiBhcmd1bWVudHMgd2hpY2hcbiAqIGNhbiBiZSByZXByZXNlbnRlZCBhcyBhIEpTIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIEpTIG9iamVjdCB3aGVyZSB0aGUga2V5IGlzIHRoZSBwYXJhbWV0ZXIgbmFtZSAoYXMgZGVmaW5lZCBpblxuICogZHJpdmVyLXBhcnNlci5qcylcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCcuLi9leHRlbnNpb24vbWFuaWZlc3QnKS5FeHRlbnNpb25UeXBlfSBFeHRUeXBlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vZXh0ZW5zaW9uL2V4dGVuc2lvbi1jb25maWcnKS5FeHRlbnNpb25Db25maWc8RXh0VHlwZT59IGNvbmZpZ09iamVjdCAtIEV4dGVuc2lvbiBjb25maWcgb2JqZWN0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJ1bkV4dGVuc2lvbkNvbW1hbmQgKGFyZ3MsIGNvbmZpZ09iamVjdCkge1xuICAvLyBUT0RPIGRyaXZlciBjb25maWcgZmlsZSBzaG91bGQgYmUgbG9ja2VkIHdoaWxlIGFueSBvZiB0aGVzZSBjb21tYW5kcyBhcmVcbiAgLy8gcnVubmluZyB0byBwcmV2ZW50IHdlaXJkIHNpdHVhdGlvbnNcbiAgbGV0IGpzb25SZXN1bHQgPSBudWxsO1xuICBjb25zdCB7ZXh0ZW5zaW9uVHlwZTogdHlwZX0gPSBjb25maWdPYmplY3Q7XG4gIGNvbnN0IGV4dENtZCA9IGFyZ3NbYCR7dHlwZX1Db21tYW5kYF07XG4gIGlmICghZXh0Q21kKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQ2Fubm90IGNhbGwgJHt0eXBlfSBjb21tYW5kIHdpdGhvdXQgYSBzdWJjb21tYW5kIGxpa2UgJ2luc3RhbGwnYCk7XG4gIH1cbiAgbGV0IHtqc29uLCBzdXBwcmVzc091dHB1dH0gPSBhcmdzO1xuICBpZiAoc3VwcHJlc3NPdXRwdXQpIHtcbiAgICBqc29uID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBsb2dGbiA9IChtc2cpID0+IGxvZyhqc29uLCBtc2cpO1xuICBsZXQgY29uZmlnID0gY29uZmlnT2JqZWN0O1xuICBjb25maWcubG9nID0gbG9nRm47XG4gIGNvbnN0IENvbW1hbmRDbGFzcyA9IC8qKiBAdHlwZSB7RXh0Q29tbWFuZDxFeHRUeXBlPn0gKi8oY29tbWFuZENsYXNzZXNbdHlwZV0pO1xuICBjb25zdCBjbWQgPSBuZXcgQ29tbWFuZENsYXNzKHtjb25maWcsIGpzb259KTtcbiAgdHJ5IHtcbiAgICBqc29uUmVzdWx0ID0gYXdhaXQgY21kLmV4ZWN1dGUoYXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIGluIHRoZSBzdXBwcmVzcyBvdXRwdXQgY2FzZSwgd2UgYXJlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBpbnRlcm5hbGx5IGFuZCBzaG91bGRcbiAgICAvLyBqdXN0IHRocm93IGluc3RlYWQgb2YgcHJpbnRpbmcgYW4gZXJyb3IgYW5kIGVuZGluZyB0aGUgcHJvY2Vzc1xuICAgIGlmIChzdXBwcmVzc091dHB1dCkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICBlcnJBbmRRdWl0KGpzb24sIGVycik7XG4gIH1cblxuICBpZiAoanNvbiAmJiAhc3VwcHJlc3NPdXRwdXQpIHtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShqc29uUmVzdWx0LCBudWxsLCBKU09OX1NQQUNFUykpO1xuICB9XG5cbiAgcmV0dXJuIGpzb25SZXN1bHQ7XG59XG5cbmV4cG9ydCB7XG4gIHJ1bkV4dGVuc2lvbkNvbW1hbmQsXG59O1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCcuLi8uLi90eXBlcycpLkV4dGVuc2lvblR5cGV9IEV4dFR5cGVcbiAqIEB0eXBlZGVmIHtFeHRUeXBlIGV4dGVuZHMgaW1wb3J0KCcuLi8uLi90eXBlcycpLkRyaXZlclR5cGUgPyBpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5DbGFzczxEcml2ZXJDb21tYW5kPiA6IEV4dFR5cGUgZXh0ZW5kcyBpbXBvcnQoJy4uLy4uL3R5cGVzJykuUGx1Z2luVHlwZSA/IGltcG9ydCgnQGFwcGl1bS90eXBlcycpLkNsYXNzPFBsdWdpbkNvbW1hbmQ+IDogbmV2ZXJ9IEV4dENvbW1hbmRcbiAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQW1DO0VBQ3hELENBQUNDLHNCQUFELEdBQWVDLHNCQUR5QztFQUV4RCxDQUFDQyxzQkFBRCxHQUFlQztBQUZ5QyxDQUFuQyxDQUF2Qjs7QUFjQSxlQUFlQyxtQkFBZixDQUFvQ0MsSUFBcEMsRUFBMENDLFlBQTFDLEVBQXdEO0VBR3RELElBQUlDLFVBQVUsR0FBRyxJQUFqQjtFQUNBLE1BQU07SUFBQ0MsYUFBYSxFQUFFQztFQUFoQixJQUF3QkgsWUFBOUI7RUFDQSxNQUFNSSxNQUFNLEdBQUdMLElBQUksQ0FBRSxHQUFFSSxJQUFLLFNBQVQsQ0FBbkI7O0VBQ0EsSUFBSSxDQUFDQyxNQUFMLEVBQWE7SUFDWCxNQUFNLElBQUlDLFNBQUosQ0FBZSxlQUFjRixJQUFLLDhDQUFsQyxDQUFOO0VBQ0Q7O0VBQ0QsSUFBSTtJQUFDRyxJQUFEO0lBQU9DO0VBQVAsSUFBeUJSLElBQTdCOztFQUNBLElBQUlRLGNBQUosRUFBb0I7SUFDbEJELElBQUksR0FBRyxJQUFQO0VBQ0Q7O0VBQ0QsTUFBTUUsS0FBSyxHQUFJQyxHQUFELElBQVMsZ0JBQUlILElBQUosRUFBVUcsR0FBVixDQUF2Qjs7RUFDQSxJQUFJQyxNQUFNLEdBQUdWLFlBQWI7RUFDQVUsTUFBTSxDQUFDQyxHQUFQLEdBQWFILEtBQWI7RUFDQSxNQUFNSSxZQUFZLEdBQXNDckIsY0FBYyxDQUFDWSxJQUFELENBQXRFO0VBQ0EsTUFBTVUsR0FBRyxHQUFHLElBQUlELFlBQUosQ0FBaUI7SUFBQ0YsTUFBRDtJQUFTSjtFQUFULENBQWpCLENBQVo7O0VBQ0EsSUFBSTtJQUNGTCxVQUFVLEdBQUcsTUFBTVksR0FBRyxDQUFDQyxPQUFKLENBQVlmLElBQVosQ0FBbkI7RUFDRCxDQUZELENBRUUsT0FBT2dCLEdBQVAsRUFBWTtJQUdaLElBQUlSLGNBQUosRUFBb0I7TUFDbEIsTUFBTVEsR0FBTjtJQUNEOztJQUNELHVCQUFXVCxJQUFYLEVBQWlCUyxHQUFqQjtFQUNEOztFQUVELElBQUlULElBQUksSUFBSSxDQUFDQyxjQUFiLEVBQTZCO0lBQzNCUyxPQUFPLENBQUNMLEdBQVIsQ0FBWU0sSUFBSSxDQUFDQyxTQUFMLENBQWVqQixVQUFmLEVBQTJCLElBQTNCLEVBQWlDa0Isa0JBQWpDLENBQVo7RUFDRDs7RUFFRCxPQUFPbEIsVUFBUDtBQUNEIn0=