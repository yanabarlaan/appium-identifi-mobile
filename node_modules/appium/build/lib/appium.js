"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoDriverProxyCommandError = exports.AppiumDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _config = require("./config");

var _baseDriver = require("@appium/base-driver");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _utils = require("./utils");

var _support = require("@appium/support");

var _schema = require("./schema");

const desiredCapabilityConstraints = Object.freeze({
  automationName: {
    presence: true,
    isString: true
  },
  platformName: {
    presence: true,
    isString: true
  }
});
const sessionsListGuard = new _asyncLock.default();
const pendingDriversGuard = new _asyncLock.default();

class AppiumDriver extends _baseDriver.DriverCore {
  sessions = {};
  pendingDrivers = {};
  newCommandTimeoutMs = 0;
  pluginClasses = [];
  sessionPlugins = {};
  sessionlessPlugins = [];
  driverConfig;
  server;

  constructor(opts) {
    if (opts.tmpDir) {
      process.env.APPIUM_TMP_DIR = opts.tmpDir;
    }

    super(opts);
    this.desiredCapConstraints = desiredCapabilityConstraints;
    this.args = { ...opts
    };
    (0, _config.updateBuildInfo)().catch(err => {
      this.log.debug(err);
    });
  }

  get log() {
    if (!this._log) {
      const instanceName = `${this.constructor.name}@${_support.node.getObjectId(this).substring(0, 4)}`;
      this._log = _support.logger.getLogger(instanceName);
    }

    return this._log;
  }

  get isCommandsQueueEnabled() {
    return false;
  }

  sessionExists(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.sessionId !== null;
  }

  driverForSession(sessionId) {
    return this.sessions[sessionId];
  }

  async getStatus() {
    return {
      build: _lodash.default.clone((0, _config.getBuildInfo)())
    };
  }

  async getSessions() {
    return _lodash.default.toPairs(this.sessions).map(([id, driver]) => ({
      id,
      capabilities: driver.caps
    }));
  }

  printNewSessionAnnouncement(driverName, driverVersion, driverBaseVersion) {
    this.log.info(driverVersion ? `Appium v${_config.APPIUM_VER} creating new ${driverName} (v${driverVersion}) session` : `Appium v${_config.APPIUM_VER} creating new ${driverName} session`);
    this.log.info(`Checking BaseDriver versions for Appium and ${driverName}`);
    this.log.info(AppiumDriver.baseVersion ? `Appium's BaseDriver version is ${AppiumDriver.baseVersion}` : `Could not determine Appium's BaseDriver version`);
    this.log.info(driverBaseVersion ? `${driverName}'s BaseDriver version is ${driverBaseVersion}` : `Could not determine ${driverName}'s BaseDriver version`);
  }

  assignCliArgsToExtension(extType, extName, extInstance) {
    var _this$args$extType;

    const allCliArgsForExt = (_this$args$extType = this.args[extType]) === null || _this$args$extType === void 0 ? void 0 : _this$args$extType[extName];

    if (!_lodash.default.isEmpty(allCliArgsForExt)) {
      const defaults = (0, _schema.getDefaultsForExtension)(extType, extName);
      const cliArgs = _lodash.default.isEmpty(defaults) ? allCliArgsForExt : _lodash.default.omitBy(allCliArgsForExt, (value, key) => _lodash.default.isEqual(defaults[key], value));

      if (!_lodash.default.isEmpty(cliArgs)) {
        extInstance.cliArgs = cliArgs;
      }
    }
  }

  async createSession(jsonwpCaps, reqCaps, w3cCapabilities, driverData) {
    var _alwaysMatch, _w3cCapabilities;

    const defaultCapabilities = _lodash.default.cloneDeep(this.args.defaultCapabilities);

    const defaultSettings = (0, _utils.pullSettings)(defaultCapabilities);
    jsonwpCaps = _lodash.default.cloneDeep(jsonwpCaps);
    const jwpSettings = { ...defaultSettings,
      ...(0, _utils.pullSettings)(jsonwpCaps)
    };
    w3cCapabilities = _lodash.default.cloneDeep(w3cCapabilities);
    const w3cSettings = { ...jwpSettings,
      ...(0, _utils.pullSettings)((_alwaysMatch = ((_w3cCapabilities = w3cCapabilities) !== null && _w3cCapabilities !== void 0 ? _w3cCapabilities : {}).alwaysMatch) !== null && _alwaysMatch !== void 0 ? _alwaysMatch : {})
    };

    for (const firstMatchEntry of (_firstMatch = ((_w3cCapabilities2 = w3cCapabilities) !== null && _w3cCapabilities2 !== void 0 ? _w3cCapabilities2 : {}).firstMatch) !== null && _firstMatch !== void 0 ? _firstMatch : []) {
      var _firstMatch, _w3cCapabilities2;

      Object.assign(w3cSettings, (0, _utils.pullSettings)(firstMatchEntry));
    }

    let protocol;
    let innerSessionId, dCaps;

    try {
      const parsedCaps = (0, _utils.parseCapsForInnerDriver)(jsonwpCaps, w3cCapabilities, this.desiredCapConstraints, defaultCapabilities);
      const {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities
      } = parsedCaps;
      protocol = parsedCaps.protocol;
      const error = parsedCaps.error;

      if (error) {
        throw error;
      }

      const {
        driver: InnerDriver,
        version: driverVersion,
        driverName
      } = this.driverConfig.findMatchingDriver(desiredCaps);
      this.printNewSessionAnnouncement(InnerDriver.name, driverVersion, InnerDriver.baseVersion);

      if (this.args.sessionOverride) {
        await this.deleteAllSessions();
      }

      let runningDriversData = [];
      let otherPendingDriversData = [];
      const driverInstance = new InnerDriver(this.args, true);

      if (this.args.relaxedSecurityEnabled) {
        this.log.info(`Applying relaxed security to '${InnerDriver.name}' as per ` + `server command line argument. All insecure features will be ` + `enabled unless explicitly disabled by --deny-insecure`);
        driverInstance.relaxedSecurityEnabled = true;
      }

      if (!_lodash.default.isEmpty(this.args.denyInsecure)) {
        this.log.info('Explicitly preventing use of insecure features:');
        this.args.denyInsecure.map(a => this.log.info(`    ${a}`));
        driverInstance.denyInsecure = this.args.denyInsecure;
      }

      if (!_lodash.default.isEmpty(this.args.allowInsecure)) {
        this.log.info('Explicitly enabling use of insecure features:');
        this.args.allowInsecure.map(a => this.log.info(`    ${a}`));
        driverInstance.allowInsecure = this.args.allowInsecure;
      }

      this.assignCliArgsToExtension('driver', driverName, driverInstance);
      driverInstance.server = this.server;
      driverInstance.serverHost = this.args.address;
      driverInstance.serverPort = this.args.port;
      driverInstance.serverPath = this.args.basePath;

      try {
        var _await$this$curSessio;

        runningDriversData = (_await$this$curSessio = await this.curSessionDataForDriver(InnerDriver)) !== null && _await$this$curSessio !== void 0 ? _await$this$curSessio : [];
      } catch (e) {
        throw new _baseDriver.errors.SessionNotCreatedError(e.message);
      }

      await pendingDriversGuard.acquire(AppiumDriver.name, () => {
        this.pendingDrivers[InnerDriver.name] = this.pendingDrivers[InnerDriver.name] || [];
        otherPendingDriversData = _lodash.default.compact(this.pendingDrivers[InnerDriver.name].map(drv => drv.driverData));
        this.pendingDrivers[InnerDriver.name].push(driverInstance);
      });

      try {
        [innerSessionId, dCaps] = await driverInstance.createSession(processedJsonwpCapabilities, reqCaps, processedW3CCapabilities, [...runningDriversData, ...otherPendingDriversData]);
        protocol = driverInstance.protocol;
        this.sessions[innerSessionId] = driverInstance;
      } finally {
        await pendingDriversGuard.acquire(AppiumDriver.name, () => {
          _lodash.default.pull(this.pendingDrivers[InnerDriver.name], driverInstance);
        });
      }

      this.attachUnexpectedShutdownHandler(driverInstance, innerSessionId);
      this.log.info(`New ${InnerDriver.name} session created successfully, session ` + `${innerSessionId} added to master session list`);
      driverInstance.startNewCommandTimeout();

      if (driverInstance.isW3CProtocol() && !_lodash.default.isEmpty(w3cSettings)) {
        this.log.info(`Applying the initial values to Appium settings parsed from W3C caps: ` + JSON.stringify(w3cSettings));
        await driverInstance.updateSettings(w3cSettings);
      } else if (driverInstance.isMjsonwpProtocol() && !_lodash.default.isEmpty(jwpSettings)) {
        this.log.info(`Applying the initial values to Appium settings parsed from MJSONWP caps: ` + JSON.stringify(jwpSettings));
        await driverInstance.updateSettings(jwpSettings);
      }
    } catch (error) {
      return {
        protocol,
        error
      };
    }

    return {
      protocol,
      value: [innerSessionId, dCaps, protocol]
    };
  }

  attachUnexpectedShutdownHandler(driver, innerSessionId) {
    const onShutdown = (cause = new Error('Unknown error')) => {
      this.log.warn(`Ending session, cause was '${cause.message}'`);

      if (this.sessionPlugins[innerSessionId]) {
        for (const plugin of this.sessionPlugins[innerSessionId]) {
          if (_lodash.default.isFunction(plugin.onUnexpectedShutdown)) {
            this.log.debug(`Plugin ${plugin.name} defines an unexpected shutdown handler; calling it now`);

            try {
              plugin.onUnexpectedShutdown(driver, cause);
            } catch (e) {
              this.log.warn(`Got an error when running plugin ${plugin.name} shutdown handler: ${e}`);
            }
          } else {
            this.log.debug(`Plugin ${plugin.name} does not define an unexpected shutdown handler`);
          }
        }
      }

      this.log.info(`Removing session '${innerSessionId}' from our master session list`);
      delete this.sessions[innerSessionId];
      delete this.sessionPlugins[innerSessionId];
    };

    if (_lodash.default.isFunction(driver.onUnexpectedShutdown)) {
      driver.onUnexpectedShutdown(onShutdown);
    } else {
      this.log.warn(`Failed to attach the unexpected shutdown listener. ` + `Is 'onUnexpectedShutdown' method available for '${driver.constructor.name}'?`);
    }
  }

  async curSessionDataForDriver(InnerDriver) {
    const data = _lodash.default.compact(_lodash.default.values(this.sessions).filter(s => s.constructor.name === InnerDriver.name).map(s => s.driverData));

    for (const datum of data) {
      if (!datum) {
        throw new Error(`Problem getting session data for driver type ` + `${InnerDriver.name}; does it implement 'get driverData'?`);
      }
    }

    return data;
  }

  async deleteSession(sessionId) {
    let protocol;

    try {
      let otherSessionsData;
      const dstSession = await sessionsListGuard.acquire(AppiumDriver.name, () => {
        if (!this.sessions[sessionId]) {
          return;
        }

        const curConstructorName = this.sessions[sessionId].constructor.name;
        otherSessionsData = _lodash.default.toPairs(this.sessions).filter(([key, value]) => value.constructor.name === curConstructorName && key !== sessionId).map(([, value]) => value.driverData);
        const dstSession = this.sessions[sessionId];
        protocol = dstSession.protocol;
        this.log.info(`Removing session ${sessionId} from our master session list`);
        delete this.sessions[sessionId];
        delete this.sessionPlugins[sessionId];
        return dstSession;
      });

      if (!dstSession) {
        throw new Error('Session not found');
      }

      return {
        protocol,
        value: await dstSession.deleteSession(sessionId, otherSessionsData)
      };
    } catch (e) {
      this.log.error(`Had trouble ending session ${sessionId}: ${e.message}`);
      return {
        protocol,
        error: e
      };
    }
  }

  async deleteAllSessions(opts = {}) {
    const sessionsCount = _lodash.default.size(this.sessions);

    if (0 === sessionsCount) {
      this.log.debug('There are no active sessions for cleanup');
      return;
    }

    const {
      force = false,
      reason
    } = opts;
    this.log.debug(`Cleaning up ${_support.util.pluralize('active session', sessionsCount, true)}`);
    const cleanupPromises = force ? _lodash.default.values(this.sessions).map(drv => drv.startUnexpectedShutdown(reason && new Error(reason))) : _lodash.default.keys(this.sessions).map(id => this.deleteSession(id));

    for (const cleanupPromise of cleanupPromises) {
      try {
        await cleanupPromise;
      } catch (e) {
        this.log.debug(e);
      }
    }
  }

  pluginsForSession(sessionId = null) {
    if (sessionId) {
      if (!this.sessionPlugins[sessionId]) {
        this.sessionPlugins[sessionId] = this.createPluginInstances();
      }

      return this.sessionPlugins[sessionId];
    }

    if (_lodash.default.isEmpty(this.sessionlessPlugins)) {
      this.sessionlessPlugins = this.createPluginInstances();
    }

    return this.sessionlessPlugins;
  }

  pluginsToHandleCmd(cmd, sessionId = null) {
    return this.pluginsForSession(sessionId).filter(p => _lodash.default.isFunction(p[cmd]) || _lodash.default.isFunction(p.handle));
  }

  createPluginInstances() {
    return this.pluginClasses.map(PluginClass => {
      const name = PluginClass.pluginName;
      const plugin = new PluginClass(name);
      this.assignCliArgsToExtension('plugin', name, plugin);
      return plugin;
    });
  }

  async executeCommand(cmd, ...args) {
    var _$last;

    const isGetStatus = cmd === _baseDriver.GET_STATUS_COMMAND;
    const isUmbrellaCmd = isAppiumDriverCommand(cmd);
    const isSessionCmd = (0, _baseDriver.isSessionCommand)(cmd);
    const reqForProxy = (_$last = _lodash.default.last(args)) === null || _$last === void 0 ? void 0 : _$last.reqForProxy;

    if (reqForProxy) {
      args.pop();
    }

    let sessionId = null;
    let dstSession = null;
    let protocol = null;
    let driver = this;

    if (isSessionCmd) {
      sessionId = _lodash.default.last(args);
      dstSession = this.sessions[sessionId];

      if (!dstSession) {
        throw new Error(`The session with id '${sessionId}' does not exist`);
      }

      protocol = dstSession.protocol;

      if (!isUmbrellaCmd) {
        driver = dstSession;
      }
    }

    const plugins = this.pluginsToHandleCmd(cmd, sessionId);
    const cmdHandledBy = {
      default: false
    };

    const defaultBehavior = async () => {
      plugins.length && this.log.info(`Executing default handling behavior for command '${cmd}'`);
      cmdHandledBy.default = true;

      if (reqForProxy) {
        if (!dstSession.proxyCommand) {
          throw new NoDriverProxyCommandError();
        }

        return await dstSession.proxyCommand(reqForProxy.originalUrl, reqForProxy.method, reqForProxy.body);
      }

      if (isGetStatus) {
        return await this.getStatus();
      }

      if (isUmbrellaCmd) {
        return await _baseDriver.BaseDriver.prototype.executeCommand.call(this, cmd, ...args);
      }

      return await dstSession.executeCommand(cmd, ...args);
    };

    const wrappedCmd = this.wrapCommandWithPlugins({
      driver,
      cmd,
      args,
      plugins,
      cmdHandledBy,
      next: defaultBehavior
    });
    const res = await this.executeWrappedCommand({
      wrappedCmd,
      protocol
    });
    this.logPluginHandlerReport(plugins, {
      cmd,
      cmdHandledBy
    });

    if (cmd === _baseDriver.CREATE_SESSION_COMMAND && this.sessionlessPlugins.length && !res.error) {
      const sessionId = _lodash.default.first(res.value);

      this.log.info(`Promoting ${this.sessionlessPlugins.length} sessionless plugins to be attached ` + `to session ID ${sessionId}`);
      this.sessionPlugins[sessionId] = this.sessionlessPlugins;
      this.sessionlessPlugins = [];
    }

    return res;
  }

  wrapCommandWithPlugins({
    driver,
    cmd,
    args,
    next,
    cmdHandledBy,
    plugins
  }) {
    plugins.length && this.log.info(`Plugins which can handle cmd '${cmd}': ${plugins.map(p => p.name)}`);

    for (const plugin of plugins) {
      cmdHandledBy[plugin.name] = false;

      next = (_next => async () => {
        this.log.info(`Plugin ${plugin.name} is now handling cmd '${cmd}'`);
        cmdHandledBy[plugin.name] = true;

        if (plugin[cmd]) {
          return await plugin[cmd](_next, driver, ...args);
        }

        return await plugin.handle(_next, driver, cmd, ...args);
      })(next);
    }

    return next;
  }

  logPluginHandlerReport(plugins, {
    cmd,
    cmdHandledBy
  }) {
    if (!plugins.length) {
      return;
    }

    const didHandle = Object.keys(cmdHandledBy).filter(k => cmdHandledBy[k]);
    const didntHandle = Object.keys(cmdHandledBy).filter(k => !cmdHandledBy[k]);

    if (didntHandle.length > 0) {
      this.log.info(`Command '${cmd}' was *not* handled by the following behaviours or plugins, even ` + `though they were registered to handle it: ${JSON.stringify(didntHandle)}. The ` + `command *was* handled by these: ${JSON.stringify(didHandle)}.`);
    }
  }

  async executeWrappedCommand({
    wrappedCmd,
    protocol
  }) {
    let cmdRes,
        cmdErr,
        res = {};

    try {
      cmdRes = await wrappedCmd();
    } catch (e) {
      cmdErr = e;
    }

    if (_lodash.default.isPlainObject(cmdRes) && _lodash.default.has(cmdRes, 'protocol')) {
      res = cmdRes;
    } else {
      res.value = cmdRes;
      res.error = cmdErr;
      res.protocol = protocol;
    }

    return res;
  }

  proxyActive(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && _lodash.default.isFunction(dstSession.proxyActive) && dstSession.proxyActive(sessionId);
  }

  getProxyAvoidList(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession ? dstSession.getProxyAvoidList() : [];
  }

  canProxy(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.canProxy(sessionId);
  }

}

exports.AppiumDriver = AppiumDriver;

function isAppiumDriverCommand(cmd) {
  return !(0, _baseDriver.isSessionCommand)(cmd) || cmd === _baseDriver.DELETE_SESSION_COMMAND;
}

class NoDriverProxyCommandError extends Error {
  code = 'APPIUMERR_NO_DRIVER_PROXYCOMMAND';

  constructor() {
    super(`The default behavior for this command was to proxy, but the driver ` + `did not have the 'proxyCommand' method defined. To fully support ` + `plugins, drivers should have 'proxyCommand' set to a jwpProxy object's ` + `'command()' method, in addition to the normal 'proxyReqRes'`);
  }

}

exports.NoDriverProxyCommandError = NoDriverProxyCommandError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,