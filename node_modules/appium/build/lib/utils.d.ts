export type ParsedDriverCaps = {
    desiredCaps: Capabilities;
    protocol: string;
    processedJsonwpCapabilities?: any;
    processedW3CCapabilities?: W3CCapabilities | undefined;
};
export type InvalidCaps = {
    error: Error;
    protocol: string;
    desiredCaps?: Partial<import("@wdio/types/build/Capabilities").Capabilities & import("@wdio/types/build/Capabilities").AppiumCapabilities & {
        [x: string]: any;
    }> | undefined;
    processedJsonwpCapabilities?: any;
    processedW3CCapabilities?: W3CCapabilities | undefined;
};
export type W3CCapabilities = import('@appium/types').W3CCapabilities;
export type Capabilities = import('@appium/types').Capabilities;
export type AppiumW3CCapabilities = import('@appium/types').AppiumW3CCapabilities;
/**
 * Dumps to value to the console using `info` logger.
 *
 * @todo May want to force color to be `false` if {@link isStdoutTTY} is `false`.
 */
export const inspect: (t1: any) => void;
/**
 * Takes the caps that were provided in the request and translates them
 * into caps that can be used by the inner drivers.
 *
 * @param {any} jsonwpCapabilities
 * @param {W3CCapabilities} w3cCapabilities
 * @param {import('@appium/types').Constraints} constraints
 * @param {import('@appium/types').DefaultCapabilitiesConfig} [defaultCapabilities]
 * @returns {ParsedDriverCaps|InvalidCaps}
 */
export function parseCapsForInnerDriver(jsonwpCapabilities: any, w3cCapabilities: W3CCapabilities, constraints?: import('@appium/types').Constraints, defaultCapabilities?: import("@appium/types").DefaultCapabilitiesConfig | undefined): ParsedDriverCaps | InvalidCaps;
/**
 * Takes a capabilities objects and prefixes capabilities with `appium:`
 * @param {Capabilities} caps Desired capabilities object
 * @returns {AppiumW3CCapabilities}
 */
export function insertAppiumPrefixes(caps: Capabilities): AppiumW3CCapabilities;
export function getPackageVersion(pkgName: any): any;
/**
 * Pulls the initial values of Appium settings from the given capabilities argument.
 * Each setting item must satisfy the following format:
 * `setting[setting_name]: setting_value`
 * The capabilities argument itself gets mutated, so it does not contain parsed
 * settings anymore to avoid further parsing issues.
 * Check
 * https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/settings.md
 * for more details on the available settings.
 *
 * @param {?Object} caps - Capabilities dictionary. It is mutated if
 * one or more settings have been pulled from it
 * @return {Object} - An empty dictionary if the given caps contains no
 * setting items or a dictionary containing parsed Appium setting names along with
 * their values.
 */
export function pullSettings(caps: any | null): any;
/**
 *
 * @param {AppiumW3CCapabilities} caps
 * @returns {Capabilities}
 */
export function removeAppiumPrefixes(caps: AppiumW3CCapabilities): Capabilities;
//# sourceMappingURL=utils.d.ts.map