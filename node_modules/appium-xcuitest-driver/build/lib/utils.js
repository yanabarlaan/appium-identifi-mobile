"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_TIMEOUT_KEY = void 0;
exports.checkAppPresent = checkAppPresent;
exports.clearLogs = clearLogs;
exports.clearSystemFiles = clearSystemFiles;
exports.detectUdid = detectUdid;
exports.encodeBase64OrUpload = encodeBase64OrUpload;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.getDriverInfo = getDriverInfo;
exports.getPIDsListeningOnPort = getPIDsListeningOnPort;
exports.isLocalHost = isLocalHost;
exports.markSystemFilesForCleanup = markSystemFilesForCleanup;
exports.normalizeCommandTimeouts = normalizeCommandTimeouts;
exports.normalizePlatformVersion = normalizePlatformVersion;
exports.printUser = printUser;
exports.removeAllSessionWebSocketHandlers = removeAllSessionWebSocketHandlers;
exports.translateDeviceName = translateDeviceName;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumIosDevice = require("appium-ios-device");

var _support = require("@appium/support");

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _iosGenericSimulators = _interopRequireDefault(require("./ios-generic-simulators"));

var _url = _interopRequireDefault(require("url"));

var _os = _interopRequireDefault(require("os"));

var _semver = _interopRequireDefault(require("semver"));

const DEFAULT_TIMEOUT_KEY = 'default';
exports.DEFAULT_TIMEOUT_KEY = DEFAULT_TIMEOUT_KEY;
const XCTEST_LOG_FILES_PATTERNS = [/^Session-WebDriverAgentRunner.*\.log$/i, /^StandardOutputAndStandardError\.txt$/i];
const XCTEST_LOGS_CACHE_FOLDER_PREFIX = 'com.apple.dt.XCTest';

async function detectUdid() {
  _logger.default.debug('Auto-detecting real device udid...');

  const udids = await _appiumIosDevice.utilities.getConnectedDevices();

  if (_lodash.default.isEmpty(udids)) {
    throw new Error('No device is connected to the host');
  }

  const udid = _lodash.default.last(udids);

  if (udids.length > 1) {
    _logger.default.warn(`Multiple devices found: ${udids.join(', ')}`);

    _logger.default.warn(`Choosing '${udid}'. If this is wrong, manually set with 'udid' desired capability`);
  }

  _logger.default.debug(`Detected real device udid: '${udid}'`);

  return udid;
}

async function getAndCheckXcodeVersion() {
  let version;

  try {
    version = await _appiumXcode.default.getVersion(true);
  } catch (err) {
    _logger.default.debug(err);

    _logger.default.errorAndThrow(`Could not determine Xcode version: ${err.message}`);
  }

  if (version.versionFloat < 7.3) {
    _logger.default.errorAndThrow(`Xcode version '${version.versionString}'. Support for ` + `Xcode ${version.versionString} is not supported. ` + `Please upgrade to version 7.3 or higher`);
  }

  return version;
}

async function getAndCheckIosSdkVersion() {
  try {
    return await _appiumXcode.default.getMaxIOSSDK();
  } catch (err) {
    _logger.default.errorAndThrow(`Could not determine iOS SDK version: ${err.message}`);
  }
}

function getGenericSimulatorForIosVersion(platformVersion, deviceName) {
  let genericSimulators = _iosGenericSimulators.default[deviceName];

  if (genericSimulators) {
    genericSimulators = genericSimulators.sort(([simOne], [simTwo]) => _support.util.compareVersions(simOne, '<', simTwo) ? -1 : 1);
    let genericIosSimulator;

    for (const [platformVersionFromList, iosSimulator] of genericSimulators) {
      if (_support.util.compareVersions(platformVersionFromList, '>', platformVersion)) {
        break;
      }

      genericIosSimulator = iosSimulator;
    }

    return genericIosSimulator;
  }
}

function translateDeviceName(platformVersion, deviceName = '') {
  const deviceNameTranslated = getGenericSimulatorForIosVersion(platformVersion, deviceName.toLowerCase().trim());

  if (deviceNameTranslated) {
    _logger.default.debug(`Changing deviceName from '${deviceName}' to '${deviceNameTranslated}'`);

    return deviceNameTranslated;
  }

  return deviceName;
}

async function clearLogs(locations) {
  _logger.default.debug('Clearing log files');

  const cleanupPromises = [];

  for (const location of locations) {
    if (!(await _support.fs.exists(location))) {
      continue;
    }

    cleanupPromises.push((async () => {
      let size;

      try {
        const {
          stdout
        } = await (0, _teen_process.exec)('du', ['-sh', location]);
        size = stdout.trim().split(/\s+/)[0];
      } catch (ign) {}

      try {
        _logger.default.debug(`Deleting '${location}'. ${size ? `Freeing ${size}.` : ''}`);

        await _support.fs.rimraf(location);
      } catch (err) {
        _logger.default.warn(`Unable to delete '${location}': ${err.message}`);
      }
    })());
  }

  if (!_lodash.default.isEmpty(cleanupPromises)) {
    await _bluebird.default.all(cleanupPromises);
  }

  _logger.default.debug('Finished clearing log files');
}

const derivedDataCleanupMarkers = new Map();

async function markSystemFilesForCleanup(wda) {
  if (!wda || !(await wda.retrieveDerivedDataPath())) {
    _logger.default.warn('No WebDriverAgent derived data available, so unable to mark system files for cleanup');

    return;
  }

  const logsRoot = _path.default.resolve(await wda.retrieveDerivedDataPath(), 'Logs');

  let markersCount = 0;

  if (derivedDataCleanupMarkers.has(logsRoot)) {
    markersCount = derivedDataCleanupMarkers.get(logsRoot);
  }

  derivedDataCleanupMarkers.set(logsRoot, ++markersCount);
}

async function clearSystemFiles(wda) {
  if (!wda || !(await wda.retrieveDerivedDataPath())) {
    _logger.default.warn('No WebDriverAgent derived data available, so unable to clear system files');

    return;
  }

  const logsRoot = _path.default.resolve(await wda.retrieveDerivedDataPath(), 'Logs');

  if (derivedDataCleanupMarkers.has(logsRoot)) {
    let markersCount = derivedDataCleanupMarkers.get(logsRoot);
    derivedDataCleanupMarkers.set(logsRoot, --markersCount);

    if (markersCount > 0) {
      _logger.default.info(`Not cleaning '${logsRoot}' folder, because the other session does not expect it to be cleaned`);

      return;
    }
  }

  derivedDataCleanupMarkers.set(logsRoot, 0);
  const globPattern = `${_os.default.tmpdir()}/${XCTEST_LOGS_CACHE_FOLDER_PREFIX}*/`;
  const dstFolders = await _support.fs.glob(globPattern);

  if (_lodash.default.isEmpty(dstFolders)) {
    _logger.default.debug(`Did not find the temporary XCTest logs root at '${globPattern}'`);
  } else {
    for (const dstFolder of dstFolders) {
      let scheduledFilesCount = 0;

      _bluebird.default.resolve(_support.fs.walkDir(dstFolder, true, (itemPath, isDir) => {
        if (isDir) {
          return;
        }

        const fileName = _path.default.basename(itemPath);

        if (!XCTEST_LOG_FILES_PATTERNS.some(p => p.test(fileName))) {
          return;
        }

        _support.fs.unlink(itemPath).catch(e => {
          _logger.default.info(e.message);
        });

        scheduledFilesCount++;
      })).finally(() => {
        if (scheduledFilesCount > 0) {
          _logger.default.info(`Scheduled ${scheduledFilesCount} temporary XCTest log ` + `${_support.util.pluralize('file', scheduledFilesCount)} for cleanup in '${dstFolder}'`);
        }
      }).catch(e => {
        _logger.default.info(e.message);
      });
    }

    _logger.default.debug(`Started background XCTest logs cleanup in '${dstFolders}'`);
  }

  if (await _support.fs.exists(logsRoot)) {
    _logger.default.info(`Cleaning test logs in '${logsRoot}' folder`);

    await clearLogs([logsRoot]);
    return;
  }

  _logger.default.info(`There is no ${logsRoot} folder, so not cleaning files`);
}

async function checkAppPresent(app) {
  _logger.default.debug(`Checking whether app '${app}' is actually present on file system`);

  if (!(await _support.fs.exists(app))) {
    _logger.default.errorAndThrow(`Could not find app at '${app}'`);
  }

  _logger.default.debug('App is present');
}

async function getDriverInfo() {
  const stat = await _support.fs.stat(_path.default.resolve(__dirname, '..'));
  const built = stat.mtime.getTime();

  const pkg = require(__filename.includes('build/lib/utils') ? '../../package.json' : '../package.json');

  const version = pkg.version;
  return {
    built,
    version
  };
}

function normalizeCommandTimeouts(value) {
  if (typeof value !== 'string') {
    return value;
  }

  let result = {};

  if (!isNaN(value)) {
    result[DEFAULT_TIMEOUT_KEY] = _lodash.default.toInteger(value);
    return result;
  }

  try {
    result = JSON.parse(value);

    if (!_lodash.default.isPlainObject(result)) {
      throw new Error();
    }
  } catch (err) {
    _logger.default.errorAndThrow(`"commandTimeouts" capability should be a valid JSON object. "${value}" was given instead`);
  }

  for (let [cmd, timeout] of _lodash.default.toPairs(result)) {
    if (!_lodash.default.isInteger(timeout) || timeout <= 0) {
      _logger.default.errorAndThrow(`The timeout for "${cmd}" should be a valid natural number of milliseconds. "${timeout}" was given instead`);
    }
  }

  return result;
}

async function printUser() {
  try {
    let {
      stdout
    } = await (0, _teen_process.exec)('whoami');

    _logger.default.debug(`Current user: '${stdout.trim()}'`);
  } catch (err) {
    _logger.default.debug(`Unable to get username running server: ${err.message}`);
  }
}

async function getPIDsListeningOnPort(port, filteringFunc = null) {
  const result = [];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-ti', `tcp:${port}`]);
    result.push(...stdout.trim().split(/\n+/));
  } catch (e) {
    return result;
  }

  if (!_lodash.default.isFunction(filteringFunc)) {
    return result;
  }

  return await _bluebird.default.filter(result, async x => {
    const {
      stdout
    } = await (0, _teen_process.exec)('ps', ['-p', x, '-o', 'command']);
    return await filteringFunc(stdout);
  });
}

async function encodeBase64OrUpload(localPath, remotePath = null, uploadOptions = {}) {
  if (!(await _support.fs.exists(localPath))) {
    _logger.default.errorAndThrow(`The file at '${localPath}' does not exist or is not accessible`);
  }

  if (_lodash.default.isEmpty(remotePath)) {
    const {
      size
    } = await _support.fs.stat(localPath);

    _logger.default.debug(`The size of the file is ${_support.util.toReadableSizeString(size)}`);

    return (await _support.util.toInMemoryBase64(localPath)).toString();
  }

  const {
    user,
    pass,
    method,
    headers,
    fileFieldName,
    formFields
  } = uploadOptions;
  const options = {
    method: method || 'PUT',
    headers,
    fileFieldName,
    formFields
  };

  if (user && pass) {
    options.auth = {
      user,
      pass
    };
  }

  await _support.net.uploadFile(localPath, remotePath, options);
  return '';
}

async function removeAllSessionWebSocketHandlers(server, sessionId) {
  if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
    return;
  }

  const activeHandlers = await server.getWebSocketHandlers(sessionId);

  for (const pathname of _lodash.default.keys(activeHandlers)) {
    await server.removeWebSocketHandler(pathname);
  }
}

function isLocalHost(urlString) {
  try {
    const {
      hostname
    } = _url.default.parse(urlString);

    return ['localhost', '127.0.0.1', '::1', '::ffff:127.0.0.1'].includes(hostname);
  } catch (ign) {
    _logger.default.warn(`'${urlString}' cannot be parsed as a valid URL`);
  }

  return false;
}

function normalizePlatformVersion(originalVersion) {
  const normalizedVersion = _semver.default.coerce(originalVersion);

  if (!normalizedVersion) {
    throw new Error(`The platform version '${originalVersion}' should be a valid version number`);
  }

  return `${normalizedVersion.major}.${normalizedVersion.minor}`;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
