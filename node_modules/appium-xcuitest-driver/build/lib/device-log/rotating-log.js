"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RotatingLog = exports.MAX_LOG_ENTRIES_COUNT = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

const MAX_LOG_ENTRIES_COUNT = 10000;
exports.MAX_LOG_ENTRIES_COUNT = MAX_LOG_ENTRIES_COUNT;

class RotatingLog {
  constructor(showLogs = false, label = 'Log Label') {
    this.log = _support.logger.getLogger(label);
    this.showLogs = showLogs;
    this.logs = [];
    this.logIdxSinceLastRequest = 0;
    this.isCapturing = false;
  }

  async startCapture() {
    this.isCapturing = true;
  }

  async stopCapture() {
    this.isCapturing = false;
  }

  addLogLine() {}

  async getLogs() {
    if (this.logs.length && this.logIdxSinceLastRequest < this.logs.length) {
      let result = this.logs;

      if (this.logIdxSinceLastRequest > 0) {
        result = result.slice(this.logIdxSinceLastRequest);
      }

      this.logIdxSinceLastRequest = this.logs.length;
      return result;
    }

    return [];
  }

  async getAllLogs() {
    return _lodash.default.clone(this.logs);
  }

  get logs() {
    if (!this._logs) {
      this.logs = [];
    }

    return this._logs;
  }

  set logs(logs) {
    this._logs = logs;
  }

}

exports.RotatingLog = RotatingLog;
var _default = RotatingLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2RldmljZS1sb2cvcm90YXRpbmctbG9nLmpzIiwibmFtZXMiOlsiTUFYX0xPR19FTlRSSUVTX0NPVU5UIiwiUm90YXRpbmdMb2ciLCJjb25zdHJ1Y3RvciIsInNob3dMb2dzIiwibGFiZWwiLCJsb2ciLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJsb2dzIiwibG9nSWR4U2luY2VMYXN0UmVxdWVzdCIsImlzQ2FwdHVyaW5nIiwic3RhcnRDYXB0dXJlIiwic3RvcENhcHR1cmUiLCJhZGRMb2dMaW5lIiwiZ2V0TG9ncyIsImxlbmd0aCIsInJlc3VsdCIsInNsaWNlIiwiZ2V0QWxsTG9ncyIsIl8iLCJjbG9uZSIsIl9sb2dzIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL2RldmljZS1sb2cvcm90YXRpbmctbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmNvbnN0IE1BWF9MT0dfRU5UUklFU19DT1VOVCA9IDEwMDAwO1xuXG5jbGFzcyBSb3RhdGluZ0xvZyB7XG4gIGNvbnN0cnVjdG9yIChzaG93TG9ncyA9IGZhbHNlLCBsYWJlbCA9ICdMb2cgTGFiZWwnKSB7XG4gICAgdGhpcy5sb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKGxhYmVsKTtcblxuICAgIHRoaXMuc2hvd0xvZ3MgPSBzaG93TG9ncztcbiAgICB0aGlzLmxvZ3MgPSBbXTtcbiAgICB0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPSAwO1xuXG4gICAgdGhpcy5pc0NhcHR1cmluZyA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRDYXB0dXJlICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhpcy5pc0NhcHR1cmluZyA9IHRydWU7XG4gIH1cblxuICBhc3luYyBzdG9wQ2FwdHVyZSAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRoaXMuaXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYWRkTG9nTGluZSAoKSB7XG4gIH1cblxuICBhc3luYyBnZXRMb2dzICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgaWYgKHRoaXMubG9ncy5sZW5ndGggJiYgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IDwgdGhpcy5sb2dzLmxlbmd0aCkge1xuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMubG9ncztcbiAgICAgIGlmICh0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPiAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSh0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QpO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID0gdGhpcy5sb2dzLmxlbmd0aDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGFzeW5jIGdldEFsbExvZ3MgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICByZXR1cm4gXy5jbG9uZSh0aGlzLmxvZ3MpO1xuICB9XG5cbiAgZ2V0IGxvZ3MgKCkge1xuICAgIGlmICghdGhpcy5fbG9ncykge1xuICAgICAgdGhpcy5sb2dzID0gW107XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9sb2dzO1xuICB9XG5cbiAgc2V0IGxvZ3MgKGxvZ3MpIHtcbiAgICB0aGlzLl9sb2dzID0gbG9ncztcbiAgfVxufVxuXG5leHBvcnQgeyBSb3RhdGluZ0xvZywgTUFYX0xPR19FTlRSSUVTX0NPVU5UIH07XG5leHBvcnQgZGVmYXVsdCBSb3RhdGluZ0xvZztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxxQkFBcUIsR0FBRyxLQUE5Qjs7O0FBRUEsTUFBTUMsV0FBTixDQUFrQjtFQUNoQkMsV0FBVyxDQUFFQyxRQUFRLEdBQUcsS0FBYixFQUFvQkMsS0FBSyxHQUFHLFdBQTVCLEVBQXlDO0lBQ2xELEtBQUtDLEdBQUwsR0FBV0MsZUFBQSxDQUFPQyxTQUFQLENBQWlCSCxLQUFqQixDQUFYO0lBRUEsS0FBS0QsUUFBTCxHQUFnQkEsUUFBaEI7SUFDQSxLQUFLSyxJQUFMLEdBQVksRUFBWjtJQUNBLEtBQUtDLHNCQUFMLEdBQThCLENBQTlCO0lBRUEsS0FBS0MsV0FBTCxHQUFtQixLQUFuQjtFQUNEOztFQUVpQixNQUFaQyxZQUFZLEdBQUk7SUFDcEIsS0FBS0QsV0FBTCxHQUFtQixJQUFuQjtFQUNEOztFQUVnQixNQUFYRSxXQUFXLEdBQUk7SUFDbkIsS0FBS0YsV0FBTCxHQUFtQixLQUFuQjtFQUNEOztFQUtERyxVQUFVLEdBQUksQ0FDYjs7RUFFWSxNQUFQQyxPQUFPLEdBQUk7SUFDZixJQUFJLEtBQUtOLElBQUwsQ0FBVU8sTUFBVixJQUFvQixLQUFLTixzQkFBTCxHQUE4QixLQUFLRCxJQUFMLENBQVVPLE1BQWhFLEVBQXdFO01BQ3RFLElBQUlDLE1BQU0sR0FBRyxLQUFLUixJQUFsQjs7TUFDQSxJQUFJLEtBQUtDLHNCQUFMLEdBQThCLENBQWxDLEVBQXFDO1FBQ25DTyxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLEtBQUtSLHNCQUFsQixDQUFUO01BQ0Q7O01BQ0QsS0FBS0Esc0JBQUwsR0FBOEIsS0FBS0QsSUFBTCxDQUFVTyxNQUF4QztNQUNBLE9BQU9DLE1BQVA7SUFDRDs7SUFDRCxPQUFPLEVBQVA7RUFDRDs7RUFFZSxNQUFWRSxVQUFVLEdBQUk7SUFDbEIsT0FBT0MsZUFBQSxDQUFFQyxLQUFGLENBQVEsS0FBS1osSUFBYixDQUFQO0VBQ0Q7O0VBRU8sSUFBSkEsSUFBSSxHQUFJO0lBQ1YsSUFBSSxDQUFDLEtBQUthLEtBQVYsRUFBaUI7TUFDZixLQUFLYixJQUFMLEdBQVksRUFBWjtJQUNEOztJQUNELE9BQU8sS0FBS2EsS0FBWjtFQUNEOztFQUVPLElBQUpiLElBQUksQ0FBRUEsSUFBRixFQUFRO0lBQ2QsS0FBS2EsS0FBTCxHQUFhYixJQUFiO0VBQ0Q7O0FBbERlOzs7ZUFzREhQLFcifQ==
