"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SafariConsoleLog = void 0;

require("source-map-support/register");

var _rotatingLog = require("./rotating-log");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

class SafariConsoleLog extends _rotatingLog.RotatingLog {
  constructor(showLogs) {
    super(showLogs, 'SafariConsole');
    this.log.warning = this.log.warn;
  }

  addLogLine(err, out) {
    if (this.isCapturing) {
      this.logs = this.logs || [];

      while (this.logs.length >= _rotatingLog.MAX_LOG_ENTRIES_COUNT) {
        this.logs.shift();

        if (this.logIdxSinceLastRequest > 0) {
          this.logIdxSinceLastRequest--;
        }
      }

      const entry = {
        level: {
          error: 'SEVERE',
          warning: 'WARNING',
          log: 'FINE'
        }[out.level] || 'INFO',
        timestamp: Date.now(),
        message: JSON.stringify(out)
      };
      this.logs.push(entry);
    }

    if (_lodash.default.has(out, 'count')) {
      const count = out.count;
      out = this._previousOutput || {};
      out.text = `Previous message repeated ${_support.util.pluralize('time', count, true)}`;
    } else {
      this._previousOutput = out;
    }

    if (this.showLogs) {
      let level = 'debug';

      if (out.level === 'warning' || out.level === 'error') {
        level = out.level;
      }

      for (const line of out.text.split('\n')) {
        const url = out.url ? `${out.url} ` : '';
        this.log[level](`[${level.toUpperCase()}][${url}${out.line}:${out.column}] ${line}`);
      }
    }
  }

}

exports.SafariConsoleLog = SafariConsoleLog;
var _default = SafariConsoleLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2RldmljZS1sb2cvc2FmYXJpLWNvbnNvbGUtbG9nLmpzIiwibmFtZXMiOlsiU2FmYXJpQ29uc29sZUxvZyIsIlJvdGF0aW5nTG9nIiwiY29uc3RydWN0b3IiLCJzaG93TG9ncyIsImxvZyIsIndhcm5pbmciLCJ3YXJuIiwiYWRkTG9nTGluZSIsImVyciIsIm91dCIsImlzQ2FwdHVyaW5nIiwibG9ncyIsImxlbmd0aCIsIk1BWF9MT0dfRU5UUklFU19DT1VOVCIsInNoaWZ0IiwibG9nSWR4U2luY2VMYXN0UmVxdWVzdCIsImVudHJ5IiwibGV2ZWwiLCJlcnJvciIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJtZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJfIiwiaGFzIiwiY291bnQiLCJfcHJldmlvdXNPdXRwdXQiLCJ0ZXh0IiwidXRpbCIsInBsdXJhbGl6ZSIsImxpbmUiLCJzcGxpdCIsInVybCIsInRvVXBwZXJDYXNlIiwiY29sdW1uIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL2RldmljZS1sb2cvc2FmYXJpLWNvbnNvbGUtbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdGF0aW5nTG9nLCBNQVhfTE9HX0VOVFJJRVNfQ09VTlQgfSBmcm9tICcuL3JvdGF0aW5nLWxvZyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cblxuY2xhc3MgU2FmYXJpQ29uc29sZUxvZyBleHRlbmRzIFJvdGF0aW5nTG9nIHtcbiAgY29uc3RydWN0b3IgKHNob3dMb2dzKSB7XG4gICAgc3VwZXIoc2hvd0xvZ3MsICdTYWZhcmlDb25zb2xlJyk7XG5cbiAgICAvLyBqcyBjb25zb2xlIGhhcyBgd2FybmluZ2AgbGV2ZWwsIHNvIG1hcCB0byBgd2FybmBcbiAgICB0aGlzLmxvZy53YXJuaW5nID0gdGhpcy5sb2cud2FybjtcbiAgfVxuXG4gIGFkZExvZ0xpbmUgKGVyciwgb3V0KSB7XG4gICAgaWYgKHRoaXMuaXNDYXB0dXJpbmcpIHtcbiAgICAgIHRoaXMubG9ncyA9IHRoaXMubG9ncyB8fCBbXTtcbiAgICAgIHdoaWxlICh0aGlzLmxvZ3MubGVuZ3RoID49IE1BWF9MT0dfRU5UUklFU19DT1VOVCkge1xuICAgICAgICB0aGlzLmxvZ3Muc2hpZnQoKTtcbiAgICAgICAgaWYgKHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCA+IDApIHtcbiAgICAgICAgICB0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QtLTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKlxuICAgICAgICogVGhlIG91dHB1dCB3aWxsIGJlIGxpa2U6XG4gICAgICAgKiAgIHtcbiAgICAgICAqICAgICBcInNvdXJjZVwiOiBcImphdmFzY3JpcHRcIixcbiAgICAgICAqICAgICBcImxldmVsXCI6XCJlcnJvclwiLFxuICAgICAgICogICAgIFwidGV4dFwiOlwiUmVmZXJlbmNlRXJyb3I6IENhbid0IGZpbmQgdmFyaWFibGU6IHNfYWNjb3VudFwiLFxuICAgICAgICogICAgIFwidHlwZVwiOlwibG9nXCIsXG4gICAgICAgKiAgICAgXCJsaW5lXCI6MixcbiAgICAgICAqICAgICBcImNvbHVtblwiOjIxLFxuICAgICAgICogICAgIFwidXJsXCI6XCJodHRwczovL2Fzc2V0cy5hZG9iZWR0bS5jb20vYjQ2ZTMxOGQ4NDUyNTA4MzRlZGExMGM1YTIwODI3YzA0NWE0ZDc2Zi9zY3JpcHRzL3NhdGVsbGl0ZS01Nzg2NmY4YjY0NzQ2ZDUzYTgwMDAxMDQtc3RhZ2luZy5qc1wiLFxuICAgICAgICogICAgIFwicmVwZWF0Q291bnRcIjoxLFxuICAgICAgICogICAgIFwic3RhY2tUcmFjZVwiOlt7XG4gICAgICAgKiAgICAgICBcImZ1bmN0aW9uTmFtZVwiOlwiZ2xvYmFsIGNvZGVcIixcbiAgICAgICAqICAgICAgIFwidXJsXCI6XCJodHRwczovL2Fzc2V0cy5hZG9iZWR0bS5jb20vYjQ2ZTMxOGQ4NDUyNTA4MzRlZGExMGM1YTIwODI3YzA0NWE0ZDc2Zi9zY3JpcHRzL3NhdGVsbGl0ZS01Nzg2NmY4YjY0NzQ2ZDUzYTgwMDAxMDQtc3RhZ2luZy5qc1wiLFxuICAgICAgICogICAgICAgXCJzY3JpcHRJZFwiOlwiNlwiLFxuICAgICAgICogICAgICAgXCJsaW5lTnVtYmVyXCI6MixcbiAgICAgICAqICAgICAgIFwiY29sdW1uTnVtYmVyXCI6MjFcbiAgICAgICAqICAgICB9XVxuICAgICAgICogIH1cbiAgICAgICAqXG4gICAgICAgKiB3ZSBuZWVkLCBhdCBsZWFzdCwgYGxldmVsYCAoaW4gYWNjb3JkYW5jZSB3aXRoIEphdmEgbGV2ZWxzXG4gICAgICAgKiAoaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy9hcGkvamF2YS91dGlsL2xvZ2dpbmcvTGV2ZWwuaHRtbCkpLFxuICAgICAgICogYHRpbWVzdGFtcGAsIGFuZCBgbWVzc2FnZWAgdG8gc2F0aXNmeSB0aGUgamF2YSBjbGllbnQuIEluIG9yZGVyIHRvXG4gICAgICAgKiBwcm92aWRlIGFsbCB0aGUgaW5mb3JtYXRpb24gdG8gdGhlIGNsaWVudCwgYG1lc3NhZ2VgIGlzIHRoZSBmdWxsXG4gICAgICAgKiBvYmplY3QsIHN0cmluZ2lmaWVkLlxuICAgICAgICovXG4gICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgbGV2ZWw6IHtcbiAgICAgICAgICBlcnJvcjogJ1NFVkVSRScsXG4gICAgICAgICAgd2FybmluZzogJ1dBUk5JTkcnLFxuICAgICAgICAgIGxvZzogJ0ZJTkUnLFxuICAgICAgICB9W291dC5sZXZlbF0gfHwgJ0lORk8nLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIG1lc3NhZ2U6IEpTT04uc3RyaW5naWZ5KG91dCksXG4gICAgICB9O1xuICAgICAgdGhpcy5sb2dzLnB1c2goZW50cnkpO1xuICAgIH1cblxuICAgIGlmIChfLmhhcyhvdXQsICdjb3VudCcpKSB7XG4gICAgICAvLyB0aGlzIGlzIGEgbm90aWZpY2F0aW9uIG9mIHRoZSBwcmV2aW91cyBtZXNzYWdlIGJlaW5nIHJlcGVhdGVkXG4gICAgICAvLyB0aGlzIHNob3VsZCBfbmV2ZXJfIGJlIHRoZSBmaXJzdCBtZXNzYWdlLCBzbyB0aGUgcHJldmlvdXMgb25lIG91Z2h0IHRvXG4gICAgICAvLyBiZSBwb3B1bGF0ZWQuIElmIGl0IGlzIG5vdCwgbm90aGluZyB3aWxsIGJyZWFrLCBpdCB3aWxsIGp1c3QgbG9vayBvZGRcbiAgICAgIC8vIGluIHRoZSBvdXRwdXQgYmVsb3cgKG5vIHVybCBvciBsaW5lIG51bWJlcnMpXG4gICAgICBjb25zdCBjb3VudCA9IG91dC5jb3VudDtcbiAgICAgIG91dCA9IHRoaXMuX3ByZXZpb3VzT3V0cHV0IHx8IHt9O1xuICAgICAgb3V0LnRleHQgPSBgUHJldmlvdXMgbWVzc2FnZSByZXBlYXRlZCAke3V0aWwucGx1cmFsaXplKCd0aW1lJywgY291bnQsIHRydWUpfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNhdmUgdGhlIG1vc3QgcmVjZW50IG91dHB1dFxuICAgICAgdGhpcy5fcHJldmlvdXNPdXRwdXQgPSBvdXQ7XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IG91dHB1dCBsaWtlXG4gICAgLy8gICAgIFNhZmFyaUNvbnNvbGUgW1dBUk5JTkddW2h0dHA6Ly9hcHBpdW0uaW8gMjoxM10gTG9nIHNvbWV0aGluZyB0byB3YXJuXG4gICAgaWYgKHRoaXMuc2hvd0xvZ3MpIHtcbiAgICAgIGxldCBsZXZlbCA9ICdkZWJ1Zyc7XG4gICAgICBpZiAob3V0LmxldmVsID09PSAnd2FybmluZycgfHwgb3V0LmxldmVsID09PSAnZXJyb3InKSB7XG4gICAgICAgIGxldmVsID0gb3V0LmxldmVsO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBsaW5lIG9mIG91dC50ZXh0LnNwbGl0KCdcXG4nKSkge1xuICAgICAgICAvLyB1cmwgaXMgb3B0aW9uYWwsIHNvIGdldCBmb3JtYXR0aW5nIGhlcmVcbiAgICAgICAgY29uc3QgdXJsID0gb3V0LnVybCA/IGAke291dC51cmx9IGAgOiAnJztcbiAgICAgICAgdGhpcy5sb2dbbGV2ZWxdKGBbJHtsZXZlbC50b1VwcGVyQ2FzZSgpfV1bJHt1cmx9JHtvdXQubGluZX06JHtvdXQuY29sdW1ufV0gJHtsaW5lfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBTYWZhcmlDb25zb2xlTG9nIH07XG5leHBvcnQgZGVmYXVsdCBTYWZhcmlDb25zb2xlTG9nO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLGdCQUFOLFNBQStCQyx3QkFBL0IsQ0FBMkM7RUFDekNDLFdBQVcsQ0FBRUMsUUFBRixFQUFZO0lBQ3JCLE1BQU1BLFFBQU4sRUFBZ0IsZUFBaEI7SUFHQSxLQUFLQyxHQUFMLENBQVNDLE9BQVQsR0FBbUIsS0FBS0QsR0FBTCxDQUFTRSxJQUE1QjtFQUNEOztFQUVEQyxVQUFVLENBQUVDLEdBQUYsRUFBT0MsR0FBUCxFQUFZO0lBQ3BCLElBQUksS0FBS0MsV0FBVCxFQUFzQjtNQUNwQixLQUFLQyxJQUFMLEdBQVksS0FBS0EsSUFBTCxJQUFhLEVBQXpCOztNQUNBLE9BQU8sS0FBS0EsSUFBTCxDQUFVQyxNQUFWLElBQW9CQyxrQ0FBM0IsRUFBa0Q7UUFDaEQsS0FBS0YsSUFBTCxDQUFVRyxLQUFWOztRQUNBLElBQUksS0FBS0Msc0JBQUwsR0FBOEIsQ0FBbEMsRUFBcUM7VUFDbkMsS0FBS0Esc0JBQUw7UUFDRDtNQUNGOztNQTRCRCxNQUFNQyxLQUFLLEdBQUc7UUFDWkMsS0FBSyxFQUFFO1VBQ0xDLEtBQUssRUFBRSxRQURGO1VBRUxiLE9BQU8sRUFBRSxTQUZKO1VBR0xELEdBQUcsRUFBRTtRQUhBLEVBSUxLLEdBQUcsQ0FBQ1EsS0FKQyxLQUlTLE1BTEo7UUFNWkUsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUwsRUFOQztRQU9aQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlZixHQUFmO01BUEcsQ0FBZDtNQVNBLEtBQUtFLElBQUwsQ0FBVWMsSUFBVixDQUFlVCxLQUFmO0lBQ0Q7O0lBRUQsSUFBSVUsZUFBQSxDQUFFQyxHQUFGLENBQU1sQixHQUFOLEVBQVcsT0FBWCxDQUFKLEVBQXlCO01BS3ZCLE1BQU1tQixLQUFLLEdBQUduQixHQUFHLENBQUNtQixLQUFsQjtNQUNBbkIsR0FBRyxHQUFHLEtBQUtvQixlQUFMLElBQXdCLEVBQTlCO01BQ0FwQixHQUFHLENBQUNxQixJQUFKLEdBQVksNkJBQTRCQyxhQUFBLENBQUtDLFNBQUwsQ0FBZSxNQUFmLEVBQXVCSixLQUF2QixFQUE4QixJQUE5QixDQUFvQyxFQUE1RTtJQUNELENBUkQsTUFRTztNQUVMLEtBQUtDLGVBQUwsR0FBdUJwQixHQUF2QjtJQUNEOztJQUlELElBQUksS0FBS04sUUFBVCxFQUFtQjtNQUNqQixJQUFJYyxLQUFLLEdBQUcsT0FBWjs7TUFDQSxJQUFJUixHQUFHLENBQUNRLEtBQUosS0FBYyxTQUFkLElBQTJCUixHQUFHLENBQUNRLEtBQUosS0FBYyxPQUE3QyxFQUFzRDtRQUNwREEsS0FBSyxHQUFHUixHQUFHLENBQUNRLEtBQVo7TUFDRDs7TUFDRCxLQUFLLE1BQU1nQixJQUFYLElBQW1CeEIsR0FBRyxDQUFDcUIsSUFBSixDQUFTSSxLQUFULENBQWUsSUFBZixDQUFuQixFQUF5QztRQUV2QyxNQUFNQyxHQUFHLEdBQUcxQixHQUFHLENBQUMwQixHQUFKLEdBQVcsR0FBRTFCLEdBQUcsQ0FBQzBCLEdBQUksR0FBckIsR0FBMEIsRUFBdEM7UUFDQSxLQUFLL0IsR0FBTCxDQUFTYSxLQUFULEVBQWlCLElBQUdBLEtBQUssQ0FBQ21CLFdBQU4sRUFBb0IsS0FBSUQsR0FBSSxHQUFFMUIsR0FBRyxDQUFDd0IsSUFBSyxJQUFHeEIsR0FBRyxDQUFDNEIsTUFBTyxLQUFJSixJQUFLLEVBQWxGO01BQ0Q7SUFDRjtFQUNGOztBQWxGd0M7OztlQXNGNUJqQyxnQiJ9
