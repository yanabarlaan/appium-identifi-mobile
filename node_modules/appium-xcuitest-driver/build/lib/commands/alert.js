"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

const commands = {};
exports.commands = commands;

function toAlertParams(opts = {}) {
  const params = {};

  if (opts.buttonLabel) {
    params.name = opts.buttonLabel;
  }

  return params;
}

commands.getAlertText = async function getAlertText() {
  return await this.proxyCommand('/alert/text', 'GET');
};

commands.setAlertText = async function setAlertText(value) {
  return await this.proxyCommand('/alert/text', 'POST', {
    value
  });
};

commands.postAcceptAlert = async function postAcceptAlert(opts = {}) {
  return await this.proxyCommand('/alert/accept', 'POST', toAlertParams(opts));
};

commands.postDismissAlert = async function postDismissAlert(opts = {}) {
  return await this.proxyCommand('/alert/dismiss', 'POST', toAlertParams(opts));
};

commands.getAlertButtons = async function getAlertButtons() {
  return await this.proxyCommand('/wda/alert/buttons', 'GET');
};

commands.mobileHandleAlert = async function mobileHandleAlert(opts = {}) {
  switch (opts.action) {
    case 'accept':
      return await this.postAcceptAlert(opts);

    case 'dismiss':
      return await this.postDismissAlert(opts);

    case 'getButtons':
      return await this.getAlertButtons();

    default:
      throw new Error(`The 'action' value should be either 'accept', 'dismiss' or 'getButtons'. ` + `'${opts.action}' is provided instead.`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL2FsZXJ0LmpzIiwibmFtZXMiOlsiY29tbWFuZHMiLCJ0b0FsZXJ0UGFyYW1zIiwib3B0cyIsInBhcmFtcyIsImJ1dHRvbkxhYmVsIiwibmFtZSIsImdldEFsZXJ0VGV4dCIsInByb3h5Q29tbWFuZCIsInNldEFsZXJ0VGV4dCIsInZhbHVlIiwicG9zdEFjY2VwdEFsZXJ0IiwicG9zdERpc21pc3NBbGVydCIsImdldEFsZXJ0QnV0dG9ucyIsIm1vYmlsZUhhbmRsZUFsZXJ0IiwiYWN0aW9uIiwiRXJyb3IiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvY29tbWFuZHMvYWxlcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tbWFuZHMgPSB7fTtcblxuZnVuY3Rpb24gdG9BbGVydFBhcmFtcyAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHBhcmFtcyA9IHt9O1xuICBpZiAob3B0cy5idXR0b25MYWJlbCkge1xuICAgIHBhcmFtcy5uYW1lID0gb3B0cy5idXR0b25MYWJlbDtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5jb21tYW5kcy5nZXRBbGVydFRleHQgPSBhc3luYyBmdW5jdGlvbiBnZXRBbGVydFRleHQgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9hbGVydC90ZXh0JywgJ0dFVCcpO1xufTtcblxuY29tbWFuZHMuc2V0QWxlcnRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gc2V0QWxlcnRUZXh0ICh2YWx1ZSkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9hbGVydC90ZXh0JywgJ1BPU1QnLCB7dmFsdWV9KTtcbn07XG5cbmNvbW1hbmRzLnBvc3RBY2NlcHRBbGVydCA9IGFzeW5jIGZ1bmN0aW9uIHBvc3RBY2NlcHRBbGVydCAob3B0cyA9IHt9KSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FsZXJ0L2FjY2VwdCcsICdQT1NUJywgdG9BbGVydFBhcmFtcyhvcHRzKSk7XG59O1xuXG5jb21tYW5kcy5wb3N0RGlzbWlzc0FsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gcG9zdERpc21pc3NBbGVydCAob3B0cyA9IHt9KSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FsZXJ0L2Rpc21pc3MnLCAnUE9TVCcsIHRvQWxlcnRQYXJhbXMob3B0cykpO1xufTtcblxuY29tbWFuZHMuZ2V0QWxlcnRCdXR0b25zID0gYXN5bmMgZnVuY3Rpb24gZ2V0QWxlcnRCdXR0b25zICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL2FsZXJ0L2J1dHRvbnMnLCAnR0VUJyk7XG59O1xuXG5jb21tYW5kcy5tb2JpbGVIYW5kbGVBbGVydCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZUhhbmRsZUFsZXJ0IChvcHRzID0ge30pIHtcbiAgc3dpdGNoIChvcHRzLmFjdGlvbikge1xuICAgIGNhc2UgJ2FjY2VwdCc6XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0QWNjZXB0QWxlcnQob3B0cyk7XG4gICAgY2FzZSAnZGlzbWlzcyc6XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0RGlzbWlzc0FsZXJ0KG9wdHMpO1xuICAgIGNhc2UgJ2dldEJ1dHRvbnMnOlxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QWxlcnRCdXR0b25zKCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlICdhY3Rpb24nIHZhbHVlIHNob3VsZCBiZSBlaXRoZXIgJ2FjY2VwdCcsICdkaXNtaXNzJyBvciAnZ2V0QnV0dG9ucycuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGAnJHtvcHRzLmFjdGlvbn0nIGlzIHByb3ZpZGVkIGluc3RlYWQuYCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsTUFBTUEsUUFBUSxHQUFHLEVBQWpCOzs7QUFFQSxTQUFTQyxhQUFULENBQXdCQyxJQUFJLEdBQUcsRUFBL0IsRUFBbUM7RUFDakMsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0VBQ0EsSUFBSUQsSUFBSSxDQUFDRSxXQUFULEVBQXNCO0lBQ3BCRCxNQUFNLENBQUNFLElBQVAsR0FBY0gsSUFBSSxDQUFDRSxXQUFuQjtFQUNEOztFQUNELE9BQU9ELE1BQVA7QUFDRDs7QUFFREgsUUFBUSxDQUFDTSxZQUFULEdBQXdCLGVBQWVBLFlBQWYsR0FBK0I7RUFDckQsT0FBTyxNQUFNLEtBQUtDLFlBQUwsQ0FBa0IsYUFBbEIsRUFBaUMsS0FBakMsQ0FBYjtBQUNELENBRkQ7O0FBSUFQLFFBQVEsQ0FBQ1EsWUFBVCxHQUF3QixlQUFlQSxZQUFmLENBQTZCQyxLQUE3QixFQUFvQztFQUMxRCxPQUFPLE1BQU0sS0FBS0YsWUFBTCxDQUFrQixhQUFsQixFQUFpQyxNQUFqQyxFQUF5QztJQUFDRTtFQUFELENBQXpDLENBQWI7QUFDRCxDQUZEOztBQUlBVCxRQUFRLENBQUNVLGVBQVQsR0FBMkIsZUFBZUEsZUFBZixDQUFnQ1IsSUFBSSxHQUFHLEVBQXZDLEVBQTJDO0VBQ3BFLE9BQU8sTUFBTSxLQUFLSyxZQUFMLENBQWtCLGVBQWxCLEVBQW1DLE1BQW5DLEVBQTJDTixhQUFhLENBQUNDLElBQUQsQ0FBeEQsQ0FBYjtBQUNELENBRkQ7O0FBSUFGLFFBQVEsQ0FBQ1csZ0JBQVQsR0FBNEIsZUFBZUEsZ0JBQWYsQ0FBaUNULElBQUksR0FBRyxFQUF4QyxFQUE0QztFQUN0RSxPQUFPLE1BQU0sS0FBS0ssWUFBTCxDQUFrQixnQkFBbEIsRUFBb0MsTUFBcEMsRUFBNENOLGFBQWEsQ0FBQ0MsSUFBRCxDQUF6RCxDQUFiO0FBQ0QsQ0FGRDs7QUFJQUYsUUFBUSxDQUFDWSxlQUFULEdBQTJCLGVBQWVBLGVBQWYsR0FBa0M7RUFDM0QsT0FBTyxNQUFNLEtBQUtMLFlBQUwsQ0FBa0Isb0JBQWxCLEVBQXdDLEtBQXhDLENBQWI7QUFDRCxDQUZEOztBQUlBUCxRQUFRLENBQUNhLGlCQUFULEdBQTZCLGVBQWVBLGlCQUFmLENBQWtDWCxJQUFJLEdBQUcsRUFBekMsRUFBNkM7RUFDeEUsUUFBUUEsSUFBSSxDQUFDWSxNQUFiO0lBQ0UsS0FBSyxRQUFMO01BQ0UsT0FBTyxNQUFNLEtBQUtKLGVBQUwsQ0FBcUJSLElBQXJCLENBQWI7O0lBQ0YsS0FBSyxTQUFMO01BQ0UsT0FBTyxNQUFNLEtBQUtTLGdCQUFMLENBQXNCVCxJQUF0QixDQUFiOztJQUNGLEtBQUssWUFBTDtNQUNFLE9BQU8sTUFBTSxLQUFLVSxlQUFMLEVBQWI7O0lBQ0Y7TUFDRSxNQUFNLElBQUlHLEtBQUosQ0FBVywyRUFBRCxHQUNDLElBQUdiLElBQUksQ0FBQ1ksTUFBTyx3QkFEMUIsQ0FBTjtFQVJKO0FBV0QsQ0FaRDs7ZUFlZWQsUSJ9
