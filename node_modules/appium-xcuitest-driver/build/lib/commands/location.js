"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _baseDriver = require("@appium/base-driver");

var _appiumIosDevice = require("appium-ios-device");

var _support = require("@appium/support");

const commands = {};
exports.commands = commands;

commands.getGeoLocation = async function getGeoLocation() {
  const {
    authorizationStatus,
    latitude,
    longitude,
    altitude
  } = await this.proxyCommand('/wda/device/location', 'GET');

  if (authorizationStatus !== 3) {
    this.log.errorAndThrow(`Location service must be set to 'Always' in order to ` + `retrive the current geolocation data. Please set it up manually via ` + `'Settings > Privacy > Location Services -> WebDriverAgentRunner-Runner'`);
  }

  return {
    latitude,
    longitude,
    altitude
  };
};

commands.setGeoLocation = async function setGeoLocation(location) {
  let {
    latitude,
    longitude
  } = location;

  if (!_support.util.hasValue(latitude) || !_support.util.hasValue(longitude)) {
    throw new _baseDriver.errors.InvalidArgumentError(`Both latitude and longitude should be set`);
  }

  if (this.isSimulator()) {
    await this.opts.device.setGeolocation(`${latitude}`, `${longitude}`);
    return;
  }

  const service = await _appiumIosDevice.services.startSimulateLocationService(this.opts.udid);

  try {
    service.setLocation(latitude, longitude);
  } catch (e) {
    this.log.errorAndThrow(`Can't set the location on device '${this.opts.udid}'. Original error: ${e.message}`);
  } finally {
    service.close();
  }
};

commands.mobileResetLocationService = async function mobileResetLocationService() {
  if (this.isSimulator()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const service = await _appiumIosDevice.services.startSimulateLocationService(this.opts.udid);

  try {
    service.resetLocation();
  } catch (err) {
    this.log.errorAndThrow(`Failed to reset the location on the device on device '${this.opts.udid}'. ` + `Origianl error: ${err.message}`);
  } finally {
    service.close();
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvY2F0aW9uLmpzIiwibmFtZXMiOlsiY29tbWFuZHMiLCJnZXRHZW9Mb2NhdGlvbiIsImF1dGhvcml6YXRpb25TdGF0dXMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImFsdGl0dWRlIiwicHJveHlDb21tYW5kIiwibG9nIiwiZXJyb3JBbmRUaHJvdyIsInNldEdlb0xvY2F0aW9uIiwibG9jYXRpb24iLCJ1dGlsIiwiaGFzVmFsdWUiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsImlzU2ltdWxhdG9yIiwib3B0cyIsImRldmljZSIsInNldEdlb2xvY2F0aW9uIiwic2VydmljZSIsInNlcnZpY2VzIiwic3RhcnRTaW11bGF0ZUxvY2F0aW9uU2VydmljZSIsInVkaWQiLCJzZXRMb2NhdGlvbiIsImUiLCJtZXNzYWdlIiwiY2xvc2UiLCJtb2JpbGVSZXNldExvY2F0aW9uU2VydmljZSIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJyZXNldExvY2F0aW9uIiwiZXJyIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL2NvbW1hbmRzL2xvY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ0BhcHBpdW0vYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgc2VydmljZXMgfSBmcm9tICdhcHBpdW0taW9zLWRldmljZSc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2NhdGlvbk9iamVjdFxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsYXRpdHVkZSAtIFRoZSBsYXRpdHVkZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb25naXR1ZGUgLSBUaGUgbG9uZ2l0dWRlIG9mIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFsdGl0dWRlIC0gVGhlIGFsdGl0dWRlIG9mIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICovXG5cbi8qKlxuICogUmV0dXJucyBsb2NhdGlvbiBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKiBUaGUgZGV2aWNlIHVuZGVyIHRlc3QgbXVzdCBhbGxvdyB0aGUgbG9jYXRpb24gc2VydmljZXMgZm9yIFdEQVxuICogYXMgJ0Fsd2F5cycgdG8gZ2V0IHRoZSBsb2NhdGlvbiBkYXRhIGNvcnJlY3RseS5cbiAqXG4gKiBUaGUgJ2xhdGl0dWRlJywgJ2xvbmdpdHVkZScgYW5kICdhbHRpdHVkZScgY291bGQgYmUgemVybyBldmVuXG4gKiBpZiB0aGUgTG9jYXRpb24gU2VydmljZXMgYXJlIHNldCB0byAnQWx3YXlzJywgYmVjYXVzZSB0aGUgZGV2aWNlXG4gKiBuZWVkcyBzb21lIHRpbWUgdG8gdXBkYXRlIHRoZSBsb2NhdGlvbiBkYXRhLlxuICpcbiAqIEByZXR1cm5zIHtMb2NhdGlvbk9iamVjdH1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QgcmV0dXJucyBhbiBlcnJvciBtZXNzYWdlLlxuICogICAgICAgICAgICAgICAgIGkuZS46IHR2T1MgcmV0dXJucyB1bnN1cHBvcnRlZCBlcnJvclxuICovXG5jb21tYW5kcy5nZXRHZW9Mb2NhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIGdldEdlb0xvY2F0aW9uICgpIHtcbiAgY29uc3Qge1xuICAgIGF1dGhvcml6YXRpb25TdGF0dXMsXG4gICAgbGF0aXR1ZGUsXG4gICAgbG9uZ2l0dWRlLFxuICAgIGFsdGl0dWRlXG4gIH0gPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9kZXZpY2UvbG9jYXRpb24nLCAnR0VUJyk7XG5cbiAgLy8gJzMnIGlzICdBbHdheXMnIGluIHRoZSBwcml2YWN5XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2NvcmVsb2NhdGlvbi9jbGF1dGhvcml6YXRpb25zdGF0dXNcbiAgaWYgKGF1dGhvcml6YXRpb25TdGF0dXMgIT09IDMpIHtcbiAgICB0aGlzLmxvZy5lcnJvckFuZFRocm93KGBMb2NhdGlvbiBzZXJ2aWNlIG11c3QgYmUgc2V0IHRvICdBbHdheXMnIGluIG9yZGVyIHRvIGAgK1xuICAgICAgYHJldHJpdmUgdGhlIGN1cnJlbnQgZ2VvbG9jYXRpb24gZGF0YS4gUGxlYXNlIHNldCBpdCB1cCBtYW51YWxseSB2aWEgYCArXG4gICAgICBgJ1NldHRpbmdzID4gUHJpdmFjeSA+IExvY2F0aW9uIFNlcnZpY2VzIC0+IFdlYkRyaXZlckFnZW50UnVubmVyLVJ1bm5lcidgKTtcbiAgfVxuXG4gIHJldHVybiB7bGF0aXR1ZGUsIGxvbmdpdHVkZSwgYWx0aXR1ZGV9O1xufTtcblxuY29tbWFuZHMuc2V0R2VvTG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBzZXRHZW9Mb2NhdGlvbiAobG9jYXRpb24pIHtcbiAgbGV0IHtsYXRpdHVkZSwgbG9uZ2l0dWRlfSA9IGxvY2F0aW9uO1xuXG4gIGlmICghdXRpbC5oYXNWYWx1ZShsYXRpdHVkZSkgfHwgIXV0aWwuaGFzVmFsdWUobG9uZ2l0dWRlKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYEJvdGggbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBzaG91bGQgYmUgc2V0YCk7XG4gIH1cblxuICBpZiAodGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5zZXRHZW9sb2NhdGlvbihgJHtsYXRpdHVkZX1gLCBgJHtsb25naXR1ZGV9YCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0U2ltdWxhdGVMb2NhdGlvblNlcnZpY2UodGhpcy5vcHRzLnVkaWQpO1xuICB0cnkge1xuICAgIHNlcnZpY2Uuc2V0TG9jYXRpb24obGF0aXR1ZGUsIGxvbmdpdHVkZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLmxvZy5lcnJvckFuZFRocm93KGBDYW4ndCBzZXQgdGhlIGxvY2F0aW9uIG9uIGRldmljZSAnJHt0aGlzLm9wdHMudWRpZH0nLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgc2VydmljZS5jbG9zZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBsb2NhdGlvbiBzZXJ2aWNlIG9uIHJlYWwgZGV2aWNlLlxuICogUmFpc2VzIG5vdCBpbXBsZW1lbnRlZCBlcnJvciBmb3Igc2ltdWxhdG9yLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBkZXZpY2UgaXMgc2ltdWxhdG9yLCBvciAncmVzZXRMb2NhdGlvbicgcmFpc2VzIGFuIGVycm9yLlxuICovXG5jb21tYW5kcy5tb2JpbGVSZXNldExvY2F0aW9uU2VydmljZSA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVJlc2V0TG9jYXRpb25TZXJ2aWNlICgpIHtcbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgY29uc3Qgc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0U2ltdWxhdGVMb2NhdGlvblNlcnZpY2UodGhpcy5vcHRzLnVkaWQpO1xuICB0cnkge1xuICAgIHNlcnZpY2UucmVzZXRMb2NhdGlvbigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aGlzLmxvZy5lcnJvckFuZFRocm93KGBGYWlsZWQgdG8gcmVzZXQgdGhlIGxvY2F0aW9uIG9uIHRoZSBkZXZpY2Ugb24gZGV2aWNlICcke3RoaXMub3B0cy51ZGlkfScuIGAgK1xuICAgICAgYE9yaWdpYW5sIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICB9IGZpbmFsbHkge1xuICAgIHNlcnZpY2UuY2xvc2UoKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFu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
