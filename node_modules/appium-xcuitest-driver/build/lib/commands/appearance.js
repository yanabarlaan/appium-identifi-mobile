"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

const commands = {};
exports.commands = commands;

commands.mobileSetAppearance = async function mobileSetAppearance(opts = {}) {
  const {
    style
  } = opts;

  if (!['light', 'dark'].includes(_lodash.default.toLower(style))) {
    throw new Error(`The 'style' value is expected to equal either 'light' or 'dark'`);
  }

  if (_support.util.compareVersions(this.opts.platformVersion, '<', '12.0')) {
    throw new Error('Changing appearance is only supported since iOS 12');
  }

  if (this.isSimulator()) {
    try {
      return void (await this.opts.device.setAppearance(style));
    } catch (e) {
      this.log.debug(e.stack);
    }
  }

  try {
    return void (await this.proxyCommand('/wda/device/appearance', 'POST', {
      name: style
    }));
  } catch (e) {
    this.log.debug(e.stack);
  }

  await this.mobileSiriCommand({
    text: `Turn ${_lodash.default.toLower(style) === 'dark' ? 'on' : 'off'} dark mode`
  });
};

commands.mobileGetAppearance = async function mobileGetAppearance() {
  if (_support.util.compareVersions(this.opts.platformVersion, '<', '12.0')) {
    return 'unsupported';
  }

  let style;

  if (this.isSimulator()) {
    try {
      style = await this.opts.device.getAppearance();
    } catch (ign) {}
  }

  if (!style) {
    style = (await this.proxyCommand('/wda/device/info', 'GET')).userInterfaceStyle || 'unknown';
  }

  return {
    style
  };
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL2FwcGVhcmFuY2UuanMiLCJuYW1lcyI6WyJjb21tYW5kcyIsIm1vYmlsZVNldEFwcGVhcmFuY2UiLCJvcHRzIiwic3R5bGUiLCJpbmNsdWRlcyIsIl8iLCJ0b0xvd2VyIiwiRXJyb3IiLCJ1dGlsIiwiY29tcGFyZVZlcnNpb25zIiwicGxhdGZvcm1WZXJzaW9uIiwiaXNTaW11bGF0b3IiLCJkZXZpY2UiLCJzZXRBcHBlYXJhbmNlIiwiZSIsImxvZyIsImRlYnVnIiwic3RhY2siLCJwcm94eUNvbW1hbmQiLCJuYW1lIiwibW9iaWxlU2lyaUNvbW1hbmQiLCJ0ZXh0IiwibW9iaWxlR2V0QXBwZWFyYW5jZSIsImdldEFwcGVhcmFuY2UiLCJpZ24iLCJ1c2VySW50ZXJmYWNlU3R5bGUiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvY29tbWFuZHMvYXBwZWFyYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTZXRBcHBlYXJhbmNlT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdHlsZSAtIEN1cnJlbnRseSB0d28gc3R5bGVzIGFyZSBzdXBwb3J0ZWQ6XG4gKiAtIGRhcmtcbiAqIC0gbGlnaHRcbiAqL1xuXG4vKipcbiAqIFNldCB0aGUgZGV2aWNlJ3MgVUkgYXBwZWFyYW5jZSBzdHlsZVxuICpcbiAqIEBzaW5jZSBpT1MgMTIuMFxuICogQHBhcmFtIHtTZXRBcHBlYXJhbmNlT3B0aW9uc30gb3B0c1xuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBjdXJyZW50IHBsYXRmb3JtIGRvZXMgbm90IHN1cHBvcnQgVUlcbiAqIGFwcGVhcmFuY2UgY2hhbmdlc1xuICovXG5jb21tYW5kcy5tb2JpbGVTZXRBcHBlYXJhbmNlID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlU2V0QXBwZWFyYW5jZSAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBzdHlsZSxcbiAgfSA9IG9wdHM7XG4gIGlmICghWydsaWdodCcsICdkYXJrJ10uaW5jbHVkZXMoXy50b0xvd2VyKHN0eWxlKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSAnc3R5bGUnIHZhbHVlIGlzIGV4cGVjdGVkIHRvIGVxdWFsIGVpdGhlciAnbGlnaHQnIG9yICdkYXJrJ2ApO1xuICB9XG4gIGlmICh1dGlsLmNvbXBhcmVWZXJzaW9ucyh0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uLCAnPCcsICcxMi4wJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoYW5naW5nIGFwcGVhcmFuY2UgaXMgb25seSBzdXBwb3J0ZWQgc2luY2UgaU9TIDEyJyk7XG4gIH1cblxuICBpZiAodGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB2b2lkIChhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnNldEFwcGVhcmFuY2Uoc3R5bGUpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmxvZy5kZWJ1ZyhlLnN0YWNrKTtcbiAgICB9XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gdm9pZCAoYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvZGV2aWNlL2FwcGVhcmFuY2UnLCAnUE9TVCcsIHtuYW1lOiBzdHlsZX0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMubG9nLmRlYnVnKGUuc3RhY2spO1xuICB9XG4gIC8vIEZhbGwgYmFjayB0byB0aGUgdWdseSBTaXJpIHdvcmthcm91bmQgaWYgdGhlIGN1cnJlbnQgU0RLIGlzIHRvbyBvbGRcbiAgYXdhaXQgdGhpcy5tb2JpbGVTaXJpQ29tbWFuZCh7XG4gICAgdGV4dDogYFR1cm4gJHtfLnRvTG93ZXIoc3R5bGUpID09PSAnZGFyaycgPyAnb24nIDogJ29mZid9IGRhcmsgbW9kZWAsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBcHBlYXJhbmNlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3R5bGUgLSBUaGUgZGV2aWNlJ3MgVUkgYXBwZWFyYW5jZSB2YWx1ZS5cbiAqIFRoaXMgY291bGQgYmUgb25lIG9mOlxuICogLSBgbGlnaHRgXG4gKiAtIGBkYXJrYFxuICogLSBgdW5rbm93bmBcbiAqIC0gYHVuc3VwcG9ydGVkYFxuICovXG5cbi8qKlxuICogR2V0IHRoZSBkZXZpY2UncyBVSSBhcHBlYXJhbmNlIHN0eWxlLlxuICpcbiAqIEBzaW5jZSBYY29kZSBTREsgMTFcbiAqIEByZXR1cm5zIHtBcHBlYXJhbmNlfVxuICovXG5jb21tYW5kcy5tb2JpbGVHZXRBcHBlYXJhbmNlID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlR2V0QXBwZWFyYW5jZSAoKSB7XG4gIGlmICh1dGlsLmNvbXBhcmVWZXJzaW9ucyh0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uLCAnPCcsICcxMi4wJykpIHtcbiAgICByZXR1cm4gJ3Vuc3VwcG9ydGVkJztcbiAgfVxuXG4gIGxldCBzdHlsZTtcbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIHRyeSB7XG4gICAgICBzdHlsZSA9IGF3YWl0IHRoaXMub3B0cy5kZXZpY2UuZ2V0QXBwZWFyYW5jZSgpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgfVxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSAoYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvZGV2aWNlL2luZm8nLCAnR0VUJykpLnVzZXJJbnRlcmZhY2VTdHlsZSB8fCAndW5rbm93bic7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdHlsZSxcbiAgfTtcbn07XG5cblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjs7O0FBa0JBQSxRQUFRLENBQUNDLG1CQUFULEdBQStCLGVBQWVBLG1CQUFmLENBQW9DQyxJQUFJLEdBQUcsRUFBM0MsRUFBK0M7RUFDNUUsTUFBTTtJQUNKQztFQURJLElBRUZELElBRko7O0VBR0EsSUFBSSxDQUFDLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0JFLFFBQWxCLENBQTJCQyxlQUFBLENBQUVDLE9BQUYsQ0FBVUgsS0FBVixDQUEzQixDQUFMLEVBQW1EO0lBQ2pELE1BQU0sSUFBSUksS0FBSixDQUFXLGlFQUFYLENBQU47RUFDRDs7RUFDRCxJQUFJQyxhQUFBLENBQUtDLGVBQUwsQ0FBcUIsS0FBS1AsSUFBTCxDQUFVUSxlQUEvQixFQUFnRCxHQUFoRCxFQUFxRCxNQUFyRCxDQUFKLEVBQWtFO0lBQ2hFLE1BQU0sSUFBSUgsS0FBSixDQUFVLG9EQUFWLENBQU47RUFDRDs7RUFFRCxJQUFJLEtBQUtJLFdBQUwsRUFBSixFQUF3QjtJQUN0QixJQUFJO01BQ0YsT0FBTyxNQUFNLE1BQU0sS0FBS1QsSUFBTCxDQUFVVSxNQUFWLENBQWlCQyxhQUFqQixDQUErQlYsS0FBL0IsQ0FBWixDQUFQO0lBQ0QsQ0FGRCxDQUVFLE9BQU9XLENBQVAsRUFBVTtNQUNWLEtBQUtDLEdBQUwsQ0FBU0MsS0FBVCxDQUFlRixDQUFDLENBQUNHLEtBQWpCO0lBQ0Q7RUFDRjs7RUFDRCxJQUFJO0lBQ0YsT0FBTyxNQUFNLE1BQU0sS0FBS0MsWUFBTCxDQUFrQix3QkFBbEIsRUFBNEMsTUFBNUMsRUFBb0Q7TUFBQ0MsSUFBSSxFQUFFaEI7SUFBUCxDQUFwRCxDQUFaLENBQVA7RUFDRCxDQUZELENBRUUsT0FBT1csQ0FBUCxFQUFVO0lBQ1YsS0FBS0MsR0FBTCxDQUFTQyxLQUFULENBQWVGLENBQUMsQ0FBQ0csS0FBakI7RUFDRDs7RUFFRCxNQUFNLEtBQUtHLGlCQUFMLENBQXVCO0lBQzNCQyxJQUFJLEVBQUcsUUFBT2hCLGVBQUEsQ0FBRUMsT0FBRixDQUFVSCxLQUFWLE1BQXFCLE1BQXJCLEdBQThCLElBQTlCLEdBQXFDLEtBQU07RUFEOUIsQ0FBdkIsQ0FBTjtBQUdELENBM0JEOztBQTZDQUgsUUFBUSxDQUFDc0IsbUJBQVQsR0FBK0IsZUFBZUEsbUJBQWYsR0FBc0M7RUFDbkUsSUFBSWQsYUFBQSxDQUFLQyxlQUFMLENBQXFCLEtBQUtQLElBQUwsQ0FBVVEsZUFBL0IsRUFBZ0QsR0FBaEQsRUFBcUQsTUFBckQsQ0FBSixFQUFrRTtJQUNoRSxPQUFPLGFBQVA7RUFDRDs7RUFFRCxJQUFJUCxLQUFKOztFQUNBLElBQUksS0FBS1EsV0FBTCxFQUFKLEVBQXdCO0lBQ3RCLElBQUk7TUFDRlIsS0FBSyxHQUFHLE1BQU0sS0FBS0QsSUFBTCxDQUFVVSxNQUFWLENBQWlCVyxhQUFqQixFQUFkO0lBQ0QsQ0FGRCxDQUVFLE9BQU9DLEdBQVAsRUFBWSxDQUFFO0VBQ2pCOztFQUNELElBQUksQ0FBQ3JCLEtBQUwsRUFBWTtJQUNWQSxLQUFLLEdBQUcsQ0FBQyxNQUFNLEtBQUtlLFlBQUwsQ0FBa0Isa0JBQWxCLEVBQXNDLEtBQXRDLENBQVAsRUFBcURPLGtCQUFyRCxJQUEyRSxTQUFuRjtFQUNEOztFQUNELE9BQU87SUFDTHRCO0VBREssQ0FBUDtBQUdELENBakJEOztlQXFCZUgsUSJ9
