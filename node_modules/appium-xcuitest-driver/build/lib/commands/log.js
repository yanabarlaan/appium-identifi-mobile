"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _iosCrashLog = require("../device-log/ios-crash-log");

var _iosSimulatorLog = require("../device-log/ios-simulator-log");

var _iosDeviceLog = require("../device-log/ios-device-log");

var _logger = _interopRequireDefault(require("../logger"));

var _ws = _interopRequireDefault(require("ws"));

var _safariConsoleLog = _interopRequireDefault(require("../device-log/safari-console-log"));

var _safariNetworkLog = _interopRequireDefault(require("../device-log/safari-network-log"));

const extensions = {};

const WEBSOCKET_ENDPOINT = sessionId => `${_baseDriver.DEFAULT_WS_PATHNAME_PREFIX}/session/${sessionId}/appium/device/syslog`;

const GET_SERVER_LOGS_FEATURE = 'get_server_logs';

extensions.extractLogs = async function extractLogs(logType, logsContainer = {}) {
  if (_lodash.default.isEmpty(logsContainer)) {
    throw new Error('No logs currently available. Is the device/simulator started?');
  }

  const logObject = logsContainer[logType];
  const logs = logObject ? await logObject.getLogs() : null;

  if (logs) {
    return logs;
  }

  throw new Error(`No logs of type '${logType}' found.`);
};

extensions.supportedLogTypes = {
  syslog: {
    description: 'System Logs - Device logs for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('syslog', self.logs)
  },
  crashlog: {
    description: 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('crashlog', self.logs)
  },
  performance: {
    description: 'Performance Logs - Debug Timelines on real devices and simulators',
    getter: async self => await self.extractLogs('performance', self.logs)
  },
  safariConsole: {
    description: 'Safari Console Logs - data written to the JS console in Safari',
    getter: async self => await self.extractLogs('safariConsole', self.logs)
  },
  safariNetwork: {
    description: 'Safari Network Logs - information about network operations undertaken by Safari',
    getter: async self => await self.extractLogs('safariNetwork', self.logs)
  },
  server: {
    description: 'Appium server logs',
    getter: self => {
      self.ensureFeatureEnabled(GET_SERVER_LOGS_FEATURE);
      return _logger.default.unwrap().record.map(function (x) {
        return {
          timestamp: Date.now(),
          level: 'ALL',
          message: _lodash.default.isEmpty(x.prefix) ? x.message : `[${x.prefix}] ${x.message}`
        };
      });
    }
  }
};

extensions.startLogCapture = async function startLogCapture() {
  this.logs = this.logs || {};

  if (!_lodash.default.isUndefined(this.logs.syslog) && this.logs.syslog.isCapturing) {
    _logger.default.warn('Trying to start iOS log capture but it has already started!');

    return true;
  }

  if (_lodash.default.isUndefined(this.logs.syslog)) {
    this.logs.crashlog = new _iosCrashLog.IOSCrashLog({
      sim: this.opts.device,
      udid: this.isRealDevice() ? this.opts.udid : undefined
    });

    if (this.isRealDevice()) {
      this.logs.syslog = new _iosDeviceLog.IOSDeviceLog({
        udid: this.opts.udid,
        showLogs: this.opts.showIOSLog
      });
    } else {
      this.logs.syslog = new _iosSimulatorLog.IOSSimulatorLog({
        sim: this.opts.device,
        showLogs: this.opts.showIOSLog,
        xcodeVersion: this.xcodeVersion,
        iosSimulatorLogsPredicate: this.opts.iosSimulatorLogsPredicate
      });
    }

    this.logs.safariConsole = new _safariConsoleLog.default(!!this.opts.showSafariConsoleLog);
    this.logs.safariNetwork = new _safariNetworkLog.default(!!this.opts.showSafariNetworkLog);
  }

  try {
    await this.logs.syslog.startCapture();
  } catch (err) {
    _logger.default.warn(`Continuing without capturing device logs: ${err.message}`);

    return false;
  }

  await this.logs.crashlog.startCapture();
  await this.logs.safariConsole.startCapture();
  await this.logs.safariNetwork.startCapture();
  return true;
};

extensions.mobileStartLogsBroadcast = async function mobileStartLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (!_lodash.default.isEmpty(await this.server.getWebSocketHandlers(pathname))) {
    _logger.default.debug(`The system logs broadcasting web socket server is already listening at ${pathname}`);

    return;
  }

  _logger.default.info(`Assigning system logs broadcasting web socket server to ${pathname}`);

  const wss = new _ws.default.Server({
    noServer: true
  });
  wss.on('connection', (ws, req) => {
    if (req) {
      var _req$connection;

      const remoteIp = _lodash.default.isEmpty(req.headers['x-forwarded-for']) ? (_req$connection = req.connection) === null || _req$connection === void 0 ? void 0 : _req$connection.remoteAddress : req.headers['x-forwarded-for'];

      _logger.default.debug(`Established a new system logs listener web socket connection from ${remoteIp}`);
    } else {
      _logger.default.debug('Established a new system logs listener web socket connection');
    }

    if (_lodash.default.isEmpty(this._syslogWebsocketListener)) {
      this._syslogWebsocketListener = logRecord => {
        if ((ws === null || ws === void 0 ? void 0 : ws.readyState) === _ws.default.OPEN) {
          ws.send(logRecord.message);
        }
      };
    }

    this.logs.syslog.on('output', this._syslogWebsocketListener);
    ws.on('close', (code, reason) => {
      if (!_lodash.default.isEmpty(this._syslogWebsocketListener)) {
        this.logs.syslog.removeListener('output', this._syslogWebsocketListener);
        this._syslogWebsocketListener = null;
      }

      let closeMsg = 'System logs listener web socket is closed.';

      if (!_lodash.default.isEmpty(code)) {
        closeMsg += ` Code: ${code}.`;
      }

      if (!_lodash.default.isEmpty(reason)) {
        closeMsg += ` Reason: ${reason.toString()}.`;
      }

      _logger.default.debug(closeMsg);
    });
  });
  await this.server.addWebSocketHandler(pathname, wss);
};

extensions.mobileStopLogsBroadcast = async function mobileStopLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (_lodash.default.isEmpty(await this.server.getWebSocketHandlers(pathname))) {
    return;
  }

  _logger.default.debug('Stopping the system logs broadcasting web socket server');

  await this.server.removeWebSocketHandler(pathname);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvZy5qcyIsIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJXRUJTT0NLRVRfRU5EUE9JTlQiLCJzZXNzaW9uSWQiLCJERUZBVUxUX1dTX1BBVEhOQU1FX1BSRUZJWCIsIkdFVF9TRVJWRVJfTE9HU19GRUFUVVJFIiwiZXh0cmFjdExvZ3MiLCJsb2dUeXBlIiwibG9nc0NvbnRhaW5lciIsIl8iLCJpc0VtcHR5IiwiRXJyb3IiLCJsb2dPYmplY3QiLCJsb2dzIiwiZ2V0TG9ncyIsInN1cHBvcnRlZExvZ1R5cGVzIiwic3lzbG9nIiwiZGVzY3JpcHRpb24iLCJnZXR0ZXIiLCJzZWxmIiwiY3Jhc2hsb2ciLCJwZXJmb3JtYW5jZSIsInNhZmFyaUNvbnNvbGUiLCJzYWZhcmlOZXR3b3JrIiwic2VydmVyIiwiZW5zdXJlRmVhdHVyZUVuYWJsZWQiLCJsb2ciLCJ1bndyYXAiLCJyZWNvcmQiLCJtYXAiLCJ4IiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImxldmVsIiwibWVzc2FnZSIsInByZWZpeCIsInN0YXJ0TG9nQ2FwdHVyZSIsImlzVW5kZWZpbmVkIiwiaXNDYXB0dXJpbmciLCJ3YXJuIiwiSU9TQ3Jhc2hMb2ciLCJzaW0iLCJvcHRzIiwiZGV2aWNlIiwidWRpZCIsImlzUmVhbERldmljZSIsInVuZGVmaW5lZCIsIklPU0RldmljZUxvZyIsInNob3dMb2dzIiwic2hvd0lPU0xvZyIsIklPU1NpbXVsYXRvckxvZyIsInhjb2RlVmVyc2lvbiIsImlvc1NpbXVsYXRvckxvZ3NQcmVkaWNhdGUiLCJTYWZhcmlDb25zb2xlTG9nIiwic2hvd1NhZmFyaUNvbnNvbGVMb2ciLCJTYWZhcmlOZXR3b3JrTG9nIiwic2hvd1NhZmFyaU5ldHdvcmtMb2ciLCJzdGFydENhcHR1cmUiLCJlcnIiLCJtb2JpbGVTdGFydExvZ3NCcm9hZGNhc3QiLCJwYXRobmFtZSIsImdldFdlYlNvY2tldEhhbmRsZXJzIiwiZGVidWciLCJpbmZvIiwid3NzIiwiV2ViU29ja2V0IiwiU2VydmVyIiwibm9TZXJ2ZXIiLCJvbiIsIndzIiwicmVxIiwicmVtb3RlSXAiLCJoZWFkZXJzIiwiY29ubmVjdGlvbiIsInJlbW90ZUFkZHJlc3MiLCJfc3lzbG9nV2Vic29ja2V0TGlzdGVuZXIiLCJsb2dSZWNvcmQiLCJyZWFkeVN0YXRlIiwiT1BFTiIsInNlbmQiLCJjb2RlIiwicmVhc29uIiwicmVtb3ZlTGlzdGVuZXIiLCJjbG9zZU1zZyIsInRvU3RyaW5nIiwiYWRkV2ViU29ja2V0SGFuZGxlciIsIm1vYmlsZVN0b3BMb2dzQnJvYWRjYXN0IiwicmVtb3ZlV2ViU29ja2V0SGFuZGxlciJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IERFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyBJT1NDcmFzaExvZyB9IGZyb20gJy4uL2RldmljZS1sb2cvaW9zLWNyYXNoLWxvZyc7XG5pbXBvcnQgeyBJT1NTaW11bGF0b3JMb2cgfSBmcm9tICcuLi9kZXZpY2UtbG9nL2lvcy1zaW11bGF0b3ItbG9nJztcbmltcG9ydCB7IElPU0RldmljZUxvZyB9IGZyb20gJy4uL2RldmljZS1sb2cvaW9zLWRldmljZS1sb2cnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cyc7XG5pbXBvcnQgU2FmYXJpQ29uc29sZUxvZyBmcm9tICcuLi9kZXZpY2UtbG9nL3NhZmFyaS1jb25zb2xlLWxvZyc7XG5pbXBvcnQgU2FmYXJpTmV0d29ya0xvZyBmcm9tICcuLi9kZXZpY2UtbG9nL3NhZmFyaS1uZXR3b3JrLWxvZyc7XG5cblxuY29uc3QgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb25zdCBXRUJTT0NLRVRfRU5EUE9JTlQgPSAoc2Vzc2lvbklkKSA9PiBgJHtERUZBVUxUX1dTX1BBVEhOQU1FX1BSRUZJWH0vc2Vzc2lvbi8ke3Nlc3Npb25JZH0vYXBwaXVtL2RldmljZS9zeXNsb2dgO1xuY29uc3QgR0VUX1NFUlZFUl9MT0dTX0ZFQVRVUkUgPSAnZ2V0X3NlcnZlcl9sb2dzJztcblxuZXh0ZW5zaW9ucy5leHRyYWN0TG9ncyA9IGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RMb2dzIChsb2dUeXBlLCBsb2dzQ29udGFpbmVyID0ge30pIHtcbiAgLy8gbWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBsb2dzIGF0IGFsbFxuICAvLyBvdGhlcndpc2UgaXQncyBub3QgYmVlbiBpbml0aWFsaXplZFxuICBpZiAoXy5pc0VtcHR5KGxvZ3NDb250YWluZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBsb2dzIGN1cnJlbnRseSBhdmFpbGFibGUuIElzIHRoZSBkZXZpY2Uvc2ltdWxhdG9yIHN0YXJ0ZWQ/Jyk7XG4gIH1cblxuICAvLyBJZiBsb2dzIGNhcHR1cmVkIHN1Y2Nlc3NmdWxseSBzZW5kIHJlc3BvbnNlIHdpdGggZGF0YSwgZWxzZSBzZW5kIGVycm9yXG4gIGNvbnN0IGxvZ09iamVjdCA9IGxvZ3NDb250YWluZXJbbG9nVHlwZV07XG4gIGNvbnN0IGxvZ3MgPSBsb2dPYmplY3QgPyBhd2FpdCBsb2dPYmplY3QuZ2V0TG9ncygpIDogbnVsbDtcbiAgaWYgKGxvZ3MpIHtcbiAgICByZXR1cm4gbG9ncztcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYE5vIGxvZ3Mgb2YgdHlwZSAnJHtsb2dUeXBlfScgZm91bmQuYCk7XG59O1xuXG5leHRlbnNpb25zLnN1cHBvcnRlZExvZ1R5cGVzID0ge1xuICBzeXNsb2c6IHtcbiAgICBkZXNjcmlwdGlvbjogJ1N5c3RlbSBMb2dzIC0gRGV2aWNlIGxvZ3MgZm9yIGlPUyBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgICBnZXR0ZXI6IGFzeW5jIChzZWxmKSA9PiBhd2FpdCBzZWxmLmV4dHJhY3RMb2dzKCdzeXNsb2cnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBjcmFzaGxvZzoge1xuICAgIGRlc2NyaXB0aW9uOiAnQ3Jhc2ggTG9ncyAtIENyYXNoIHJlcG9ydHMgZm9yIGlPUyBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgICBnZXR0ZXI6IGFzeW5jIChzZWxmKSA9PiBhd2FpdCBzZWxmLmV4dHJhY3RMb2dzKCdjcmFzaGxvZycsIHNlbGYubG9ncyksXG4gIH0sXG4gIHBlcmZvcm1hbmNlOiB7XG4gICAgZGVzY3JpcHRpb246ICdQZXJmb3JtYW5jZSBMb2dzIC0gRGVidWcgVGltZWxpbmVzIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgc2VsZi5leHRyYWN0TG9ncygncGVyZm9ybWFuY2UnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBzYWZhcmlDb25zb2xlOiB7XG4gICAgZGVzY3JpcHRpb246ICdTYWZhcmkgQ29uc29sZSBMb2dzIC0gZGF0YSB3cml0dGVuIHRvIHRoZSBKUyBjb25zb2xlIGluIFNhZmFyaScsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgc2VsZi5leHRyYWN0TG9ncygnc2FmYXJpQ29uc29sZScsIHNlbGYubG9ncyksXG4gIH0sXG4gIHNhZmFyaU5ldHdvcms6IHtcbiAgICBkZXNjcmlwdGlvbjogJ1NhZmFyaSBOZXR3b3JrIExvZ3MgLSBpbmZvcm1hdGlvbiBhYm91dCBuZXR3b3JrIG9wZXJhdGlvbnMgdW5kZXJ0YWtlbiBieSBTYWZhcmknLFxuICAgIGdldHRlcjogYXN5bmMgKHNlbGYpID0+IGF3YWl0IHNlbGYuZXh0cmFjdExvZ3MoJ3NhZmFyaU5ldHdvcmsnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBzZXJ2ZXI6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0FwcGl1bSBzZXJ2ZXIgbG9ncycsXG4gICAgZ2V0dGVyOiAoc2VsZikgPT4ge1xuICAgICAgc2VsZi5lbnN1cmVGZWF0dXJlRW5hYmxlZChHRVRfU0VSVkVSX0xPR1NfRkVBVFVSRSk7XG4gICAgICByZXR1cm4gbG9nLnVud3JhcCgpLnJlY29yZFxuICAgICAgICAubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIG5wbWxvZyBkb2VzIG5vdCBrZWVwIHRpbWVzdGFtcHMgaW4gdGhlIGhpc3RvcnlcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IF8uaXNFbXB0eSh4LnByZWZpeCkgPyB4Lm1lc3NhZ2UgOiBgWyR7eC5wcmVmaXh9XSAke3gubWVzc2FnZX1gLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5leHRlbnNpb25zLnN0YXJ0TG9nQ2FwdHVyZSA9IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TG9nQ2FwdHVyZSAoKSB7XG4gIHRoaXMubG9ncyA9IHRoaXMubG9ncyB8fCB7fTtcbiAgaWYgKCFfLmlzVW5kZWZpbmVkKHRoaXMubG9ncy5zeXNsb2cpICYmIHRoaXMubG9ncy5zeXNsb2cuaXNDYXB0dXJpbmcpIHtcbiAgICBsb2cud2FybignVHJ5aW5nIHRvIHN0YXJ0IGlPUyBsb2cgY2FwdHVyZSBidXQgaXQgaGFzIGFscmVhZHkgc3RhcnRlZCEnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLmxvZ3Muc3lzbG9nKSkge1xuICAgIHRoaXMubG9ncy5jcmFzaGxvZyA9IG5ldyBJT1NDcmFzaExvZyh7XG4gICAgICBzaW06IHRoaXMub3B0cy5kZXZpY2UsXG4gICAgICB1ZGlkOiB0aGlzLmlzUmVhbERldmljZSgpID8gdGhpcy5vcHRzLnVkaWQgOiB1bmRlZmluZWQsXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgICAgdGhpcy5sb2dzLnN5c2xvZyA9IG5ldyBJT1NEZXZpY2VMb2coe1xuICAgICAgICB1ZGlkOiB0aGlzLm9wdHMudWRpZCxcbiAgICAgICAgc2hvd0xvZ3M6IHRoaXMub3B0cy5zaG93SU9TTG9nLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9ncy5zeXNsb2cgPSBuZXcgSU9TU2ltdWxhdG9yTG9nKHtcbiAgICAgICAgc2ltOiB0aGlzLm9wdHMuZGV2aWNlLFxuICAgICAgICBzaG93TG9nczogdGhpcy5vcHRzLnNob3dJT1NMb2csXG4gICAgICAgIHhjb2RlVmVyc2lvbjogdGhpcy54Y29kZVZlcnNpb24sXG4gICAgICAgIGlvc1NpbXVsYXRvckxvZ3NQcmVkaWNhdGU6IHRoaXMub3B0cy5pb3NTaW11bGF0b3JMb2dzUHJlZGljYXRlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMubG9ncy5zYWZhcmlDb25zb2xlID0gbmV3IFNhZmFyaUNvbnNvbGVMb2coISF0aGlzLm9wdHMuc2hvd1NhZmFyaUNvbnNvbGVMb2cpO1xuICAgIHRoaXMubG9ncy5zYWZhcmlOZXR3b3JrID0gbmV3IFNhZmFyaU5ldHdvcmtMb2coISF0aGlzLm9wdHMuc2hvd1NhZmFyaU5ldHdvcmtMb2cpO1xuICB9XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5sb2dzLnN5c2xvZy5zdGFydENhcHR1cmUoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYENvbnRpbnVpbmcgd2l0aG91dCBjYXB0dXJpbmcgZGV2aWNlIGxvZ3M6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGF3YWl0IHRoaXMubG9ncy5jcmFzaGxvZy5zdGFydENhcHR1cmUoKTtcbiAgYXdhaXQgdGhpcy5sb2dzLnNhZmFyaUNvbnNvbGUuc3RhcnRDYXB0dXJlKCk7XG4gIGF3YWl0IHRoaXMubG9ncy5zYWZhcmlOZXR3b3JrLnN0YXJ0Q2FwdHVyZSgpO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBTdGFydHMgaU9TIHN5c3RlbSBsb2dzIGJyb2FkY2FzdCB3ZWJzb2NrZXQgb24gdGhlIHNhbWUgaG9zdCBhbmQgcG9ydFxuICogd2hlcmUgQXBwaXVtIHNlcnZlciBpcyBydW5uaW5nIGF0IGAvd3Mvc2Vzc2lvbi86c2Vzc2lvbklkOi9hcHBpdW0vc3lzbG9nYCBlbmRwb2ludC4gVGhlIG1ldGhvZFxuICogd2lsbCByZXR1cm4gaW1tZWRpYXRlbHkgaWYgdGhlIHdlYiBzb2NrZXQgaXMgYWxyZWFkeSBsaXN0ZW5pbmcuXG4gKlxuICogRWFjaCBjb25uZWN0ZWQgd2ViY29rZXQgbGlzdGVuZXIgd2lsbCByZWNlaXZlIHN5c2xvZyBsaW5lc1xuICogYXMgc29vbiBhcyB0aGV5IGFyZSB2aXNpYmxlIHRvIEFwcGl1bS5cbiAqL1xuZXh0ZW5zaW9ucy5tb2JpbGVTdGFydExvZ3NCcm9hZGNhc3QgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTdGFydExvZ3NCcm9hZGNhc3QgKCkge1xuICBjb25zdCBwYXRobmFtZSA9IFdFQlNPQ0tFVF9FTkRQT0lOVCh0aGlzLnNlc3Npb25JZCk7XG4gIGlmICghXy5pc0VtcHR5KGF3YWl0IHRoaXMuc2VydmVyLmdldFdlYlNvY2tldEhhbmRsZXJzKHBhdGhuYW1lKSkpIHtcbiAgICBsb2cuZGVidWcoYFRoZSBzeXN0ZW0gbG9ncyBicm9hZGNhc3Rpbmcgd2ViIHNvY2tldCBzZXJ2ZXIgaXMgYWxyZWFkeSBsaXN0ZW5pbmcgYXQgJHtwYXRobmFtZX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2cuaW5mbyhgQXNzaWduaW5nIHN5c3RlbSBsb2dzIGJyb2FkY2FzdGluZyB3ZWIgc29ja2V0IHNlcnZlciB0byAke3BhdGhuYW1lfWApO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9ibG9iL21hc3Rlci9kb2Mvd3MubWRcbiAgY29uc3Qgd3NzID0gbmV3IFdlYlNvY2tldC5TZXJ2ZXIoe1xuICAgIG5vU2VydmVyOiB0cnVlLFxuICB9KTtcbiAgd3NzLm9uKCdjb25uZWN0aW9uJywgKHdzLCByZXEpID0+IHtcbiAgICBpZiAocmVxKSB7XG4gICAgICBjb25zdCByZW1vdGVJcCA9IF8uaXNFbXB0eShyZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ10pXG4gICAgICAgID8gcmVxLmNvbm5lY3Rpb24/LnJlbW90ZUFkZHJlc3NcbiAgICAgICAgOiByZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ107XG4gICAgICBsb2cuZGVidWcoYEVzdGFibGlzaGVkIGEgbmV3IHN5c3RlbSBsb2dzIGxpc3RlbmVyIHdlYiBzb2NrZXQgY29ubmVjdGlvbiBmcm9tICR7cmVtb3RlSXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5kZWJ1ZygnRXN0YWJsaXNoZWQgYSBuZXcgc3lzdGVtIGxvZ3MgbGlzdGVuZXIgd2ViIHNvY2tldCBjb25uZWN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKF8uaXNFbXB0eSh0aGlzLl9zeXNsb2dXZWJzb2NrZXRMaXN0ZW5lcikpIHtcbiAgICAgIHRoaXMuX3N5c2xvZ1dlYnNvY2tldExpc3RlbmVyID0gKGxvZ1JlY29yZCkgPT4ge1xuICAgICAgICBpZiAod3M/LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICAgICAgd3Muc2VuZChsb2dSZWNvcmQubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMubG9ncy5zeXNsb2cub24oJ291dHB1dCcsIHRoaXMuX3N5c2xvZ1dlYnNvY2tldExpc3RlbmVyKTtcblxuICAgIHdzLm9uKCdjbG9zZScsIChjb2RlLCByZWFzb24pID0+IHtcbiAgICAgIGlmICghXy5pc0VtcHR5KHRoaXMuX3N5c2xvZ1dlYnNvY2tldExpc3RlbmVyKSkge1xuICAgICAgICB0aGlzLmxvZ3Muc3lzbG9nLnJlbW92ZUxpc3RlbmVyKCdvdXRwdXQnLCB0aGlzLl9zeXNsb2dXZWJzb2NrZXRMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX3N5c2xvZ1dlYnNvY2tldExpc3RlbmVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgbGV0IGNsb3NlTXNnID0gJ1N5c3RlbSBsb2dzIGxpc3RlbmVyIHdlYiBzb2NrZXQgaXMgY2xvc2VkLic7XG4gICAgICBpZiAoIV8uaXNFbXB0eShjb2RlKSkge1xuICAgICAgICBjbG9zZU1zZyArPSBgIENvZGU6ICR7Y29kZX0uYDtcbiAgICAgIH1cbiAgICAgIGlmICghXy5pc0VtcHR5KHJlYXNvbikpIHtcbiAgICAgICAgY2xvc2VNc2cgKz0gYCBSZWFzb246ICR7cmVhc29uLnRvU3RyaW5nKCl9LmA7XG4gICAgICB9XG4gICAgICBsb2cuZGVidWcoY2xvc2VNc2cpO1xuICAgIH0pO1xuICB9KTtcbiAgYXdhaXQgdGhpcy5zZXJ2ZXIuYWRkV2ViU29ja2V0SGFuZGxlcihwYXRobmFtZSwgd3NzKTtcbn07XG5cbi8qKlxuICogU3RvcHMgdGhlIHByZXZpb3VzbHkgc3RhcnRlZCBzeXNsb2cgYnJvYWRjYXN0aW5nIHdlc29ja2V0IHNlcnZlci5cbiAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGltbWVkaWF0ZWx5IGlmIG5vIHNlcnZlciBpcyBydW5uaW5nLlxuICovXG5leHRlbnNpb25zLm1vYmlsZVN0b3BMb2dzQnJvYWRjYXN0ID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlU3RvcExvZ3NCcm9hZGNhc3QgKCkge1xuICBjb25zdCBwYXRobmFtZSA9IFdFQlNPQ0tFVF9FTkRQT0lOVCh0aGlzLnNlc3Npb25JZCk7XG4gIGlmIChfLmlzRW1wdHkoYXdhaXQgdGhpcy5zZXJ2ZXIuZ2V0V2ViU29ja2V0SGFuZGxlcnMocGF0aG5hbWUpKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZy5kZWJ1ZygnU3RvcHBpbmcgdGhlIHN5c3RlbSBsb2dzIGJyb2FkY2FzdGluZyB3ZWIgc29ja2V0IHNlcnZlcicpO1xuICBhd2FpdCB0aGlzLnNlcnZlci5yZW1vdmVXZWJTb2NrZXRIYW5kbGVy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
