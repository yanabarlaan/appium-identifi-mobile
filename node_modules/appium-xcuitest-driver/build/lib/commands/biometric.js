"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function assertIsSimulator(driver) {
  if (!driver.isSimulator()) {
    throw new Error('Biometric enrollment can only be performed on Simulator');
  }
}

commands.mobileEnrollBiometric = async function mobileEnrollBiometric(opts = {}) {
  const {
    isEnabled = true
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.enrollBiometric(isEnabled);
};

commands.mobileSendBiometricMatch = async function mobileSendBiometricMatch(opts = {}) {
  const {
    match = true,
    type = 'touchId'
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.sendBiometricMatch(match, type);
};

commands.mobileIsBiometricEnrolled = async function mobileIsBiometricEnrolled() {
  assertIsSimulator(this);
  return await this.opts.device.isBiometricEnrolled();
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL2Jpb21ldHJpYy5qcyIsIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJhc3NlcnRJc1NpbXVsYXRvciIsImRyaXZlciIsImlzU2ltdWxhdG9yIiwiRXJyb3IiLCJtb2JpbGVFbnJvbGxCaW9tZXRyaWMiLCJvcHRzIiwiaXNFbmFibGVkIiwiZGV2aWNlIiwiZW5yb2xsQmlvbWV0cmljIiwibW9iaWxlU2VuZEJpb21ldHJpY01hdGNoIiwibWF0Y2giLCJ0eXBlIiwic2VuZEJpb21ldHJpY01hdGNoIiwibW9iaWxlSXNCaW9tZXRyaWNFbnJvbGxlZCIsImlzQmlvbWV0cmljRW5yb2xsZWQiLCJPYmplY3QiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvY29tbWFuZHMvYmlvbWV0cmljLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gYXNzZXJ0SXNTaW11bGF0b3IgKGRyaXZlcikge1xuICBpZiAoIWRyaXZlci5pc1NpbXVsYXRvcigpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCaW9tZXRyaWMgZW5yb2xsbWVudCBjYW4gb25seSBiZSBwZXJmb3JtZWQgb24gU2ltdWxhdG9yJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFbnJvbGxPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gaXNFbmFibGVkIFt0cnVlXSAtIFdoZXRoZXIgdG8gZW5hYmxlL2Rpc2FibGUgYmlvbWV0cmljIGVucm9sbG1lbnQuXG4gKi9cblxuLyoqXG4gKiBFbnJvbGxzIGJpb21ldHJpYyBhdXRoZW50aWNhdGlvbiBvbiBTaW11bGF0b3IuXG4gKlxuICogQHBhcmFtIHtFbnJvbGxPcHRpb25zfSBvcHRzIC0gRW5yb2xsbWVudCBvcHRpb25zLlxuICogQHRocm93cyB7RXJyb3J9IElmIGVucm9sbG1lbnQgZmFpbHMgb3IgdGhlIGRldmljZSBpcyBub3QgYSBTaW11bGF0b3IuXG4gKi9cbmNvbW1hbmRzLm1vYmlsZUVucm9sbEJpb21ldHJpYyA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZUVucm9sbEJpb21ldHJpYyAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBpc0VuYWJsZWQgPSB0cnVlLFxuICB9ID0gb3B0cztcblxuICBhc3NlcnRJc1NpbXVsYXRvcih0aGlzKTtcblxuICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmVucm9sbEJpb21ldHJpYyhpc0VuYWJsZWQpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBCaW9tZXRyaWNNYXRjaE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHR5cGUgW3RvdWNoSWRdIC0gVGhlIGJpb21ldHJpYyBmZWF0dXJlIG5hbWUuXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBtYXRjaCBbdHJ1ZV0gLSBXaGV0aGVyIHRvIHNpbXVsYXRlIGJpb21ldHJpYyBtYXRjaCBvciBub24tbWF0Y2guXG4gKi9cblxuLyoqXG4gKiBFbXVsYXRlcyBiaW9tZXRyaWMgbWF0Y2gvbm9uLW1hdGNoIGV2ZW50IG9uIFNpbXVsYXRvci5cbiAqIFRoZSBiaW9tZXRyaWMgZmVhdHVyZSBpcyBleHBlY3RlZCB0byBiZSBhbHJlYWR5IGVucm9sbGVkIGJlZm9yZSBleGVjdXRpbmcgdGhhdC5cbiAqXG4gKiBAcGFyYW0ge0Jpb21ldHJpY01hdGNoT3B0aW9uc30gb3B0cyAtIE1hdGNoaW5nIG9wdGlvbnMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbWF0Y2hpbmcgZmFpbHMgb3IgdGhlIGRldmljZSBpcyBub3QgYSBTaW11bGF0b3IuXG4gKi9cbmNvbW1hbmRzLm1vYmlsZVNlbmRCaW9tZXRyaWNNYXRjaCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVNlbmRCaW9tZXRyaWNNYXRjaCAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBtYXRjaCA9IHRydWUsXG4gICAgdHlwZSA9ICd0b3VjaElkJyxcbiAgfSA9IG9wdHM7XG5cbiAgYXNzZXJ0SXNTaW11bGF0b3IodGhpcyk7XG5cbiAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5zZW5kQmlvbWV0cmljTWF0Y2gobWF0Y2gsIHR5cGUpO1xufTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBiaW9tZXRyaWMgaXMgY3VycmVudGx5IGVucm9sbGVkIG9yIG5vdC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGJpb21ldHJpYyBpcyBlbnJvbGxlZC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV0ZWN0aW9uIGZhaWxzIG9yIHRoZSBkZXZpY2UgaXMgbm90IGEgU2ltdWxhdG9yLlxuICovXG5jb21tYW5kcy5tb2JpbGVJc0Jpb21ldHJpY0Vucm9sbGVkID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlSXNCaW9tZXRyaWNFbnJvbGxlZCAoKSB7XG4gIGFzc2VydElzU2ltdWxhdG9yKHRoaXMpO1xuXG4gIHJldHVybiBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmlzQmlvbWV0cmljRW5yb2xsZWQoKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQSxTQUFTQyxpQkFBVCxDQUE0QkMsTUFBNUIsRUFBb0M7RUFDbEMsSUFBSSxDQUFDQSxNQUFNLENBQUNDLFdBQVAsRUFBTCxFQUEyQjtJQUN6QixNQUFNLElBQUlDLEtBQUosQ0FBVSx5REFBVixDQUFOO0VBQ0Q7QUFDRjs7QUFjRE4sUUFBUSxDQUFDTyxxQkFBVCxHQUFpQyxlQUFlQSxxQkFBZixDQUFzQ0MsSUFBSSxHQUFHLEVBQTdDLEVBQWlEO0VBQ2hGLE1BQU07SUFDSkMsU0FBUyxHQUFHO0VBRFIsSUFFRkQsSUFGSjtFQUlBTCxpQkFBaUIsQ0FBQyxJQUFELENBQWpCO0VBRUEsTUFBTSxLQUFLSyxJQUFMLENBQVVFLE1BQVYsQ0FBaUJDLGVBQWpCLENBQWlDRixTQUFqQyxDQUFOO0FBQ0QsQ0FSRDs7QUF3QkFULFFBQVEsQ0FBQ1ksd0JBQVQsR0FBb0MsZUFBZUEsd0JBQWYsQ0FBeUNKLElBQUksR0FBRyxFQUFoRCxFQUFvRDtFQUN0RixNQUFNO0lBQ0pLLEtBQUssR0FBRyxJQURKO0lBRUpDLElBQUksR0FBRztFQUZILElBR0ZOLElBSEo7RUFLQUwsaUJBQWlCLENBQUMsSUFBRCxDQUFqQjtFQUVBLE1BQU0sS0FBS0ssSUFBTCxDQUFVRSxNQUFWLENBQWlCSyxrQkFBakIsQ0FBb0NGLEtBQXBDLEVBQTJDQyxJQUEzQyxDQUFOO0FBQ0QsQ0FURDs7QUFpQkFkLFFBQVEsQ0FBQ2dCLHlCQUFULEdBQXFDLGVBQWVBLHlCQUFmLEdBQTRDO0VBQy9FYixpQkFBaUIsQ0FBQyxJQUFELENBQWpCO0VBRUEsT0FBTyxNQUFNLEtBQUtLLElBQUwsQ0FBVUUsTUFBVixDQUFpQk8sbUJBQWpCLEVBQWI7QUFDRCxDQUpEOztBQU1BQyxNQUFNLENBQUNDLE1BQVAsQ0FBY2pCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIn0=
