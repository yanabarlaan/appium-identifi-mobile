"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const RESOURCE_NAME_TO_ID_MAP = {
  calendar: 2,
  camera: 6,
  contacts: 1,
  health: -0x40000003,
  homekit: 8,
  keyboardnet: -0x40000001,
  location: -0x40000002,
  medialibrary: 7,
  microphone: 5,
  photos: 4,
  reminders: 3,
  systemroot: 0x40000000,
  userdesktop: 0x40000001,
  userdocuments: 0x40000003,
  userdownloads: 0x40000002,
  bluetooth: -0x40000000
};

function requireSimulator(driver) {
  if (!driver.isSimulator()) {
    throw new Error('Permissions-related operations can only be performed on Simulator');
  }
}

function requireOptions(opts = {}) {
  if (!opts.bundleId) {
    throw new Error(`The 'bundleId' options must be a valid application bundle identifier`);
  }

  return opts;
}

commands.mobileResetPermission = async function mobileResetPermission(opts = {}) {
  const {
    service
  } = opts;

  if (!service) {
    throw new Error(`The 'service' option is expected to be present`);
  }

  let resource;

  if (_lodash.default.isString(service)) {
    resource = RESOURCE_NAME_TO_ID_MAP[_lodash.default.toLower(service)];

    if (!resource) {
      throw new Error(`The 'service' value must be one of ` + `${JSON.stringify(_lodash.default.keys(RESOURCE_NAME_TO_ID_MAP))}`);
    }
  } else if (_lodash.default.isInteger(service)) {
    resource = service;
  } else {
    throw new Error(`The 'service' value must be either a string or an integer. ` + `'${service}' is passed instead`);
  }

  await this.proxyCommand('/wda/resetAppAuth', 'POST', {
    resource
  });
};

commands.mobileGetPermission = async function mobileGetPermission(opts = {}) {
  const {
    service,
    bundleId
  } = requireOptions(opts);

  if (!service) {
    throw new Error(`The 'service' option is expected to be present`);
  }

  requireSimulator(this);
  return await this.opts.device.getPermission(bundleId, service);
};

commands.mobileSetPermissions = async function mobileSetPermissions(opts = {}) {
  const {
    access,
    bundleId
  } = requireOptions(opts);

  if (!_lodash.default.isPlainObject(access)) {
    throw new Error(`The 'access' option is expected to be a map`);
  }

  requireSimulator(this);
  await this.opts.device.setPermissions(bundleId, access);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
