"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

let commands = {};

commands.getScreenshot = async function getScreenshot() {
  const getScreenshotFromWDA = async () => {
    this.log.debug(`Taking screenshot with WDA`);
    const data = await this.proxyCommand('/screenshot', 'GET');

    if (!_lodash.default.isString(data)) {
      throw new Error(`Unable to take screenshot. WDA returned '${JSON.stringify(data)}'`);
    }

    return data;
  };

  if (this.mjpegStream) {
    this.log.info(`mjpeg video stream provided, returning latest frame as screenshot`);
    const data = await this.mjpegStream.lastChunkPNGBase64();

    if (data) {
      return data;
    }

    this.log.warn('Tried to get screenshot from active MJPEG stream, but there ' + 'was no data yet. Falling back to regular screenshot methods.');
  }

  try {
    return await getScreenshotFromWDA();
  } catch (err) {
    this.log.warn(`Error getting screenshot: ${err.message}`);
  }

  if (this.isSimulator()) {
    this.log.info(`Falling back to 'simctl io screenshot' API`);
    return await this.opts.device.simctl.getScreenshot();
  }

  return await (0, _asyncbox.retryInterval)(2, 1000, getScreenshotFromWDA);
};

commands.getElementScreenshot = async function getElementScreenshot(el) {
  el = _support.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.getAtomsElement(el);
    return await this.executeAtom('getElementScreenshot', [atomsElement]);
  }

  const data = await this.proxyCommand(`/element/${el}/screenshot`, 'GET');

  if (!_lodash.default.isString(data)) {
    this.log.errorAndThrow(`Unable to take a screenshot of the element ${el}. WDA returned '${JSON.stringify(data)}'`);
  }

  return data;
};

commands.getViewportScreenshot = async function getViewportScreenshot() {
  let statusBarHeight = await this.getStatusBarHeight();
  const screenshot = await this.getScreenshot();

  if (statusBarHeight === 0) {
    return screenshot;
  }

  const scale = await this.getDevicePixelRatio();
  statusBarHeight = Math.round(statusBarHeight * scale);
  const windowSize = await this.getWindowSize();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = await _support.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL3NjcmVlbnNob3RzLmpzIiwibmFtZXMiOlsiY29tbWFuZHMiLCJnZXRTY3JlZW5zaG90IiwiZ2V0U2NyZWVuc2hvdEZyb21XREEiLCJsb2ciLCJkZWJ1ZyIsImRhdGEiLCJwcm94eUNvbW1hbmQiLCJfIiwiaXNTdHJpbmciLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJtanBlZ1N0cmVhbSIsImluZm8iLCJsYXN0Q2h1bmtQTkdCYXNlNjQiLCJ3YXJuIiwiZXJyIiwibWVzc2FnZSIsImlzU2ltdWxhdG9yIiwib3B0cyIsImRldmljZSIsInNpbWN0bCIsInJldHJ5SW50ZXJ2YWwiLCJnZXRFbGVtZW50U2NyZWVuc2hvdCIsImVsIiwidXRpbCIsInVud3JhcEVsZW1lbnQiLCJpc1dlYkNvbnRleHQiLCJhdG9tc0VsZW1lbnQiLCJnZXRBdG9tc0VsZW1lbnQiLCJleGVjdXRlQXRvbSIsImVycm9yQW5kVGhyb3ciLCJnZXRWaWV3cG9ydFNjcmVlbnNob3QiLCJzdGF0dXNCYXJIZWlnaHQiLCJnZXRTdGF0dXNCYXJIZWlnaHQiLCJzY3JlZW5zaG90Iiwic2NhbGUiLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwiTWF0aCIsInJvdW5kIiwid2luZG93U2l6ZSIsImdldFdpbmRvd1NpemUiLCJyZWN0IiwibGVmdCIsInRvcCIsIndpZHRoIiwiaGVpZ2h0IiwibmV3U2NyZWVuc2hvdCIsImltYWdlVXRpbCIsImNyb3BCYXNlNjRJbWFnZSJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXRyeUludGVydmFsIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHV0aWwsIGltYWdlVXRpbCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5nZXRTY3JlZW5zaG90ID0gYXN5bmMgZnVuY3Rpb24gZ2V0U2NyZWVuc2hvdCAoKSB7XG4gIGNvbnN0IGdldFNjcmVlbnNob3RGcm9tV0RBID0gYXN5bmMgKCkgPT4ge1xuICAgIHRoaXMubG9nLmRlYnVnKGBUYWtpbmcgc2NyZWVuc2hvdCB3aXRoIFdEQWApO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3NjcmVlbnNob3QnLCAnR0VUJyk7XG4gICAgaWYgKCFfLmlzU3RyaW5nKGRhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byB0YWtlIHNjcmVlbnNob3QuIFdEQSByZXR1cm5lZCAnJHtKU09OLnN0cmluZ2lmeShkYXRhKX0nYCk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIC8vIGlmIHdlJ3ZlIHNwZWNpZmllZCBhbiBtanBlZyBzZXJ2ZXIsIHVzZSB0aGF0XG4gIGlmICh0aGlzLm1qcGVnU3RyZWFtKSB7XG4gICAgdGhpcy5sb2cuaW5mbyhgbWpwZWcgdmlkZW8gc3RyZWFtIHByb3ZpZGVkLCByZXR1cm5pbmcgbGF0ZXN0IGZyYW1lIGFzIHNjcmVlbnNob3RgKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5tanBlZ1N0cmVhbS5sYXN0Q2h1bmtQTkdCYXNlNjQoKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHRoaXMubG9nLndhcm4oJ1RyaWVkIHRvIGdldCBzY3JlZW5zaG90IGZyb20gYWN0aXZlIE1KUEVHIHN0cmVhbSwgYnV0IHRoZXJlICcgK1xuICAgICAgJ3dhcyBubyBkYXRhIHlldC4gRmFsbGluZyBiYWNrIHRvIHJlZ3VsYXIgc2NyZWVuc2hvdCBtZXRob2RzLicpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgZ2V0U2NyZWVuc2hvdEZyb21XREEoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhpcy5sb2cud2FybihgRXJyb3IgZ2V0dGluZyBzY3JlZW5zaG90OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG5cbiAgLy8gc2ltdWxhdG9yIGF0dGVtcHRcbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIHRoaXMubG9nLmluZm8oYEZhbGxpbmcgYmFjayB0byAnc2ltY3RsIGlvIHNjcmVlbnNob3QnIEFQSWApO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnNpbWN0bC5nZXRTY3JlZW5zaG90KCk7XG4gIH1cblxuICAvLyBSZXRyeSBmb3IgcmVhbCBkZXZpY2VzIG9ubHkuIEZhaWwgZmFzdCBvbiBTaW11bGF0b3IgaWYgc2ltY3RsIGRvZXMgbm90IHdvcmsgYXMgZXhwZWN0ZWRcbiAgcmV0dXJuIGF3YWl0IHJldHJ5SW50ZXJ2YWwoMiwgMTAwMCwgZ2V0U2NyZWVuc2hvdEZyb21XREEpO1xufTtcblxuY29tbWFuZHMuZ2V0RWxlbWVudFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiBnZXRFbGVtZW50U2NyZWVuc2hvdCAoZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGNvbnN0IGF0b21zRWxlbWVudCA9IHRoaXMuZ2V0QXRvbXNFbGVtZW50KGVsKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0RWxlbWVudFNjcmVlbnNob3QnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH1cblxuICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L3NjcmVlbnNob3RgLCAnR0VUJyk7XG4gIGlmICghXy5pc1N0cmluZyhkYXRhKSkge1xuICAgIHRoaXMubG9nLmVycm9yQW5kVGhyb3coYFVuYWJsZSB0byB0YWtlIGEgc2NyZWVuc2hvdCBvZiB0aGUgZWxlbWVudCAke2VsfS4gV0RBIHJldHVybmVkICcke0pTT04uc3RyaW5naWZ5KGRhdGEpfSdgKTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn07XG5cbmNvbW1hbmRzLmdldFZpZXdwb3J0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uIGdldFZpZXdwb3J0U2NyZWVuc2hvdCAoKSB7XG4gIGxldCBzdGF0dXNCYXJIZWlnaHQgPSBhd2FpdCB0aGlzLmdldFN0YXR1c0JhckhlaWdodCgpO1xuICBjb25zdCBzY3JlZW5zaG90ID0gYXdhaXQgdGhpcy5nZXRTY3JlZW5zaG90KCk7XG5cbiAgLy8gaWYgd2UgZG9uJ3QgaGF2ZSBhIHN0YXR1cyBiYXIsIHRoZXJlJ3Mgbm90aGluZyB0byBjcm9wLCBzbyB3ZSBjYW4gYXZvaWRcbiAgLy8gZXh0cmEgY2FsbHMgYW5kIHJldHVybiBzdHJhaWdodGF3YXlcbiAgaWYgKHN0YXR1c0JhckhlaWdodCA9PT0gMCkge1xuICAgIHJldHVybiBzY3JlZW5zaG90O1xuICB9XG5cbiAgY29uc3Qgc2NhbGUgPSBhd2FpdCB0aGlzLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgLy8gc3RhdHVzIGJhciBoZWlnaHQgY29tZXMgaW4gdW5zY2FsZWQsIHNvIHNjYWxlIGl0XG4gIHN0YXR1c0JhckhlaWdodCA9IE1hdGgucm91bmQoc3RhdHVzQmFySGVpZ2h0ICogc2NhbGUpO1xuICBjb25zdCB3aW5kb3dTaXplID0gYXdhaXQgdGhpcy5nZXRXaW5kb3dTaXplKCk7XG4gIGxldCByZWN0ID0ge1xuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiBzdGF0dXNCYXJIZWlnaHQsXG4gICAgd2lkdGg6IHdpbmRvd1NpemUud2lkdGggKiBzY2FsZSxcbiAgICBoZWlnaHQ6ICgod2luZG93U2l6ZS5oZWlnaHQgKiBzY2FsZSkgLSBzdGF0dXNCYXJIZWlnaHQpXG4gIH07XG4gIGxldCBuZXdTY3JlZW5zaG90ID0gYXdhaXQgaW1hZ2VVdGlsLmNyb3BCYXNlNjRJbWFnZShzY3JlZW5zaG90LCByZWN0KTtcbiAgcmV0dXJuIG5ld1NjcmVlbnNob3Q7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5k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
