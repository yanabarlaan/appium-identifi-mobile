"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertIDB = assertIDB;
exports.default = exports.commands = void 0;
exports.parseXCTestStdout = parseXCTestStdout;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _support = require("@appium/support");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

const commands = {};
exports.commands = commands;
const XCTEST_TIMEOUT = 60 * 60 * 1000;

const xctestLog = _support.logger.getLogger('XCTest');

function assertIDB(opts) {
  var _opts$device;

  if (!((_opts$device = opts.device) !== null && _opts$device !== void 0 && _opts$device.idb) || !opts.launchWithIDB) {
    throw new Error(`To use XCTest runner, IDB (https://github.com/facebook/idb) must be installed ` + `and sessions must be run with the "launchWithIDB" capability`);
  }

  return opts.device.idb;
}

function parseXCTestStdout(stdout) {
  function parseKey(name) {
    const words = name.split(' ');
    let out = '';

    for (const word of words) {
      out += word.substr(0, 1).toUpperCase() + word.substr(1);
    }

    return out.substr(0, 1).toLowerCase() + out.substr(1);
  }

  function parseValue(value) {
    value = value || '';

    switch (value.toLowerCase()) {
      case 'true':
        return true;

      case 'false':
        return false;

      case '':
        return null;

      default:
        break;
    }

    if (!isNaN(value)) {
      if (!_lodash.default.isString(value)) {
        return 0;
      } else if (value.indexOf('.') > 0) {
        return parseFloat(value);
      }

      return parseInt(value, 10);
    }
  }

  if (!stdout) {
    return [];
  }

  const lines = stdout.trim().split('\n');

  if (lines.length === 1 && !lines[0].includes('|')) {
    return [lines[0]];
  }

  const results = [];

  for (const line of lines) {
    const properties = line.split('|');
    const output = {};
    let entryIndex = 0;

    for (const prop of properties) {
      if (entryIndex === 0) {
        output.testName = prop.trim();
      } else {
        let [key, value] = prop.split(':');
        output[parseKey(key.trim())] = parseValue(value ? value.trim() : '');
      }

      entryIndex++;
    }

    results.push(output);
  }

  return results;
}

commands.mobileRunXCTest = async function runXCTest({
  testRunnerBundleId,
  appUnderTestBundleId,
  xctestBundleId,
  testType = 'ui',
  env,
  args,
  timeout = XCTEST_TIMEOUT
}) {
  const subproc = await assertIDB(this.opts).runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, {
    env,
    args,
    testType
  });
  return await new _bluebird.default((resolve, reject) => {
    let mostRecentLogObject = null;
    let xctestTimeout;

    if (timeout > 0) {
      xctestTimeout = setTimeout(() => reject(`Timed out after '${timeout}ms' waiting for XCTest to complete`), timeout);
    }

    subproc.on('output', (stdout, stderr) => {
      if (stdout) {
        try {
          mostRecentLogObject = parseXCTestStdout(stdout);
        } catch (err) {
          this.log.warn(`Failed to parse logs from test output: '${stdout}'`);
          this.log.debug(err.stack);
        }
      }

      stdout && xctestLog.info(stdout);
      stderr && xctestLog.error(stderr);
    });
    subproc.on('exit', (code, signal) => {
      clearTimeout(xctestTimeout);

      if (code !== 0) {
        const err = new Error(mostRecentLogObject);
        err.code = code;

        if (signal != null) {
          err.signal = signal;
        }

        if (mostRecentLogObject) {
          err.result = mostRecentLogObject;
        }

        return reject(err);
      }

      resolve({
        code,
        signal,
        results: mostRecentLogObject,
        passed: true
      });
    });
  });
};

commands.mobileInstallXCTestBundle = async function installXCTestBundle(opts) {
  const {
    xctestApp
  } = opts;

  if (!_lodash.default.isString(xctestApp)) {
    throw new _baseDriver.errors.InvalidArgumentError(`'xctestApp' is a required parameter for 'installXCTestBundle' and ` + `must be a string. Found '${xctestApp}'`);
  }

  xctestLog.info(`Installing bundle '${xctestApp}'`);
  const idb = assertIDB(this.opts);
  const res = await this.helpers.configureApp(xctestApp, '.xctest');
  await idb.installXCTestBundle(res);
};

commands.mobileListXCTestBundles = async function listXCTestsInTestBundle() {
  return await assertIDB(this.opts).listXCTestBundles();
};

commands.mobileListXCTestsInTestBundle = async function listXCTestsInTestBundle(opts) {
  const {
    bundle
  } = opts;

  if (!_lodash.default.isString(bundle)) {
    throw new _baseDriver.errors.InvalidArgumentError(`'bundle' is a required parameter for 'listXCTestsInTestBundle' and ` + `must be a string. Found '${bundle}'`);
  }

  const idb = assertIDB(this.opts);
  return await idb.listXCTestsInTestBundle(bundle);
};

Object.assign(commands);
var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL3hjdGVzdC5qcyIsIm5hbWVzIjpbImNvbW1hbmRzIiwiWENURVNUX1RJTUVPVVQiLCJ4Y3Rlc3RMb2ciLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJhc3NlcnRJREIiLCJvcHRzIiwiZGV2aWNlIiwiaWRiIiwibGF1bmNoV2l0aElEQiIsIkVycm9yIiwicGFyc2VYQ1Rlc3RTdGRvdXQiLCJzdGRvdXQiLCJwYXJzZUtleSIsIm5hbWUiLCJ3b3JkcyIsInNwbGl0Iiwib3V0Iiwid29yZCIsInN1YnN0ciIsInRvVXBwZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJwYXJzZVZhbHVlIiwidmFsdWUiLCJpc05hTiIsIl8iLCJpc1N0cmluZyIsImluZGV4T2YiLCJwYXJzZUZsb2F0IiwicGFyc2VJbnQiLCJsaW5lcyIsInRyaW0iLCJsZW5ndGgiLCJpbmNsdWRlcyIsInJlc3VsdHMiLCJsaW5lIiwicHJvcGVydGllcyIsIm91dHB1dCIsImVudHJ5SW5kZXgiLCJwcm9wIiwidGVzdE5hbWUiLCJrZXkiLCJwdXNoIiwibW9iaWxlUnVuWENUZXN0IiwicnVuWENUZXN0IiwidGVzdFJ1bm5lckJ1bmRsZUlkIiwiYXBwVW5kZXJUZXN0QnVuZGxlSWQiLCJ4Y3Rlc3RCdW5kbGVJZCIsInRlc3RUeXBlIiwiZW52IiwiYXJncyIsInRpbWVvdXQiLCJzdWJwcm9jIiwicnVuWENVSVRlc3QiLCJCIiwicmVzb2x2ZSIsInJlamVjdCIsIm1vc3RSZWNlbnRMb2dPYmplY3QiLCJ4Y3Rlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsIm9uIiwic3RkZXJyIiwiZXJyIiwibG9nIiwid2FybiIsImRlYnVnIiwic3RhY2siLCJpbmZvIiwiZXJyb3IiLCJjb2RlIiwic2lnbmFsIiwiY2xlYXJUaW1lb3V0IiwicmVzdWx0IiwicGFzc2VkIiwibW9iaWxlSW5zdGFsbFhDVGVzdEJ1bmRsZSIsImluc3RhbGxYQ1Rlc3RCdW5kbGUiLCJ4Y3Rlc3RBcHAiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsInJlcyIsImhlbHBlcnMiLCJjb25maWd1cmVBcHAiLCJtb2JpbGVMaXN0WENUZXN0QnVuZGxlcyIsImxpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlIiwibGlzdFhDVGVzdEJ1bmRsZXMiLCJtb2JpbGVMaXN0WENUZXN0c0luVGVzdEJ1bmRsZSIsImJ1bmRsZSIsIk9iamVjdCIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy94Y3Rlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG5jb25zdCBYQ1RFU1RfVElNRU9VVCA9IDYwICogNjAgKiAxMDAwOyAvLyA2MCBtaW51dGUgdGltZW91dFxuXG5jb25zdCB4Y3Rlc3RMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdYQ1Rlc3QnKTtcblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgSURCIGlzIHByZXNlbnQgYW5kIHRoYXQgbGF1bmNoV2l0aElEQiB3YXMgdXNlZFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE9wdHMgb2JqZWN0IGZyb20gdGhlIGRyaXZlciBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0SURCIChvcHRzKSB7XG4gIGlmICghb3B0cy5kZXZpY2U/LmlkYiB8fCAhb3B0cy5sYXVuY2hXaXRoSURCKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUbyB1c2UgWENUZXN0IHJ1bm5lciwgSURCIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svaWRiKSBtdXN0IGJlIGluc3RhbGxlZCBgICtcbiAgICAgIGBhbmQgc2Vzc2lvbnMgbXVzdCBiZSBydW4gd2l0aCB0aGUgXCJsYXVuY2hXaXRoSURCXCIgY2FwYWJpbGl0eWApO1xuICB9XG4gIHJldHVybiBvcHRzLmRldmljZS5pZGI7XG59XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBYQ1Rlc3RSZXN1bHRcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGVzdE5hbWUgTmFtZSBvZiB0aGUgdGVzdCAoZS5nLjogJ1hDVGVzdGVyQXBwVUlUZXN0cyAtIFhDVGVzdGVyQXBwVUlUZXN0cy5YQ1Rlc3RlckFwcFVJVGVzdHMvdGVzdEV4YW1wbGUnKVxuICogQHByb3BlcnR5IHtib29sZWFufSBwYXNzZWQgRGlkIHRoZSB0ZXN0cyBwYXNzP1xuICogQHByb3BlcnR5IHtib29sZWFufSBjcmFzaGVkIERpZCB0aGUgdGVzdHMgY3Jhc2g/XG4gKiBAcHJvcGVydHkge251bWJlcn0gZHVyYXRpb24gSG93IGxvbmcgZGlkIHRoZSB0ZXN0cyB0YWtlIChpbiBzZWNvbmRzKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZhaWx1cmVNZXNzYWdlIEZhaWx1cmUgbWVzc2FnZSAoaWYgYXBwbGljYWJsZSlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb2NhdGlvbiBUaGUgZ2VvbG9jYXRpb24gb2YgdGhlIHRlc3RzIChpZiBhcHBsaWNhYmxlKVxuICovXG5cbi8qKlxuICogUGFyc2UgdGhlIHN0ZG91dCBvZiBYQyB0ZXN0IGxvZ1xuICogQHBhcmFtIHtzdHJpbmd9IHN0ZG91dCBBIGxpbmUgb2Ygc3RhbmRhcmQgb3V0IGZyb20gYGlkYiB4Y3Rlc3QgcnVuIC4uLmBcbiAqIEByZXR1cm5zIHtBcnJheTxYQ1Rlc3RSZXN1bHQ+fSByZXN1bHRzIFRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIFhDVGVzdCBydW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWENUZXN0U3Rkb3V0IChzdGRvdXQpIHtcbiAgLy8gUGFyc2VzIGEgJ2tleScgaW50byBKU09OIGZvcm1hdFxuICBmdW5jdGlvbiBwYXJzZUtleSAobmFtZSkge1xuICAgIGNvbnN0IHdvcmRzID0gbmFtZS5zcGxpdCgnICcpO1xuICAgIGxldCBvdXQgPSAnJztcbiAgICBmb3IgKGNvbnN0IHdvcmQgb2Ygd29yZHMpIHtcbiAgICAgIG91dCArPSB3b3JkLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQuc3Vic3RyKDAsIDEpLnRvTG93ZXJDYXNlKCkgKyBvdXQuc3Vic3RyKDEpO1xuICB9XG5cbiAgLy8gUGFyc2VzIGEgJ3ZhbHVlJyBpbnRvIEpTT04gZm9ybWF0XG4gIGZ1bmN0aW9uIHBhcnNlVmFsdWUgKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICBzd2l0Y2ggKHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ3RydWUnOiByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2ZhbHNlJzogcmV0dXJuIGZhbHNlO1xuICAgICAgY2FzZSAnJzogcmV0dXJuIG51bGw7XG4gICAgICBkZWZhdWx0OiBicmVhaztcbiAgICB9XG4gICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgIGlmICghXy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlLmluZGV4T2YoJy4nKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9XG4gIGlmICghc3Rkb3V0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gUGFyc2UgZWFjaCBsaW5lIGludG8gYW4gYXJyYXlcbiAgY29uc3QgbGluZXMgPSBzdGRvdXQudHJpbSgpLnNwbGl0KCdcXG4nKTtcblxuICAvLyBPbmUgc2luZ2xlIHN0cmluZywganVzdCByZXR1cm4gdGhlIHN0cmluZ1xuICBpZiAobGluZXMubGVuZ3RoID09PSAxICYmICFsaW5lc1swXS5pbmNsdWRlcygnfCcpKSB7XG4gICAgcmV0dXJuIFtsaW5lc1swXV07XG4gIH1cblxuICBjb25zdCByZXN1bHRzID0gW107XG4gIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgIC8vIFRoZSBwcm9wZXJ0aWVzIGFyZSBzcGxpdCB1cCBieSBwaXBlcyBhbmQgZWFjaCBwcm9wZXJ0eVxuICAgIC8vIGhhcyB0aGUgZm9ybWF0IFwiU29tZSBLZXkgOiBTb21lIFZhbHVlXCJcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gbGluZS5zcGxpdCgnfCcpO1xuXG4gICAgLy8gUGFyc2UgZWFjaCBwcm9wZXJ0eVxuICAgIGNvbnN0IG91dHB1dCA9IHt9O1xuICAgIGxldCBlbnRyeUluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgICAgaWYgKGVudHJ5SW5kZXggPT09IDApIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHByb3BlcnR5IG9ubHkgY29udGFpbnMgb25lIHN0cmluZyB0aGF0IGNvbnRhaW5zXG4gICAgICAgIC8vIHRoZSB0ZXN0IG5hbWUgKGUuZy46ICdYQ1Rlc3RlckFwcFVJVGVzdHMgLSBYQ1Rlc3RlckFwcFVJVGVzdHMuWENUZXN0ZXJBcHBVSVRlc3RzL3Rlc3RFeGFtcGxlJylcbiAgICAgICAgb3V0cHV0LnRlc3ROYW1lID0gcHJvcC50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBwcm9wLnNwbGl0KCc6Jyk7XG4gICAgICAgIG91dHB1dFtwYXJzZUtleShrZXkudHJpbSgpKV0gPSBwYXJzZVZhbHVlKHZhbHVlID8gdmFsdWUudHJpbSgpIDogJycpO1xuICAgICAgfVxuICAgICAgZW50cnlJbmRleCsrO1xuICAgIH1cbiAgICAvLyBBZGQgdGhpcyBsaW5lIHRvIHRoZSByZXN1bHRzXG4gICAgcmVzdWx0cy5wdXNoKG91dHB1dCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUnVuWENVSVRlc3RSZXNwb25zZVxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8WENUZXN0UmVzdWx0Pn0gcmVzdWx0cyBUaGUgcmVzdWx0cyBvZiBhbGwgdGhlIHRlc3RzIHdpdGggaW5mb3JtYXRpb25cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb2RlIFRoZSBleGl0IGNvZGUgb2YgdGhlIHByb2Nlc3NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzaWduYWwgVGhlIHNpZ25hbCB0aGF0IHRlcm1pbmF0ZWQgdGhlIHByb2Nlc3MgKG9yIG51bGwpIChlLmcuOiBTSUdURVJNKVxuICpcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJ1blhDVUlUZXN0T3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gdGVzdFJ1bm5lckJ1bmRsZUlkIFRlc3QgYXBwIGJ1bmRsZSAoZS5nLjogJ2lvLmFwcGl1bS5YQ1Rlc3RlckFwcFVJVGVzdHMueGN0cnVubmVyJylcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gYXBwVW5kZXJUZXN0QnVuZGxlSWQgQXBwLXVuZGVyLXRlc3QgYnVuZGxlXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IHhjVGVzdEJ1bmRsZUlEIHhjdGVzdCBidW5kbGUgaWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0ZXN0VHlwZSBbdWldIFhDIHRlc3QgdHlwZS4gJ2FwcCcsICd1aScsIG9yICdsb2dpYydcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBlbnYgRW52aXJvbm1lbnQgdmFyaWFibGVzIHBhc3NlZCB0byB0ZXN0XG4gKiBAcHJvcGVydHkge0FycmF5PFN0cmluZz59IGFyZ3MgTGF1bmNoIGFyZ3VtZW50cyB0byBzdGFydCB0aGUgdGVzdCB3aXRoIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGN0ZXN0L3hjdWlhcHBsaWNhdGlvbi8xNTAwNDc3LWxhdW5jaGFyZ3VtZW50cyBmb3IgcmVmZXJlbmNlKVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXQgWzM2MDAwMF0gVGltZW91dCBpZiBzZXNzaW9uIGRvZXNuJ3QgY29tcGxldGUgYWZ0ZXIgZ2l2ZW4gdGltZSAoaW4gbWlsbGlzZWNvbmRzKVxuICovXG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7RXJyb3J9IFhDVUlUZXN0RXJyb3JcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gY29kZSBTdWJwcm9jZXNzIGV4aXQgY29kZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNpZ25hbCBUaGUgc2lnbmFsIChTSUcqKSB0aGF0IGNhdXNlZCB0aGUgcHJvY2VzcyB0byBmYWlsXG4gKiBAcHJvcGVydHkgeyFBcnJheTxYQ1Rlc3RSZXN1bHQ+fSByZXN1bHRzIFRoZSBvdXRwdXQgb2YgdGhlIGZhaWxlZCB0ZXN0IChpZiB0aGVyZSBpcyBvdXRwdXQpXG4gKi9cblxuLyoqXG4gKiBSdW4gYW4gWENUZXN0LiBMYXVuY2hlcyBhIHN1YnByb2Nlc3MgdGhhdCBydW5zIHRoZSBYQyBUZXN0IGFuZCBibG9ja3NcbiAqIHVudGlsIGl0IGlzIGNvbXBsZXRlLiBQYXJzZXMgdGhlIHN0ZG91dCBvZiB0aGUgcHJvY2VzcyBhbmQgcmV0dXJuc1xuICogcmVzdWx0IGFzIGFuIGFycmF5XG4gKlxuICogU2VlIGh0dHBzOi8vZmJpZGIuaW8vZG9jcy90ZXN0X2V4ZWN1dGlvbiBmb3IgcmVmZXJlbmNlXG4gKlxuICogQHBhcmFtIHtSdW5YQ1VJVGVzdE9wdGlvbnN9IHJ1blhDVUlUZXN0T3B0aW9uc1xuICogQHRocm93cyB7WENVSVRlc3RFcnJvcn0gRXJyb3IgdGhyb3duIGlmIHN1YnByb2Nlc3MgcmV0dXJucyBub24temVybyBleGl0IGNvZGVcbiAqIEByZXR1cm5zIHtSdW5YQ1VJVGVzdFJlc3BvbnNlfVxuICovXG5jb21tYW5kcy5tb2JpbGVSdW5YQ1Rlc3QgPSBhc3luYyBmdW5jdGlvbiBydW5YQ1Rlc3QgKHtcbiAgdGVzdFJ1bm5lckJ1bmRsZUlkLFxuICBhcHBVbmRlclRlc3RCdW5kbGVJZCxcbiAgeGN0ZXN0QnVuZGxlSWQsXG4gIHRlc3RUeXBlID0gJ3VpJyxcbiAgZW52LFxuICBhcmdzLFxuICB0aW1lb3V0ID0gWENURVNUX1RJTUVPVVQsXG59KSB7XG4gIGNvbnN0IHN1YnByb2MgPSBhd2FpdCBhc3NlcnRJREIodGhpcy5vcHRzKS5ydW5YQ1VJVGVzdChcbiAgICAgICAgdGVzdFJ1bm5lckJ1bmRsZUlkLCBhcHBVbmRlclRlc3RCdW5kbGVJZCwgeGN0ZXN0QnVuZGxlSWQsIHtlbnYsIGFyZ3MsIHRlc3RUeXBlfSxcbiAgKTtcbiAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgbW9zdFJlY2VudExvZ09iamVjdCA9IG51bGw7XG4gICAgbGV0IHhjdGVzdFRpbWVvdXQ7XG4gICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICB4Y3Rlc3RUaW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gcmVqZWN0KGBUaW1lZCBvdXQgYWZ0ZXIgJyR7dGltZW91dH1tcycgd2FpdGluZyBmb3IgWENUZXN0IHRvIGNvbXBsZXRlYCksXG4gICAgICAgIHRpbWVvdXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3VicHJvYy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBpZiAoc3Rkb3V0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbW9zdFJlY2VudExvZ09iamVjdCA9IHBhcnNlWENUZXN0U3Rkb3V0KHN0ZG91dCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8vIEZhaWxzIGlmIGxvZyBwYXJzaW5nIGZhaWxzLlxuICAgICAgICAgIC8vIFRoaXMgaXMgaW4gY2FzZSBJREIgY2hhbmdlcyB0aGUgd2F5IHRoYXQgbG9ncyBhcmUgZm9ybWF0dGVkIGFuZFxuICAgICAgICAgIC8vIGl0IGJyZWFrcyAncGFyc2VYQ1Rlc3RTdGRvdXQnLiBJZiB0aGF0IGhhcHBlbnMgd2Ugc3RpbGwgd2FudCB0aGUgcHJvY2Vzc1xuICAgICAgICAgIC8vIHRvIGZpbmlzaFxuICAgICAgICAgIHRoaXMubG9nLndhcm4oYEZhaWxlZCB0byBwYXJzZSBsb2dzIGZyb20gdGVzdCBvdXRwdXQ6ICcke3N0ZG91dH0nYCk7XG4gICAgICAgICAgdGhpcy5sb2cuZGVidWcoZXJyLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3Rkb3V0ICYmIHhjdGVzdExvZy5pbmZvKHN0ZG91dCk7XG4gICAgICBzdGRlcnIgJiYgeGN0ZXN0TG9nLmVycm9yKHN0ZGVycik7XG4gICAgfSk7XG5cbiAgICBzdWJwcm9jLm9uKCdleGl0JywgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHhjdGVzdFRpbWVvdXQpO1xuICAgICAgaWYgKGNvZGUgIT09IDApIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1vc3RSZWNlbnRMb2dPYmplY3QpO1xuICAgICAgICBlcnIuY29kZSA9IGNvZGU7XG4gICAgICAgIGlmIChzaWduYWwgIT0gbnVsbCkge1xuICAgICAgICAgIGVyci5zaWduYWwgPSBzaWduYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vc3RSZWNlbnRMb2dPYmplY3QpIHtcbiAgICAgICAgICBlcnIucmVzdWx0ID0gbW9zdFJlY2VudExvZ09iamVjdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKHtcbiAgICAgICAgY29kZSwgc2lnbmFsLCByZXN1bHRzOiBtb3N0UmVjZW50TG9nT2JqZWN0LCBwYXNzZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluc3RhbGxYQ1Rlc3RCdW5kbGVPcHRzXG4gKlxuICogQHByb3BlcnR5IHt4Y3Rlc3RBcHB9IHhjdGVzdEJ1bmRsZSBQYXRoIG9mIHRoZSBYQ1Rlc3QgYXBwIChVUkwgb3IgLmFwcClcbiAqL1xuXG4vKipcbiAqIEluc3RhbGwgYW4gWENUZXN0QnVuZGxlXG4gKlxuICogQHBhcmFtIHtJbnN0YWxsWENUZXN0QnVuZGxlT3B0cyF9IG9wdHMgSW5zdGFsbCB4Y3Rlc3QgYnVuZGxlIG9wdHNcbiAqL1xuY29tbWFuZHMubW9iaWxlSW5zdGFsbFhDVGVzdEJ1bmRsZSA9IGFzeW5jIGZ1bmN0aW9uIGluc3RhbGxYQ1Rlc3RCdW5kbGUgKG9wdHMpIHtcbiAgY29uc3QgeyB4Y3Rlc3RBcHAgfSA9IG9wdHM7XG4gIGlmICghXy5pc1N0cmluZyh4Y3Rlc3RBcHApKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgJ3hjdGVzdEFwcCcgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIgZm9yICdpbnN0YWxsWENUZXN0QnVuZGxlJyBhbmQgYCArXG4gICAgICBgbXVzdCBiZSBhIHN0cmluZy4gRm91bmQgJyR7eGN0ZXN0QXBwfSdgKTtcbiAgfVxuICB4Y3Rlc3RMb2cuaW5mbyhgSW5zdGFsbGluZyBidW5kbGUgJyR7eGN0ZXN0QXBwfSdgKTtcbiAgY29uc3QgaWRiID0gYXNzZXJ0SURCKHRoaXMub3B0cyk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaGVscGVycy5jb25maWd1cmVBcHAoeGN0ZXN0QXBwLCAnLnhjdGVzdCcpO1xuICBhd2FpdCBpZGIuaW5zdGFsbFhDVGVzdEJ1bmRsZShyZXMpO1xufTtcblxuLyoqXG4gKiBMaXN0IFhDVGVzdCBidW5kbGVzIHRoYXQgYXJlIGluc3RhbGxlZCBvbiBkZXZpY2VcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gTGlzdCBvZiBYQ1Rlc3QgYnVuZGxlcyAoZS5nLjogXCJYQ1Rlc3RlckFwcFVJVGVzdHMuWENUZXN0ZXJBcHBVSVRlc3RzL3Rlc3RMYXVuY2hQZXJmb3JtYW5jZVwiKVxuICovXG5jb21tYW5kcy5tb2JpbGVMaXN0WENUZXN0QnVuZGxlcyA9IGFzeW5jIGZ1bmN0aW9uIGxpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlICgpIHtcbiAgcmV0dXJuIGF3YWl0IGFzc2VydElEQih0aGlzLm9wdHMpLmxpc3RYQ1Rlc3RCdW5kbGVzKCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExpc3RYQ1Rlc3RzT3B0c1xuICpcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gYnVuZGxlIEJ1bmRsZSBJRCBvZiB0aGUgWENUZXN0XG4gKi9cblxuLyoqXG4gKiBMaXN0IFhDVGVzdHMgaW4gYSB0ZXN0IGJ1bmRsZVxuICpcbiAqIEBwYXJhbSB7IUxpc3RYQ1Rlc3RzT3B0c30gb3B0cyBYQ1Rlc3QgbGlzdCBvcHRpb25zXG4gKlxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59IFRoZSBsaXN0IG9mIHhjdGVzdHMgaW4gdGhlIHRlc3QgYnVuZGxlXG4gKiAgICAoZS5nLjogWyAnWENUZXN0ZXJBcHBVSVRlc3RzLlhDVGVzdGVyQXBwVUlUZXN0cy90ZXN0RXhhbXBsZScsXG4gICAgICAgICAgICAgICAgJ1hDVGVzdGVyQXBwVUlUZXN0cy5YQ1Rlc3RlckFwcFVJVGVzdHMvdGVzdExhdW5jaFBlcmZvcm1hbmNlJyBdIClcbiAqL1xuY29tbWFuZHMubW9iaWxlTGlzdFhDVGVzdHNJblRlc3RCdW5kbGUgPSBhc3luYyBmdW5jdGlvbiBsaXN0WENUZXN0c0luVGVzdEJ1bmRsZSAob3B0cykge1xuICBjb25zdCB7IGJ1bmRsZSB9ID0gb3B0cztcbiAgaWYgKCFfLmlzU3RyaW5nKGJ1bmRsZSkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGAnYnVuZGxlJyBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlciBmb3IgJ2xpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlJyBhbmQgYCArXG4gICAgICBgbXVzdCBiZSBhIHN0cmluZy4gRm91bmQgJyR7YnVuZGxlfSdgKTtcbiAgfVxuICBjb25zdCBpZGIgPSBhc3NlcnRJREIodGhpcy5vcHRzKTtcbiAgcmV0dXJuIGF3YWl0IGlkYi5saXN0WENUZXN0c0luVGVzdEJ1bmRsZShidW5kbGUpO1xufTtcblxuT2JqZWN0LmFzc2lnbihjb21tYW5kcyk7XG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7O0FBRUEsTUFBTUMsY0FBYyxHQUFHLEtBQUssRUFBTCxHQUFVLElBQWpDOztBQUVBLE1BQU1DLFNBQVMsR0FBR0MsZUFBQSxDQUFPQyxTQUFQLENBQWlCLFFBQWpCLENBQWxCOztBQU9PLFNBQVNDLFNBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0VBQUE7O0VBQy9CLElBQUksa0JBQUNBLElBQUksQ0FBQ0MsTUFBTix5Q0FBQyxhQUFhQyxHQUFkLEtBQXFCLENBQUNGLElBQUksQ0FBQ0csYUFBL0IsRUFBOEM7SUFDNUMsTUFBTSxJQUFJQyxLQUFKLENBQVcsZ0ZBQUQsR0FDYiw4REFERyxDQUFOO0VBRUQ7O0VBQ0QsT0FBT0osSUFBSSxDQUFDQyxNQUFMLENBQVlDLEdBQW5CO0FBQ0Q7O0FBbUJNLFNBQVNHLGlCQUFULENBQTRCQyxNQUE1QixFQUFvQztFQUV6QyxTQUFTQyxRQUFULENBQW1CQyxJQUFuQixFQUF5QjtJQUN2QixNQUFNQyxLQUFLLEdBQUdELElBQUksQ0FBQ0UsS0FBTCxDQUFXLEdBQVgsQ0FBZDtJQUNBLElBQUlDLEdBQUcsR0FBRyxFQUFWOztJQUNBLEtBQUssTUFBTUMsSUFBWCxJQUFtQkgsS0FBbkIsRUFBMEI7TUFDeEJFLEdBQUcsSUFBSUMsSUFBSSxDQUFDQyxNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFdBQWxCLEtBQWtDRixJQUFJLENBQUNDLE1BQUwsQ0FBWSxDQUFaLENBQXpDO0lBQ0Q7O0lBQ0QsT0FBT0YsR0FBRyxDQUFDRSxNQUFKLENBQVcsQ0FBWCxFQUFjLENBQWQsRUFBaUJFLFdBQWpCLEtB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
