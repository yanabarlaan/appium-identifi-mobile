"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _baseDriver = require("@appium/base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

const extensions = {};

extensions.mobilePushNotification = async function mobilePushNotification(opts = {}) {
  if (!this.isSimulator()) {
    throw new Error('This extension only works on Simulator');
  }

  const {
    payload,
    bundleId
  } = opts;

  if (!bundleId) {
    throw new _baseDriver.errors.InvalidArgumentError(`'bundleId' argument must be a valid bundle identifier string`);
  }

  if (!_lodash.default.isPlainObject(payload)) {
    throw new _baseDriver.errors.InvalidArgumentError(`The 'payload' argument value must be a valid dictionary. ` + `Got ${JSON.stringify(payload)} instead`);
  }

  if (!_lodash.default.isPlainObject(payload.aps)) {
    throw new _baseDriver.errors.InvalidArgumentError(`The 'payload.aps' value must be a valid dictionary. ` + `Got ${JSON.stringify(payload.aps)} instead`);
  }

  return await this.opts.device.pushNotification({ ...payload,
    'Simulator Target Bundle': bundleId
  });
};

extensions.mobileExpectNotification = async function mobileExpectNotification(opts = {}) {
  const {
    name,
    type,
    timeoutSeconds
  } = opts;
  return await this.proxyCommand('/wda/expectNotification', 'POST', {
    name,
    type,
    timeout: timeoutSeconds
  });
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL25vdGlmaWNhdGlvbnMuanMiLCJuYW1lcyI6WyJleHRlbnNpb25zIiwibW9iaWxlUHVzaE5vdGlmaWNhdGlvbiIsIm9wdHMiLCJpc1NpbXVsYXRvciIsIkVycm9yIiwicGF5bG9hZCIsImJ1bmRsZUlkIiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJfIiwiaXNQbGFpbk9iamVjdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJhcHMiLCJkZXZpY2UiLCJwdXNoTm90aWZpY2F0aW9uIiwibW9iaWxlRXhwZWN0Tm90aWZpY2F0aW9uIiwibmFtZSIsInR5cGUiLCJ0aW1lb3V0U2Vjb25kcyIsInByb3h5Q29tbWFuZCIsInRpbWVvdXQiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvY29tbWFuZHMvbm90aWZpY2F0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IGV4dGVuc2lvbnMgPSB7fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQdXNoTm90aWZpY2F0aW9uXG4gKlxuICogQHByb3BlcnR5IHshc3RyaW5nfSBidW5kbGVJZCAtIFRoZSBidW5kbGUgaWRlbnRpZmllciBvZiB0aGUgdGFyZ2V0IGFwcGxpY2F0aW9uXG4gKiBAcHJvcGVydHkgeyFvYmplY3R9IHBheWxvYWQgLSBSZW1vdGUgbm90aWZpY2F0aW9uIHBheWxvYWQuIFJlYWQgdGhlIGBDcmVhdGUgdGhlIEpTT04gUGF5bG9hZGAgdG9waWMgb2ZcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3VzZXJub3RpZmljYXRpb25zL3NldHRpbmdfdXBfYV9yZW1vdGVfbm90aWZpY2F0aW9uX3NlcnZlci9nZW5lcmF0aW5nX2FfcmVtb3RlX25vdGlmaWNhdGlvblxuICogZm9yIG1vcmUgZGV0YWlscyBvbiBob3cgdG8gY3JlYXRlIHRoaXMgcGF5bG9hZC5cbiAqL1xuXG4vKipcbiAqIFNpbXVsYXRlcyBwdXNoIG5vdGlmaWNhdGlvbiBkZWxpdmVyeSB0byBTaW11bGF0b3IuXG4gKiBPbmx5IGFwcGxpY2F0aW9uIHJlbW90ZSBwdXNoIG5vdGlmaWNhdGlvbnMgYXJlIHN1cHBvcnRlZC4gVm9JUCwgQ29tcGxpY2F0aW9uLCBGaWxlIFByb3ZpZGVyLFxuICogYW5kIG90aGVyIHR5cGVzIGFyZSBub3Qgc3VwcG9ydGVkXG4gKlxuICogQHNpbmNlIFhjb2RlIFNESyAxMS40XG4gKiBAcGFyYW0ge1B1c2hOb3RpZmljYXRpb259IG9wdHMgLSBUaGUgb2JqZWN0IHRoYXQgZGVzY3JpYmVzIEFwcGxlIHB1c2ggbm90aWZpY2F0aW9uIGNvbnRlbnQuXG4gKiBJdCBtdXN0IGNvbnRhaW4gYSB0b3AtbGV2ZWwgYGJ1bmRsZUlkYCBrZXkgd2l0aCBhIHN0cmluZyB2YWx1ZSBtYXRjaGluZ1xuICogdGhlIHRhcmdldCBhcHBsaWNhdGlvbuKAmHMgYnVuZGxlIGlkZW50aWZpZXIgYW5kIFwicGF5bG9hZC5hcHNcIiBrZXkgd2l0aCB2YWxpZCBBcHBsZSBQdXNoIE5vdGlmaWNhdGlvbiB2YWx1ZXMuXG4gKiBDaGVjayB0aGUgb3V0cHV0IG9mIGB4Y3J1biBzaW1jdGwgaGVscCBwdXNoYCBjb21tYW5kIGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4dGVuc2lvbnMubW9iaWxlUHVzaE5vdGlmaWNhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVB1c2hOb3RpZmljYXRpb24gKG9wdHMgPSB7fSkge1xuICBpZiAoIXRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBleHRlbnNpb24gb25seSB3b3JrcyBvbiBTaW11bGF0b3InKTtcbiAgfVxuXG4gIGNvbnN0IHsgcGF5bG9hZCwgYnVuZGxlSWQgfSA9IG9wdHM7XG4gIGlmICghYnVuZGxlSWQpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGAnYnVuZGxlSWQnIGFyZ3VtZW50IG11c3QgYmUgYSB2YWxpZCBidW5kbGUgaWRlbnRpZmllciBzdHJpbmdgKTtcbiAgfVxuICBpZiAoIV8uaXNQbGFpbk9iamVjdChwYXlsb2FkKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYFRoZSAncGF5bG9hZCcgYXJndW1lbnQgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGRpY3Rpb25hcnkuIGAgK1xuICAgICAgYEdvdCAke0pTT04uc3RyaW5naWZ5KHBheWxvYWQpfSBpbnN0ZWFkYCk7XG4gIH1cbiAgaWYgKCFfLmlzUGxhaW5PYmplY3QocGF5bG9hZC5hcHMpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgVGhlICdwYXlsb2FkLmFwcycgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGRpY3Rpb25hcnkuIGAgK1xuICAgICAgYEdvdCAke0pTT04uc3RyaW5naWZ5KHBheWxvYWQuYXBzKX0gaW5zdGVhZGApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnB1c2hOb3RpZmljYXRpb24oe1xuICAgIC4uLnBheWxvYWQsXG4gICAgJ1NpbXVsYXRvciBUYXJnZXQgQnVuZGxlJzogYnVuZGxlSWQsXG4gIH0pO1xufTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE5vdGlmaWNhdGlvbkV4cGVjdGF0aW9uT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBub3RpZmljYXRpb24gdG8gZXhwZWN0XG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHR5cGUgW3BsYWluXSAtIFdoaWNoIG5vdGlmaWNhdGlvbiB0eXBlIHRvIGV4cGVjdC5cbiAqIEVpdGhlciAncGxhaW4nIHRvIHdhaXQgZm9yIGEgbm90aWZpY2F0aW9uIGZyb20gdGhlIGRlZmF1bHQgbm90aWZpY2F0aW9uIGNlbnRlciBvciAnZGFyd2luJ1xuICogdG8gd2FpdCBmb3IgYSBzeXN0ZW0gbm90aWZpY2F0aW9uLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXRTZWNvbmRzIFs2MF0gLSBGb3IgaG93IGxvbmcgdG8gd2FpdCB1bnRpbCB0aGUgbm90aWZpY2F0aW9uIGlzIGRlbGl2ZXJlZFxuICogaW4gZmxvYXQgc2Vjb25kcy5cbiAqL1xuXG4vKipcbiAqIEJsb2NrcyB1bnRpbCB0aGUgZXhwZWN0ZWQgbm90aWZpY2F0aW9uIGlzIGRlbGl2ZXJlZC5cbiAqIFRoaXMgbWV0aG9kIGlzIGEgdGhpbiB3cmFwcGVyIG92ZXIgWENUTlNOb3RpZmljYXRpb25FeHBlY3RhdGlvbiBhbmRcbiAqIFhDVERhcndpbk5vdGlmaWNhdGlvbkV4cGVjdGF0aW9uIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSB7Tm90aWZpY2F0aW9uRXhwZWN0YXRpb25PcHRpb25zfSBvcHRzXG4gKiBAdGhyb3dzIFRpbWVvdXRFcnJvciBpZiB0aGUgZXhwZWN0ZWQgbm90aWZpY2F0aW9uIGhhcyBub3QgYmVlbiBkZWxpdmVyZWQgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0XG4gKi9cbmV4dGVuc2lvbnMubW9iaWxlRXhwZWN0Tm90aWZpY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlRXhwZWN0Tm90aWZpY2F0aW9uIChvcHRzID0ge30pIHtcbiAgY29uc3QgeyBuYW1lLCB0eXBlLCB0aW1lb3V0U2Vjb25kcyB9ID0gb3B0cztcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL2V4cGVjdE5vdGlmaWNhdGlvbicsICdQT1NUJywge1xuICAgIG5hbWUsXG4gICAgdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0U2Vjb25kcyxcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLFVBQVUsR0FBRyxFQUFuQjs7QUFzQkFBLFVBQVUsQ0FBQ0Msc0JBQVgsR0FBb0MsZUFBZUEsc0JBQWYsQ0FBdUNDLElBQUksR0FBRyxFQUE5QyxFQUFrRDtFQUNwRixJQUFJLENBQUMsS0FBS0MsV0FBTCxFQUFMLEVBQXlCO0lBQ3ZCLE1BQU0sSUFBSUMsS0FBSixDQUFVLHdDQUFWLENBQU47RUFDRDs7RUFFRCxNQUFNO0lBQUVDLE9BQUY7SUFBV0M7RUFBWCxJQUF3QkosSUFBOUI7O0VBQ0EsSUFBSSxDQUFDSSxRQUFMLEVBQWU7SUFDYixNQUFNLElBQUlDLGtCQUFBLENBQU9DLG9CQUFYLENBQWlDLDhEQUFqQyxDQUFOO0VBQ0Q7O0VBQ0QsSUFBSSxDQUFDQyxlQUFBLENBQUVDLGFBQUYsQ0FBZ0JMLE9BQWhCLENBQUwsRUFBK0I7SUFDN0IsTUFBTSxJQUFJRSxrQkFBQSxDQUFPQyxvQkFBWCxDQUFpQywyREFBRCxHQUNuQyxPQUFNRyxJQUFJLENBQUNDLFNBQUwsQ0FBZVAsT0FBZixDQUF3QixVQUQzQixDQUFOO0VBRUQ7O0VBQ0QsSUFBSSxDQUFDSSxlQUFBLENBQUVDLGFBQUYsQ0FBZ0JMLE9BQU8sQ0FBQ1EsR0FBeEIsQ0FBTCxFQUFtQztJQUNqQyxNQUFNLElBQUlOLGtCQUFBLENBQU9DLG9CQUFYLENBQWlDLHNEQUFELEdBQ25DLE9BQU1HLElBQUksQ0FBQ0MsU0FBTCxDQUFlUCxPQUFPLENBQUNRLEdBQXZCLENBQTRCLFVBRC9CLENBQU47RUFFRDs7RUFDRCxPQUFPLE1BQU0sS0FBS1gsSUFBTCxDQUFVWSxNQUFWLENBQWlCQyxnQkFBakIsQ0FBa0MsRUFDN0MsR0FBR1YsT0FEMEM7SUFFN0MsMkJBQTJCQztFQUZrQixDQUFsQyxDQUFiO0FBSUQsQ0FyQkQ7O0FBMkNBTixVQUFVLENBQUNnQix3QkFBWCxHQUFzQyxlQUFlQSx3QkFBZixDQUF5Q2QsSUFBSSxHQUFHLEVBQWhELEVBQW9EO0VBQ3hGLE1BQU07SUFBRWUsSUFBRjtJQUFRQyxJQUFSO0lBQWNDO0VBQWQsSUFBaUNqQixJQUF2QztFQUNBLE9BQU8sTUFBTSxLQUFLa0IsWUFBTCxDQUFrQix5QkFBbEIsRUFBNkMsTUFBN0MsRUFBcUQ7SUFDaEVILElBRGdFO0lBRWhFQyxJQUZnRTtJQUdoRUcsT0FBTyxFQUFFRjtFQUh1RCxDQUFyRCxDQUFiO0FBS0QsQ0FQRDs7ZUFTZW5CLFUifQ==
