"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getCookies = async function getCookies() {
  if (!this.isWebContext()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const cookies = (await this.remote.getCookies()) || {
    cookies: []
  };
  const decodedCookieValues = cookies.cookies.map(cookie => {
    try {
      return decodeURI(cookie.value);
    } catch (error) {
      this.log.debug(`Cookie ${cookie.name} was not decoded successfully. Cookie value: ${cookie.value}`);
      this.log.warn(error);
      return undefined;
    }
  });
  return _lodash.default.zip(cookies.cookies, decodedCookieValues).filter(([, value]) => !_lodash.default.isUndefined(value)).map(([cookie, value]) => Object.assign({}, cookie, {
    value
  }));
};

commands.deleteCookie = async function deleteCookie(cookieName) {
  if (!this.isWebContext()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();
  const cookie = cookies.find(cookie => cookie.name === cookieName);

  if (!cookie) {
    this.log.debug(`Cookie '${cookieName}' not found. Ignoring.`);
    return true;
  }

  await this._deleteCookie(cookie);
  return true;
};

commands.deleteCookies = async function deleteCookies() {
  if (!this.isWebContext()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();

  for (const cookie of cookies) {
    await this._deleteCookie(cookie);
  }

  return true;
};

helpers._deleteCookie = async function _deleteCookie(cookie) {
  const url = `http${cookie.secure ? 's' : ''}://${cookie.domain}${cookie.path}`;
  return await this.remote.deleteCookie(cookie.name, url);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NvbW1hbmRzL2Nvb2tpZXMuanMiLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZ2V0Q29va2llcyIsImlzV2ViQ29udGV4dCIsImVycm9ycyIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJjb29raWVzIiwicmVtb3RlIiwiZGVjb2RlZENvb2tpZVZhbHVlcyIsIm1hcCIsImNvb2tpZSIsImRlY29kZVVSSSIsInZhbHVlIiwiZXJyb3IiLCJsb2ciLCJkZWJ1ZyIsIm5hbWUiLCJ3YXJuIiwidW5kZWZpbmVkIiwiXyIsInppcCIsImZpbHRlciIsImlzVW5kZWZpbmVkIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVsZXRlQ29va2llIiwiY29va2llTmFtZSIsImZpbmQiLCJfZGVsZXRlQ29va2llIiwiZGVsZXRlQ29va2llcyIsInVybCIsInNlY3VyZSIsImRvbWFpbiIsInBhdGgiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvY29tbWFuZHMvY29va2llcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5nZXRDb29raWVzID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q29va2llcyAoKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgLy8gZ2V0IHRoZSBjb29raWVzIGZyb20gdGhlIHJlbW90ZSBkZWJ1Z2dlciwgb3IgYW4gZW1wdHkgb2JqZWN0XG4gIGNvbnN0IGNvb2tpZXMgPSBhd2FpdCB0aGlzLnJlbW90ZS5nZXRDb29raWVzKCkgfHwge2Nvb2tpZXM6IFtdfTtcblxuICAvLyB0aGUgdmFsdWUgaXMgVVJJIGVuY29kZWQsIHNvIGRlY29kZSBpdCBzYWZlbHlcbiAgY29uc3QgZGVjb2RlZENvb2tpZVZhbHVlcyA9IGNvb2tpZXMuY29va2llcy5tYXAoKGNvb2tpZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJKGNvb2tpZS52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nLmRlYnVnKGBDb29raWUgJHtjb29raWUubmFtZX0gd2FzIG5vdCBkZWNvZGVkIHN1Y2Nlc3NmdWxseS4gQ29va2llIHZhbHVlOiAke2Nvb2tpZS52YWx1ZX1gKTtcbiAgICAgIHRoaXMubG9nLndhcm4oZXJyb3IpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHppcCBjb29rZXMgd2l0aCBkZWNvZGVkIHZhbHVlLCByZW1vdmluZyB1bmRlZmluZWQgY29va2llIHZhbHVlc1xuICByZXR1cm4gXy56aXAoY29va2llcy5jb29raWVzLCBkZWNvZGVkQ29va2llVmFsdWVzKVxuICAgIC5maWx0ZXIoKFssIHZhbHVlXSkgPT4gIV8uaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIC5tYXAoKFtjb29raWUsIHZhbHVlXSkgPT4gT2JqZWN0LmFzc2lnbih7fSwgY29va2llLCB7dmFsdWV9KSk7XG59O1xuXG5jb21tYW5kcy5kZWxldGVDb29raWUgPSBhc3luYyBmdW5jdGlvbiBkZWxldGVDb29raWUgKGNvb2tpZU5hbWUpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICBjb25zdCBjb29raWVzID0gYXdhaXQgdGhpcy5nZXRDb29raWVzKCk7XG4gIGNvbnN0IGNvb2tpZSA9IGNvb2tpZXMuZmluZCgoY29va2llKSA9PiBjb29raWUubmFtZSA9PT0gY29va2llTmFtZSk7XG4gIGlmICghY29va2llKSB7XG4gICAgdGhpcy5sb2cuZGVidWcoYENvb2tpZSAnJHtjb29raWVOYW1lfScgbm90IGZvdW5kLiBJZ25vcmluZy5gKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGF3YWl0IHRoaXMuX2RlbGV0ZUNvb2tpZShjb29raWUpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbW1hbmRzLmRlbGV0ZUNvb2tpZXMgPSBhc3luYyBmdW5jdGlvbiBkZWxldGVDb29raWVzICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICBjb25zdCBjb29raWVzID0gYXdhaXQgdGhpcy5nZXRDb29raWVzKCk7XG4gIGZvciAoY29uc3QgY29va2llIG9mIGNvb2tpZXMpIHtcbiAgICBhd2FpdCB0aGlzLl9kZWxldGVDb29raWUoY29va2llKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmhlbHBlcnMuX2RlbGV0ZUNvb2tpZSA9IGFzeW5jIGZ1bmN0aW9uIF9kZWxldGVDb29raWUgKGNvb2tpZSkge1xuICBjb25zdCB1cmwgPSBgaHR0cCR7Y29va2llLnNlY3VyZSA/ICdzJyA6ICcnfTovLyR7Y29va2llLmRvbWFpbn0ke2Nvb2tpZS5wYXRofWA7XG4gIHJldHVybiBhd2FpdCB0aGlzLnJlbW90ZS5kZWxldGVDb29raWUoY29va2llLm5hbWUsIHVybCk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUYsUUFB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
