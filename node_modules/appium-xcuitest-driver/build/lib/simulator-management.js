"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSim = createSim;
exports.getExistingSim = getExistingSim;
exports.installToSimulator = installToSimulator;
exports.runSimulatorReset = runSimulatorReset;
exports.setLocale = setLocale;
exports.setLocaleAndPreferences = setLocaleAndPreferences;
exports.setPreferences = setPreferences;
exports.shutdownOtherSimulators = shutdownOtherSimulators;
exports.shutdownSimulator = shutdownSimulator;

require("source-map-support/register");

var _appiumIosSimulator = require("appium-ios-simulator");

var _nodeSimctl = _interopRequireDefault(require("node-simctl"));

var _appiumWebdriveragent = require("appium-webdriveragent");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _support = require("@appium/support");

var _desiredCaps = require("./desired-caps");

const APPIUM_SIM_PREFIX = 'appiumTest';
const SETTINGS_CAPS = ['locationServicesEnabled', 'locationServicesAuthorized'];
const SAFARI_SETTINGS_CAPS = ['safariAllowPopups', 'safariIgnoreFraudWarning', 'safariOpenLinksInBackground'];

async function createSim(caps, platform = _desiredCaps.PLATFORM_NAME_IOS) {
  const devicesSetPath = caps.simulatorDevicesSetPath;
  const udid = await new _nodeSimctl.default({
    devicesSetPath
  }).createDevice(`${APPIUM_SIM_PREFIX}-${_support.util.uuidV4().toUpperCase()}-${caps.deviceName}`, caps.deviceName, caps.platformVersion, {
    platform
  });
  return await (0, _appiumIosSimulator.getSimulator)(udid, {
    platform,
    checkExistence: false,
    devicesSetPath
  });
}

async function getExistingSim(opts = {}) {
  const {
    platformVersion,
    deviceName,
    simulatorDevicesSetPath: devicesSetPath
  } = opts;
  let appiumTestDevice;
  const simctl = new _nodeSimctl.default({
    devicesSetPath
  });

  for (const device of _lodash.default.values(await simctl.getDevices(platformVersion))) {
    if (device.name === deviceName) {
      return await (0, _appiumIosSimulator.getSimulator)(device.udid, {
        platform: device.platform,
        checkExistence: false,
        devicesSetPath
      });
    }

    if (device.name.startsWith(APPIUM_SIM_PREFIX) && device.name.endsWith(deviceName)) {
      appiumTestDevice = device;

      if (device.state === 'Booted') {
        break;
      }
    }
  }

  if (appiumTestDevice) {
    _logger.default.warn(`Unable to find device '${deviceName}'. ` + `Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);

    return await (0, _appiumIosSimulator.getSimulator)(appiumTestDevice.udid, {
      platform: appiumTestDevice.platform,
      checkExistence: false,
      devicesSetPath
    });
  }

  return null;
}

async function shutdownSimulator(device) {
  await (0, _appiumWebdriveragent.resetTestProcesses)(device.udid, true);
  await device.shutdown();
}

async function runSimulatorReset(device, opts) {
  if (opts.noReset && !opts.fullReset) {
    _logger.default.debug('Reset: noReset is on. Leaving simulator as is');

    return;
  }

  if (!device) {
    _logger.default.debug('Reset: no device available. Skipping');

    return;
  }

  if (opts.fullReset) {
    _logger.default.debug('Reset: fullReset is on. Cleaning simulator');

    await shutdownSimulator(device);
    let isKeychainsBackupSuccessful = false;

    if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
      isKeychainsBackupSuccessful = await device.backupKeychains();
    }

    await device.clean();

    if (isKeychainsBackupSuccessful) {
      await device.restoreKeychains(opts.keychainsExcludePatterns || []);

      _logger.default.info(`Successfully restored keychains after full reset`);
    } else if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
      _logger.default.warn('Cannot restore keychains after full reset, because ' + 'the backup operation did not succeed');
    }
  } else if (opts.bundleId) {
    if (await device.isRunning()) {
      if (opts.enforceSimulatorShutdown) {
        await shutdownSimulator(device);
      } else {
        try {
          await device.simctl.terminateApp(opts.bundleId);
        } catch (err) {
          _logger.default.warn(`Reset: failed to terminate Simulator application with id "${opts.bundleId}"`);
        }
      }
    }

    if (opts.app) {
      _logger.default.info('Not scrubbing third party app in anticipation of uninstall');

      return;
    }

    const isSafari = (opts.browserName || '').toLowerCase() === 'safari';

    try {
      if (isSafari) {
        await device.cleanSafari();
      } else {
        await device.scrubCustomApp('', opts.bundleId);
      }
    } catch (err) {
      _logger.default.warn(err.message);

      _logger.default.warn(`Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"'}. Leaving as is.`);
    }
  }
}

async function installToSimulator(device, app, bundleId, opts = {}) {
  if (!app) {
    _logger.default.debug('No app path is given. Nothing to install.');

    return;
  }

  const {
    noReset = true,
    newSimulator = false
  } = opts;

  if (!newSimulator && bundleId && (await device.isAppInstalled(bundleId))) {
    if (noReset) {
      _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);

      return;
    }

    _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);

    await device.removeApp(bundleId);
  }

  _logger.default.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);

  try {
    await device.installApp(app);
  } catch (e) {
    _logger.default.info(`Got an error on '${app}' install: ${e.message}`);

    _logger.default.info('Retrying application install');

    await device.installApp(app);
  }

  _logger.default.debug('The app has been installed successfully.');
}

async function shutdownOtherSimulators(currentDevice) {
  const simctl = new _nodeSimctl.default({
    devicesSetPath: currentDevice.devicesSetPath
  });

  const allDevices = _lodash.default.flatMap(_lodash.default.values(await simctl.getDevices()));

  const otherBootedDevices = allDevices.filter(device => device.udid !== currentDevice.udid && device.state === 'Booted');

  if (_lodash.default.isEmpty(otherBootedDevices)) {
    _logger.default.info('No other running simulators have been detected');

    return;
  }

  _logger.default.info(`Detected ${otherBootedDevices.length} other running ${_support.util.pluralize('Simulator', otherBootedDevices.length)}.` + `Shutting them down...`);

  for (const {
    udid
  } of otherBootedDevices) {
    await (0, _appiumWebdriveragent.resetTestProcesses)(udid, true);
    simctl.udid = udid;
    await simctl.shutdownDevice();
  }
}

async function launchAndQuitSimulator(sim, opts = {}) {
  _logger.default.debug('No simulator directories found.');

  const {
    safari,
    timeout
  } = opts;
  return timeout ? await sim.launchAndQuit(safari, timeout) : await sim.launchAndQuit(safari);
}

function checkPreferences(settings, opts = {}) {
  for (let setting of settings) {
    if (_lodash.default.has(opts, setting)) {
      return true;
    }
  }

  return false;
}

async function setLocaleAndPreferences(sim, opts, safari = false, shutdownFn = _lodash.default.noop) {
  const localConfig = await setLocale(sim, opts, {}, safari);
  const prefsUpdated = await setPreferences(sim, opts, safari);

  if (localConfig._updated || prefsUpdated) {
    _logger.default.debug('Updated settings. Rebooting the simulator if it is already open');

    await shutdownFn(sim);
  } else {
    _logger.default.debug('Setting did not need to be updated');
  }

  delete localConfig._updated;
  return localConfig;
}

async function setLocale(sim, opts, localeConfig = {}, safari = false) {
  if (!opts.language && !opts.locale && !opts.calendarFormat) {
    _logger.default.debug('No reason to set locale');

    return {
      _updated: false
    };
  }

  if (await sim.isFresh()) {
    await launchAndQuitSimulator(sim, {
      safari,
      timeout: opts.simulatorStartupTimeout
    });
  }

  _logger.default.debug('Setting locale information');

  localeConfig = {
    language: opts.language || localeConfig.language,
    locale: opts.locale || localeConfig.locale,
    calendarFormat: opts.calendarFormat || localeConfig.calendarFormat,
    _updated: false
  };

  try {
    let updated = await sim.updateLocale(opts.language, opts.locale, opts.calendarFormat);

    if (updated) {
      localeConfig._updated = true;
    }
  } catch (e) {
    _logger.default.errorAndThrow(`Appium was unable to set locale info: ${e}`);
  }

  return localeConfig;
}

async function setPreferences(sim, opts, safari = false) {
  let needToSetPrefs = checkPreferences(SETTINGS_CAPS, opts);
  let needToSetSafariPrefs = checkPreferences(SAFARI_SETTINGS_CAPS, opts);

  if (!needToSetPrefs && !needToSetSafariPrefs) {
    _logger.default.debug('No iOS / app preferences to set');

    return false;
  }

  _logger.default.debug('Setting iOS and app preferences');

  if (await sim.isFresh()) {
    await launchAndQuitSimulator(sim, {
      safari,
      timeout: opts.simulatorStartupTimeout
    });
  }

  let updated = false;

  try {
    if (needToSetPrefs) {
      updated = await setLocServicesPrefs(sim, opts);
    }
  } catch (e) {
    _logger.default.error('Error setting location services preferences, prefs will not work');

    _logger.default.error(e);
  }

  try {
    if (needToSetSafariPrefs) {
      updated = (await setSafariPrefs(sim, opts)) || updated;
    }
  } catch (e) {
    _logger.default.error('Error setting safari preferences, prefs will not work');

    _logger.default.error(e);
  }

  return updated;
}

async function setLocServicesPrefs(sim, opts = {}) {
  let locServ = _lodash.default.find([opts.locationServicesEnabled, opts.locationServicesAuthorized], c => !_lodash.default.isUndefined(c));

  if (!_lodash.default.isUndefined(locServ)) {
    locServ = locServ ? 1 : 0;

    _logger.default.debug(`Setting location services to ${locServ}`);

    await sim.updateSettings('locationServices', {
      LocationServicesEnabled: locServ,
      'LocationServicesEnabledIn7.0': locServ,
      'LocationServicesEnabledIn8.0': locServ
    });
  }

  if (!_lodash.default.isUndefined(opts.locationServicesAuthorized)) {
    if (!opts.bundleId) {
      let msg = "Can't set location services for app without bundle ID";

      _logger.default.errorAndThrow(msg);
    }

    let locAuth = !!opts.locationServicesAuthorized;

    if (locAuth) {
      _logger.default.debug('Authorizing location services for app');
    } else {
      _logger.default.debug('De-authorizing location services for app');
    }

    await sim.updateLocationSettings(opts.bundleId, locAuth);
  }
}

async function setSafariPrefs(sim, opts = {}) {
  let safariSettings = {};

  if (_lodash.default.has(opts, 'safariAllowPopups')) {
    const val = !!opts.safariAllowPopups;

    _logger.default.debug(`Setting javascript window opening to '${val}'`);

    safariSettings.WebKitJavaScriptCanOpenWindowsAutomatically = val;
    safariSettings.JavaScriptCanOpenWindowsAutomatically = val;
  }

  if (_lodash.default.has(opts, 'safariIgnoreFraudWarning')) {
    const val = !opts.safariIgnoreFraudWarning;

    _logger.default.debug(`Setting fraudulent website warning to '${val}'`);

    safariSettings.WarnAboutFraudulentWebsites = val;
  }

  if (_lodash.default.has(opts, 'safariOpenLinksInBackground')) {
    const val = opts.safariOpenLinksInBackground ? 1 : 0;

    _logger.default.debug(`Setting opening links in background to '${!!val}'`);

    safariSettings.OpenLinksInBackground = val;
  }

  return _lodash.default.size(safariSettings) > 0 ? await sim.updateSafariSettings(safariSettings) : false;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
