"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifySandbox = verifySandbox;
exports.withSandbox = withSandbox;

require("source-map-support/register");

var _sinon = _interopRequireDefault(require("sinon"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

let SANDBOX = Symbol();

function withSandbox(config, fn) {
  return () => {
    const S = {
      mocks: {},

      verify() {
        return this.sandbox.verify();
      }

    };
    beforeEach(function beforeEach() {
      S.sandbox = _sinon.default.createSandbox();
      S.sandbox.usingPromise(_bluebird.default);
      S.mocks[SANDBOX] = S.sandbox;

      for (let [key, value] of _lodash.default.toPairs(config.mocks)) {
        S.mocks[key] = S.sandbox.mock(value);
      }
    });
    afterEach(function afterEach() {
      S.sandbox.restore();

      for (let k of _lodash.default.keys(S.mocks)) {
        delete S.mocks[k];
      }

      delete S.mocks[SANDBOX];
    });
    fn(S);
  };
}

function verifySandbox(obj) {
  let sandbox = obj.sandbox ? obj.sandbox : obj[SANDBOX];
  sandbox.verify();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTQU5EQk9YIiwiU3ltYm9sIiwid2l0aFNhbmRib3giLCJjb25maWciLCJmbiIsIlMiLCJtb2NrcyIsInZlcmlmeSIsInNhbmRib3giLCJiZWZvcmVFYWNoIiwic2lub24iLCJjcmVhdGVTYW5kYm94IiwidXNpbmdQcm9taXNlIiwiQiIsImtleSIsInZhbHVlIiwiXyIsInRvUGFpcnMiLCJtb2NrIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsImsiLCJrZXlzIiwidmVyaWZ5U2FuZGJveCIsIm9iaiJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zYW5kYm94LXV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5sZXQgU0FOREJPWCA9IFN5bWJvbCgpO1xuXG4vLyB1c2UgdGhpcyBvbmUgaWYgdXNpbmcgYSBtaXggb2YgbW9ja3Mvc3R1Yi9zcGllc1xuZnVuY3Rpb24gd2l0aFNhbmRib3ggKGNvbmZpZywgZm4pIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCBTID0ge1xuICAgICAgbW9ja3M6IHt9LFxuICAgICAgdmVyaWZ5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FuZGJveC52ZXJpZnkoKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uIGJlZm9yZUVhY2ggKCkge1xuICAgICAgUy5zYW5kYm94ID0gc2lub24uY3JlYXRlU2FuZGJveCgpO1xuICAgICAgUy5zYW5kYm94LnVzaW5nUHJvbWlzZShCKTtcbiAgICAgIFMubW9ja3NbU0FOREJPWF0gPSBTLnNhbmRib3g7XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgXy50b1BhaXJzKGNvbmZpZy5tb2NrcykpIHtcbiAgICAgICAgUy5tb2Nrc1trZXldID0gUy5zYW5kYm94Lm1vY2sodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFmdGVyRWFjaChmdW5jdGlvbiBhZnRlckVhY2ggKCkge1xuICAgICAgUy5zYW5kYm94LnJlc3RvcmUoKTtcbiAgICAgIGZvciAobGV0IGsgb2YgXy5rZXlzKFMubW9ja3MpKSB7XG4gICAgICAgIGRlbGV0ZSBTLm1vY2tzW2tdO1xuICAgICAgfVxuICAgICAgZGVsZXRlIFMubW9ja3NbU0FOREJPWF07XG4gICAgfSk7XG4gICAgZm4oUyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVNhbmRib3ggKG9iaikge1xuICBsZXQgc2FuZGJveCA9IG9iai5zYW5kYm94ID8gb2JqLnNhbmRib3ggOiBvYmpbU0FOREJPWF07XG4gIHNhbmRib3gudmVyaWZ5KCk7XG59XG5cbmV4cG9ydCB7IHdpdGhTYW5kYm94LCB2ZXJpZnlTYW5kYm94IH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLE9BQU8sR0FBR0MsTUFBTSxFQUFwQjs7QUFHQSxTQUFTQyxXQUFULENBQXNCQyxNQUF0QixFQUE4QkMsRUFBOUIsRUFBa0M7RUFDaEMsT0FBTyxNQUFNO0lBQ1gsTUFBTUMsQ0FBQyxHQUFHO01BQ1JDLEtBQUssRUFBRSxFQURDOztNQUVSQyxNQUFNLEdBQUk7UUFDUixPQUFPLEtBQUtDLE9BQUwsQ0FBYUQsTUFBYixFQUFQO01BQ0Q7O0lBSk8sQ0FBVjtJQU1BRSxVQUFVLENBQUMsU0FBU0EsVUFBVCxHQUF1QjtNQUNoQ0osQ0FBQyxDQUFDRyxPQUFGLEdBQVlFLGVBQU1DLGFBQU4sRUFBWjtNQUNBTixDQUFDLENBQUNHLE9BQUYsQ0FBVUksWUFBVixDQUF1QkMsaUJBQXZCO01BQ0FSLENBQUMsQ0FBQ0MsS0FBRixDQUFRTixPQUFSLElBQW1CSyxDQUFDLENBQUNHLE9BQXJCOztNQUNBLEtBQUssSUFBSSxDQUFDTSxHQUFELEVBQU1DLEtBQU4sQ0FBVCxJQUF5QkMsZ0JBQUVDLE9BQUYsQ0FBVWQsTUFBTSxDQUFDRyxLQUFqQixDQUF6QixFQUFrRDtRQUNoREQsQ0FBQyxDQUFDQyxLQUFGLENBQVFRLEdBQVIsSUFBZVQsQ0FBQyxDQUFDRyxPQUFGLENBQVVVLElBQVYsQ0FBZUgsS0FBZixDQUFmO01BQ0Q7SUFDRixDQVBTLENBQVY7SUFRQUksU0FBUyxDQUFDLFNBQVNBLFNBQVQsR0FBc0I7TUFDOUJkLENBQUMsQ0FBQ0csT0FBRixDQUFVWSxPQUFWOztNQUNBLEtBQUssSUFBSUMsQ0FBVCxJQUFjTCxnQkFBRU0sSUFBRixDQUFPakIsQ0FBQyxDQUFDQyxLQUFULENBQWQsRUFBK0I7UUFDN0IsT0FBT0QsQ0FBQyxDQUFDQyxLQUFGLENBQVFlLENBQVIsQ0FBUDtNQUNEOztNQUNELE9BQU9oQixDQUFDLENBQUNDLEtBQUYsQ0FBUU4sT0FBUixDQUFQO0lBQ0QsQ0FOUSxDQUFUO0lBT0FJLEVBQUUsQ0FBQ0MsQ0FBRCxDQUFGO0VBQ0QsQ0F2QkQ7QUF3QkQ7O0FBRUQsU0FBU2tCLGFBQVQsQ0FBd0JDLEdBQXhCLEVBQTZCO0VBQzNCLElBQUloQixPQUFPLEdBQUdnQixHQUFHLENBQUNoQixPQUFKLEdBQWNnQixHQUFHLENBQUNoQixPQUFsQixHQUE0QmdCLEdBQUcsQ0FBQ3hCLE9BQUQsQ0FBN0M7RUFDQVEsT0FBTyxDQUFDRCxNQUFSO0FBQ0QifQ==