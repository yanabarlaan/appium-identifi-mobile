"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MAX_SETTINGS_SIZE = exports.DeviceSettings = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _support = require("@appium/support");

var _errors = require("../protocol/errors");

const MAX_SETTINGS_SIZE = 20 * 1024 * 1024;
exports.MAX_SETTINGS_SIZE = MAX_SETTINGS_SIZE;

class DeviceSettings {
  _settings;
  _onSettingsUpdate;

  constructor(defaultSettings, onSettingsUpdate) {
    this._settings = { ...(defaultSettings !== null && defaultSettings !== void 0 ? defaultSettings : {})
    };
    this._onSettingsUpdate = onSettingsUpdate !== null && onSettingsUpdate !== void 0 ? onSettingsUpdate : async () => {};
  }

  async update(newSettings) {
    if (!_lodash.default.isPlainObject(newSettings)) {
      throw new _errors.errors.InvalidArgumentError(`Settings update should be called with valid JSON. Got ` + `${JSON.stringify(newSettings)} instead`);
    }

    if (_support.node.getObjectSize({ ...this._settings,
      ...newSettings
    }) >= MAX_SETTINGS_SIZE) {
      throw new _errors.errors.InvalidArgumentError(`New settings cannot be applied, because the overall ` + `object size exceeds the allowed limit of ${_support.util.toReadableSizeString(MAX_SETTINGS_SIZE)}`);
    }

    const props = _lodash.default.keys(newSettings);

    for (const prop of props) {
      if (!_lodash.default.isUndefined(this._settings[prop])) {
        if (this._settings[prop] === newSettings[prop]) {
          _logger.default.debug(`The value of '${prop}' setting did not change. Skipping the update for it`);

          continue;
        }
      }

      await this._onSettingsUpdate(prop, newSettings[prop], this._settings[prop]);
      this._settings[prop] = newSettings[prop];
    }
  }

  getSettings() {
    return this._settings;
  }

}

exports.DeviceSettings = DeviceSettings;
var _default = DeviceSettings;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQVhfU0VUVElOR1NfU0laRSIsIkRldmljZVNldHRpbmdzIiwiX3NldHRpbmdzIiwiX29uU2V0dGluZ3NVcGRhdGUiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRTZXR0aW5ncyIsIm9uU2V0dGluZ3NVcGRhdGUiLCJ1cGRhdGUiLCJuZXdTZXR0aW5ncyIsIl8iLCJpc1BsYWluT2JqZWN0IiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwibm9kZSIsImdldE9iamVjdFNpemUiLCJ1dGlsIiwidG9SZWFkYWJsZVNpemVTdHJpbmciLCJwcm9wcyIsImtleXMiLCJwcm9wIiwiaXNVbmRlZmluZWQiLCJsb2ciLCJkZWJ1ZyIsImdldFNldHRpbmdzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2Jhc2Vkcml2ZXIvZGV2aWNlLXNldHRpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1jaGVja1xuXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBub2RlLCB1dGlsIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJy4uL3Byb3RvY29sL2Vycm9ycyc7XG5cbi8qKlxuICogTWF4aW11bSBzaXplIChpbiBieXRlcykgb2YgYSBnaXZlbiBkcml2ZXIncyBzZXR0aW5ncyBvYmplY3QgKHdoaWNoIGlzIGludGVybmFsIHRvIHtAbGlua2NvZGUgRHJpdmVyU2V0dGluZ3N9KS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9TRVRUSU5HU19TSVpFID0gMjAgKiAxMDI0ICogMTAyNDsgLy8gMjAgTUJcblxuLyoqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsdW5rbm93bj59IFRcbiAqIEBpbXBsZW1lbnRzIHtJRGV2aWNlU2V0dGluZ3M8VD59XG4gKi9cbmNsYXNzIERldmljZVNldHRpbmdzIHtcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKiBAdHlwZSB7VH1cbiAgICovXG4gIF9zZXR0aW5ncztcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKiBAdHlwZSB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuU2V0dGluZ3NVcGRhdGVMaXN0ZW5lcjxUPn1cbiAgICovXG4gIF9vblNldHRpbmdzVXBkYXRlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgX3NoYWxsb3cgY29weV8gb2YgdGhlIGBkZWZhdWx0U2V0dGluZ3NgIHBhcmFtZXRlciFcbiAgICogQHBhcmFtIHtUfSBbZGVmYXVsdFNldHRpbmdzXVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLlNldHRpbmdzVXBkYXRlTGlzdGVuZXI8VD59IFtvblNldHRpbmdzVXBkYXRlXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRlZmF1bHRTZXR0aW5ncywgb25TZXR0aW5nc1VwZGF0ZSkge1xuICAgIHRoaXMuX3NldHRpbmdzID0gLyoqIEB0eXBlIHtUfSAqLyh7Li4uKGRlZmF1bHRTZXR0aW5ncyA/PyB7fSl9KTtcbiAgICB0aGlzLl9vblNldHRpbmdzVXBkYXRlID0gb25TZXR0aW5nc1VwZGF0ZSA/PyAoYXN5bmMgKCkgPT4ge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIGNhbGxzIHVwZGF0ZVNldHRpbmdzIGZyb20gaW1wbGVtZW50aW5nIGRyaXZlciBldmVyeSB0aW1lIGEgc2V0dGluZyBpcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge1R9IG5ld1NldHRpbmdzXG4gICAqL1xuICBhc3luYyB1cGRhdGUgKG5ld1NldHRpbmdzKSB7XG4gICAgaWYgKCFfLmlzUGxhaW5PYmplY3QobmV3U2V0dGluZ3MpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBTZXR0aW5ncyB1cGRhdGUgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHZhbGlkIEpTT04uIEdvdCBgICtcbiAgICAgICAgYCR7SlNPTi5zdHJpbmdpZnkobmV3U2V0dGluZ3MpfSBpbnN0ZWFkYCk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuZ2V0T2JqZWN0U2l6ZSh7Li4udGhpcy5fc2V0dGluZ3MsIC4uLm5ld1NldHRpbmdzfSkgPj0gTUFYX1NFVFRJTkdTX1NJWkUpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYE5ldyBzZXR0aW5ncyBjYW5ub3QgYmUgYXBwbGllZCwgYmVjYXVzZSB0aGUgb3ZlcmFsbCBgICtcbiAgICAgICAgYG9iamVjdCBzaXplIGV4Y2VlZHMgdGhlIGFsbG93ZWQgbGltaXQgb2YgJHt1dGlsLnRvUmVhZGFibGVTaXplU3RyaW5nKE1BWF9TRVRUSU5HU19TSVpFKX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wcyA9IC8qKiBAdHlwZSB7KGtleW9mIFQgJiBzdHJpbmcpW119ICovKF8ua2V5cyhuZXdTZXR0aW5ncykpO1xuICAgIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wcykge1xuICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHRoaXMuX3NldHRpbmdzW3Byb3BdKSkge1xuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3NbcHJvcF0gPT09IG5ld1NldHRpbmdzW3Byb3BdKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGBUaGUgdmFsdWUgb2YgJyR7cHJvcH0nIHNldHRpbmcgZGlkIG5vdCBjaGFuZ2UuIFNraXBwaW5nIHRoZSB1cGRhdGUgZm9yIGl0YCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuX29uU2V0dGluZ3NVcGRhdGUocHJvcCwgbmV3U2V0dGluZ3NbcHJvcF0sIHRoaXMuX3NldHRpbmdzW3Byb3BdKTtcbiAgICAgIHRoaXMuX3NldHRpbmdzW3Byb3BdID0gbmV3U2V0dGluZ3NbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgZ2V0U2V0dGluZ3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZXZpY2VTZXR0aW5ncztcbmV4cG9ydCB7IERldmljZVNldHRpbmdzIH07XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5EZXZpY2VTZXR0aW5nczxUPn0gSURldmljZVNldHRpbmdzXG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFLTyxNQUFNQSxpQkFBaUIsR0FBRyxLQUFLLElBQUwsR0FBWSxJQUF0Qzs7O0FBTVAsTUFBTUMsY0FBTixDQUFxQjtFQU1uQkMsU0FBUztFQU1UQyxpQkFBaUI7O0VBT2pCQyxXQUFXLENBQUVDLGVBQUYsRUFBbUJDLGdCQUFuQixFQUFxQztJQUM5QyxLQUFLSixTQUFMLEdBQWtDLEVBQUMsSUFBSUcsZUFBSixhQUFJQSxlQUFKLGNBQUlBLGVBQUosR0FBdUIsRUFBdkI7SUFBRCxDQUFsQztJQUNBLEtBQUtGLGlCQUFMLEdBQXlCRyxnQkFBekIsYUFBeUJBLGdCQUF6QixjQUF5QkEsZ0JBQXpCLEdBQThDLFlBQVksQ0FBRSxDQUE1RDtFQUNEOztFQU1XLE1BQU5DLE1BQU0sQ0FBRUMsV0FBRixFQUFlO0lBQ3pCLElBQUksQ0FBQ0MsZ0JBQUVDLGFBQUYsQ0FBZ0JGLFdBQWhCLENBQUwsRUFBbUM7TUFDakMsTUFBTSxJQUFJRyxlQUFPQyxvQkFBWCxDQUFpQyx3REFBRCxHQUNuQyxHQUFFQyxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sV0FBZixDQUE0QixVQUQzQixDQUFOO0lBRUQ7O0lBRUQsSUFBSU8sY0FBS0MsYUFBTCxDQUFtQixFQUFDLEdBQUcsS0FBS2QsU0FBVDtNQUFvQixHQUFHTTtJQUF2QixDQUFuQixLQUEyRFIsaUJBQS9ELEVBQWtGO01BQ2hGLE1BQU0sSUFBSVcsZUFBT0Msb0JBQVgsQ0FBaUMsc0RBQUQsR0FDbkMsNENBQTJDSyxjQUFLQyxvQkFBTCxDQUEwQmxCLGlCQUExQixDQUE2QyxFQURyRixDQUFOO0lBRUQ7O0lBRUQsTUFBTW1CLEtBQUssR0FBdUNWLGdCQUFFVyxJQUFGLENBQU9aLFdBQVAsQ0FBbEQ7O0lBQ0EsS0FBSyxNQUFNYSxJQUFYLElBQW1CRixLQUFuQixFQUEwQjtNQUN4QixJQUFJLENBQUNWLGdCQUFFYSxXQUFGLENBQWMsS0FBS3BCLFNBQUwsQ0FBZW1CLElBQWYsQ0FBZCxDQUFMLEVBQTBDO1FBQ3hDLElBQUksS0FBS25CLFNBQUwsQ0FBZW1CLElBQWYsTUFBeUJiLFdBQVcsQ0FBQ2EsSUFBRCxDQUF4QyxFQUFnRDtVQUM5Q0UsZ0JBQUlDLEtBQUosQ0FBVyxpQkFBZ0JILElBQUssc0RBQWhDOztVQUNBO1FBQ0Q7TUFDRjs7TUFDRCxNQUFNLEtBQUtsQixpQkFBTCxDQUF1QmtCLElBQXZCLEVBQTZCYixXQUFXLENBQUNhLElBQUQsQ0FBeEMsRUFBZ0QsS0FBS25CLFNBQUwsQ0FBZW1CLElBQWYsQ0FBaEQsQ0FBTjtNQUNBLEtBQUtuQixTQUFMLENBQWVtQixJQUFmLElBQXVCYixXQUFXLENBQUNhLElBQUQsQ0FBbEM7SUFDRDtFQUNGOztFQUVESSxXQUFXLEdBQUk7SUFDYixPQUFPLEtBQUt2QixTQUFaO0VBQ0Q7O0FBdERrQjs7O2VBeURORCxjIn0=