"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validators = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

function isNumber(o) {
  return _lodash.default.isNumber(o) || !_lodash.default.isNaN(parseInt(o, 10)) || !_lodash.default.isNaN(parseFloat(o));
}

function msValidator(ms) {
  if (!_lodash.default.isNumber(ms) || ms < 0) {
    throw new Error('Wait ms must be a number equal to 0 or greater');
  }
}

const validators = {
  setUrl: url => {
    if (!url || !url.match(/^([a-zA-Z0-9_+.-]+:\/\/)|(about:)|(data:)/)) {
      throw new Error('Url or Uri must start with <scheme>://');
    }
  },
  implicitWait: ms => {
    msValidator(ms);
  },
  asyncScriptTimeout: ms => {
    msValidator(ms);
  },
  clickCurrent: button => {
    if (!(isNumber(button) || _lodash.default.isUndefined(button)) || button < 0 || button > 2) {
      throw new Error('Click button must be 0, 1, or 2');
    }
  },
  setNetworkConnection: type => {
    if (!isNumber(type) || [0, 1, 2, 4, 6].indexOf(type) === -1) {
      throw new Error('Network type must be one of 0, 1, 2, 4, 6');
    }
  }
};
exports.validators = validators;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc051bWJlciIsIm8iLCJfIiwiaXNOYU4iLCJwYXJzZUludCIsInBhcnNlRmxvYXQiLCJtc1ZhbGlkYXRvciIsIm1zIiwiRXJyb3IiLCJ2YWxpZGF0b3JzIiwic2V0VXJsIiwidXJsIiwibWF0Y2giLCJpbXBsaWNpdFdhaXQiLCJhc3luY1NjcmlwdFRpbWVvdXQiLCJjbGlja0N1cnJlbnQiLCJidXR0b24iLCJpc1VuZGVmaW5lZCIsInNldE5ldHdvcmtDb25uZWN0aW9uIiwidHlwZSIsImluZGV4T2YiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcHJvdG9jb2wvdmFsaWRhdG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5mdW5jdGlvbiBpc051bWJlciAobykge1xuICByZXR1cm4gXy5pc051bWJlcihvKSB8fCAhXy5pc05hTihwYXJzZUludChvLCAxMCkpIHx8ICFfLmlzTmFOKHBhcnNlRmxvYXQobykpO1xufVxuXG5mdW5jdGlvbiBtc1ZhbGlkYXRvciAobXMpIHtcbiAgaWYgKCFfLmlzTnVtYmVyKG1zKSB8fCBtcyA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhaXQgbXMgbXVzdCBiZSBhIG51bWJlciBlcXVhbCB0byAwIG9yIGdyZWF0ZXInKTtcbiAgfVxufVxuXG5jb25zdCB2YWxpZGF0b3JzID0ge1xuICBzZXRVcmw6ICh1cmwpID0+IHtcbiAgICAvLyBlaXRoZXIgYW4gYHh5ejovL2AsIGBhYm91dDpgLCBvciBgZGF0YTpgIHNjaGVtZSBpcyBhbGxvd2VkXG4gICAgaWYgKCF1cmwgfHwgIXVybC5tYXRjaCgvXihbYS16QS1aMC05XysuLV0rOlxcL1xcLyl8KGFib3V0Oil8KGRhdGE6KS8pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VybCBvciBVcmkgbXVzdCBzdGFydCB3aXRoIDxzY2hlbWU+Oi8vJyk7XG4gICAgfVxuICB9LFxuICBpbXBsaWNpdFdhaXQ6IChtcykgPT4ge1xuICAgIG1zVmFsaWRhdG9yKG1zKTtcbiAgfSxcbiAgYXN5bmNTY3JpcHRUaW1lb3V0OiAobXMpID0+IHtcbiAgICBtc1ZhbGlkYXRvcihtcyk7XG4gIH0sXG4gIGNsaWNrQ3VycmVudDogKGJ1dHRvbikgPT4ge1xuICAgIGlmICghKGlzTnVtYmVyKGJ1dHRvbikgfHwgXy5pc1VuZGVmaW5lZChidXR0b24pKSB8fCAoYnV0dG9uIDwgMCB8fCBidXR0b24gPiAyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGljayBidXR0b24gbXVzdCBiZSAwLCAxLCBvciAyJyk7XG4gICAgfVxuICB9LFxuICBzZXROZXR3b3JrQ29ubmVjdGlvbjogKHR5cGUpID0+IHtcbiAgICBpZiAoIWlzTnVtYmVyKHR5cGUpIHx8IFswLCAxLCAyLCA0LCA2XS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZXR3b3JrIHR5cGUgbXVzdCBiZSBvbmUgb2YgMCwgMSwgMiwgNCwgNicpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgdmFsaWRhdG9ycyB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBLFNBQVNBLFFBQVQsQ0FBbUJDLENBQW5CLEVBQXNCO0VBQ3BCLE9BQU9DLGdCQUFFRixRQUFGLENBQVdDLENBQVgsS0FBaUIsQ0FBQ0MsZ0JBQUVDLEtBQUYsQ0FBUUMsUUFBUSxDQUFDSCxDQUFELEVBQUksRUFBSixDQUFoQixDQUFsQixJQUE4QyxDQUFDQyxnQkFBRUMsS0FBRixDQUFRRSxVQUFVLENBQUNKLENBQUQsQ0FBbEIsQ0FBdEQ7QUFDRDs7QUFFRCxTQUFTSyxXQUFULENBQXNCQyxFQUF0QixFQUEwQjtFQUN4QixJQUFJLENBQUNMLGdCQUFFRixRQUFGLENBQVdPLEVBQVgsQ0FBRCxJQUFtQkEsRUFBRSxHQUFHLENBQTVCLEVBQStCO0lBQzdCLE1BQU0sSUFBSUMsS0FBSixDQUFVLGdEQUFWLENBQU47RUFDRDtBQUNGOztBQUVELE1BQU1DLFVBQVUsR0FBRztFQUNqQkMsTUFBTSxFQUFHQyxHQUFELElBQVM7SUFFZixJQUFJLENBQUNBLEdBQUQsSUFBUSxDQUFDQSxHQUFHLENBQUNDLEtBQUosQ0FBVSwyQ0FBVixDQUFiLEVBQXFFO01BQ25FLE1BQU0sSUFBSUosS0FBSixDQUFVLHdDQUFWLENBQU47SUFDRDtFQUNGLENBTmdCO0VBT2pCSyxZQUFZLEVBQUdOLEVBQUQsSUFBUTtJQUNwQkQsV0FBVyxDQUFDQyxFQUFELENBQVg7RUFDRCxDQVRnQjtFQVVqQk8sa0JBQWtCLEVBQUdQLEVBQUQsSUFBUTtJQUMxQkQsV0FBVyxDQUFDQyxFQUFELENBQVg7RUFDRCxDQVpnQjtFQWFqQlEsWUFBWSxFQUFHQyxNQUFELElBQVk7SUFDeEIsSUFBSSxFQUFFaEIsUUFBUSxDQUFDZ0IsTUFBRCxDQUFSLElBQW9CZCxnQkFBRWUsV0FBRixDQUFjRCxNQUFkLENBQXRCLEtBQWlEQSxNQUFNLEdBQUcsQ0FBVCxJQUFjQSxNQUFNLEdBQUcsQ0FBNUUsRUFBZ0Y7TUFDOUUsTUFBTSxJQUFJUixLQUFKLENBQVUsaUNBQVYsQ0FBTjtJQUNEO0VBQ0YsQ0FqQmdCO0VBa0JqQlUsb0JBQW9CLEVBQUdDLElBQUQsSUFBVTtJQUM5QixJQUFJLENBQUNuQixRQUFRLENBQUNtQixJQUFELENBQVQsSUFBbUIsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQkMsT0FBaEIsQ0FBd0JELElBQXhCLE1BQWtDLENBQUMsQ0FBMUQsRUFBNkQ7TUFDM0QsTUFBTSxJQUFJWCxLQUFKLENBQVUsMkNBQVYsQ0FBTjtJQUNEO0VBQ0Y7QUF0QmdCLENBQW5CIn0=