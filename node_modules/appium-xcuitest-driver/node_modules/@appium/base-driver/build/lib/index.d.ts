export { DriverCore } from "./basedriver/core";
export default BaseDriver;
import { BaseDriver } from "./basedriver/driver";
import { DeviceSettings } from "./basedriver/device-settings";
export const routeConfiguringFunction: typeof protocol.routeConfiguringFunction;
export const errors: {
    NotYetImplementedError: typeof import("./protocol/errors").NotYetImplementedError;
    NotImplementedError: typeof import("./protocol/errors").NotImplementedError;
    BadParametersError: typeof import("./protocol/errors").BadParametersError;
    InvalidArgumentError: typeof import("./protocol/errors").InvalidArgumentError;
    NoSuchDriverError: typeof import("./protocol/errors").NoSuchDriverError;
    NoSuchElementError: typeof import("./protocol/errors").NoSuchElementError;
    UnknownCommandError: typeof import("./protocol/errors").UnknownCommandError;
    StaleElementReferenceError: typeof import("./protocol/errors").StaleElementReferenceError;
    ElementNotVisibleError: typeof import("./protocol/errors").ElementNotVisibleError;
    InvalidElementStateError: typeof import("./protocol/errors").InvalidElementStateError;
    UnknownError: typeof import("./protocol/errors").UnknownError;
    ElementIsNotSelectableError: typeof import("./protocol/errors").ElementIsNotSelectableError;
    ElementClickInterceptedError: typeof import("./protocol/errors").ElementClickInterceptedError;
    ElementNotInteractableError: typeof import("./protocol/errors").ElementNotInteractableError;
    InsecureCertificateError: typeof import("./protocol/errors").InsecureCertificateError;
    JavaScriptError: typeof import("./protocol/errors").JavaScriptError;
    XPathLookupError: typeof import("./protocol/errors").XPathLookupError;
    TimeoutError: typeof import("./protocol/errors").TimeoutError;
    NoSuchWindowError: typeof import("./protocol/errors").NoSuchWindowError;
    NoSuchCookieError: typeof import("./protocol/errors").NoSuchCookieError;
    InvalidCookieDomainError: typeof import("./protocol/errors").InvalidCookieDomainError;
    InvalidCoordinatesError: typeof import("./protocol/errors").InvalidCoordinatesError;
    UnableToSetCookieError: typeof import("./protocol/errors").UnableToSetCookieError;
    UnexpectedAlertOpenError: typeof import("./protocol/errors").UnexpectedAlertOpenError;
    NoAlertOpenError: typeof import("./protocol/errors").NoAlertOpenError;
    ScriptTimeoutError: typeof import("./protocol/errors").ScriptTimeoutError;
    InvalidElementCoordinatesError: typeof import("./protocol/errors").InvalidElementCoordinatesError;
    IMENotAvailableError: typeof import("./protocol/errors").IMENotAvailableError;
    IMEEngineActivationFailedError: typeof import("./protocol/errors").IMEEngineActivationFailedError;
    InvalidSelectorError: typeof import("./protocol/errors").InvalidSelectorError;
    SessionNotCreatedError: typeof import("./protocol/errors").SessionNotCreatedError;
    MoveTargetOutOfBoundsError: typeof import("./protocol/errors").MoveTargetOutOfBoundsError;
    NoSuchAlertError: typeof import("./protocol/errors").NoSuchAlertError;
    NoSuchContextError: typeof import("./protocol/errors").NoSuchContextError;
    InvalidContextError: typeof import("./protocol/errors").InvalidContextError;
    NoSuchFrameError: typeof import("./protocol/errors").NoSuchFrameError;
    UnableToCaptureScreen: typeof import("./protocol/errors").UnableToCaptureScreen;
    UnknownMethodError: typeof import("./protocol/errors").UnknownMethodError;
    UnsupportedOperationError: typeof import("./protocol/errors").UnsupportedOperationError;
    ProxyRequestError: typeof import("./protocol/errors").ProxyRequestError;
};
export const isErrorType: typeof protocol.isErrorType;
import { PROTOCOLS } from "./constants";
export const errorFromMJSONWPStatusCode: typeof protocol.errorFromMJSONWPStatusCode;
export const errorFromW3CJsonCode: typeof protocol.errorFromW3CJsonCode;
export const determineProtocol: typeof protocol.determineProtocol;
export const ALL_COMMANDS: any[];
export const METHOD_MAP: import("@appium/types").MethodMap<import("@appium/types").ExternalDriver>;
export const routeToCommandName: typeof protocol.routeToCommandName;
export const NO_SESSION_ID_COMMANDS: string[];
export const isSessionCommand: typeof protocol.isSessionCommand;
import { DEFAULT_BASE_PATH } from "./constants";
export const CREATE_SESSION_COMMAND: "createSession";
export const DELETE_SESSION_COMMAND: "deleteSession";
export const GET_STATUS_COMMAND: "getStatus";
export const STATIC_DIR: string;
export const server: typeof serverIndex.server;
export const normalizeBasePath: typeof serverIndex.normalizeBasePath;
export const JWProxy: typeof proxyIndex.JWProxy;
export const statusCodes: {
    Success: {
        code: number;
        summary: string;
    };
    NoSuchDriver: {
        code: number;
        summary: string;
    };
    NoSuchElement: {
        code: number;
        summary: string;
    };
    NoSuchFrame: {
        code: number;
        summary: string;
    };
    UnknownCommand: {
        code: number;
        summary: string;
    };
    StaleElementReference: {
        code: number;
        summary: string;
    };
    ElementNotVisible: {
        code: number;
        summary: string;
    };
    InvalidElementState: {
        code: number;
        summary: string;
    };
    UnknownError: {
        code: number;
        summary: string;
    };
    ElementIsNotSelectable: {
        code: number;
        summary: string;
    };
    JavaScriptError: {
        code: number;
        summary: string;
    };
    XPathLookupError: {
        code: number;
        summary: string;
    };
    Timeout: {
        code: number;
        summary: string;
    };
    NoSuchWindow: {
        code: number;
        summary: string;
    };
    InvalidCookieDomain: {
        code: number;
        summary: string;
    };
    UnableToSetCookie: {
        code: number;
        summary: string;
    };
    UnexpectedAlertOpen: {
        code: number;
        summary: string;
    };
    NoAlertOpenError: {
        code: number;
        summary: string;
    };
    ScriptTimeout: {
        code: number;
        summary: string;
    };
    InvalidElementCoordinates: {
        code: number;
        summary: string;
    };
    IMENotAvailable: {
        code: number;
        summary: string;
    };
    IMEEngineActivationFailed: {
        code: number;
        summary: string;
    };
    InvalidSelector: {
        code: number;
        summary: string;
    };
    SessionNotCreatedException: {
        code: number;
        summary: string;
    };
    MoveTargetOutOfBounds: {
        code: number;
        summary: string;
    };
    NoSuchContext: {
        code: number;
        summary: string;
    };
};
export const getSummaryByCode: typeof statusIndex.getSummaryByCode;
export const processCapabilities: typeof caps.processCapabilities;
export const isStandardCap: typeof caps.isStandardCap;
export const validateCaps: typeof caps.validateCaps;
export const DEFAULT_WS_PATHNAME_PREFIX: "/ws";
import * as protocol from "./protocol";
import * as serverIndex from "./express/server";
import * as proxyIndex from "./jsonwp-proxy/proxy";
import * as statusIndex from "./jsonwp-status/status";
import * as caps from "./basedriver/capabilities";
export { BaseDriver, DeviceSettings, PROTOCOLS, errorFromMJSONWPStatusCode as errorFromCode, DEFAULT_BASE_PATH };
//# sourceMappingURL=index.d.ts.map