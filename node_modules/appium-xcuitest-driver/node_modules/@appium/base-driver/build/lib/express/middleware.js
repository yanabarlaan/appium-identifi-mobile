"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allowCrossDomain = allowCrossDomain;
exports.allowCrossDomainAsyncExecute = allowCrossDomainAsyncExecute;
exports.catch404Handler = catch404Handler;
exports.catchAllHandler = catchAllHandler;
exports.defaultToJSONContentType = defaultToJSONContentType;
exports.fixPythonContentType = fixPythonContentType;
Object.defineProperty(exports, "handleIdempotency", {
  enumerable: true,
  get: function () {
    return _idempotency.handleIdempotency;
  }
});

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _protocol = require("../protocol");

var _idempotency = require("./idempotency");

function allowCrossDomain(req, res, next) {
  try {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, OPTIONS, DELETE');
    res.header('Access-Control-Allow-Headers', 'Cache-Control, Pragma, Origin, X-Requested-With, Content-Type, Accept, User-Agent');

    if ('OPTIONS' === req.method) {
      return res.sendStatus(200);
    }
  } catch (err) {
    _logger.default.error(`Unexpected error: ${err.stack}`);
  }

  next();
}

function allowCrossDomainAsyncExecute(basePath) {
  return (req, res, next) => {
    const receiveAsyncResponseRegExp = new RegExp(`${_lodash.default.escapeRegExp(basePath)}/session/[a-f0-9-]+/(appium/)?receive_async_response`);

    if (!receiveAsyncResponseRegExp.test(req.url)) {
      return next();
    }

    allowCrossDomain(req, res, next);
  };
}

function fixPythonContentType(basePath) {
  return (req, res, next) => {
    if (new RegExp(`^${_lodash.default.escapeRegExp(basePath)}`).test(req.path) && /^Python/.test(req.headers['user-agent'])) {
      if (req.headers['content-type'] === 'application/x-www-form-urlencoded') {
        req.headers['content-type'] = 'application/json; charset=utf-8';
      }
    }

    next();
  };
}

function defaultToJSONContentType(req, res, next) {
  if (!req.headers['content-type']) {
    req.headers['content-type'] = 'application/json; charset=utf-8';
  }

  next();
}

function catchAllHandler(err, req, res, next) {
  if (res.headersSent) {
    return next(err);
  }

  _logger.default.error(`Uncaught error: ${err.message}`);

  _logger.default.error('Sending generic error response');

  const error = _protocol.errors.UnknownError;
  res.status(error.w3cStatus()).json(patchWithSessionId(req, {
    status: error.code(),
    value: {
      error: error.error(),
      message: `An unknown server-side error occurred while processing the command: ${err.message}`,
      stacktrace: err.stack
    }
  }));

  _logger.default.error(err);
}

function catch404Handler(req, res) {
  _logger.default.debug(`No route found for ${req.url}`);

  const error = _protocol.errors.UnknownCommandError;
  res.status(error.w3cStatus()).json(patchWithSessionId(req, {
    status: error.code(),
    value: {
      error: error.error(),
      message: 'The requested resource could not be found, or a request was ' + 'received using an HTTP method that is not supported by the mapped ' + 'resource',
      stacktrace: ''
    }
  }));
}

const SESSION_ID_PATTERN = /\/session\/([^/]+)/;

function patchWithSessionId(req, body) {
  const match = SESSION_ID_PATTERN.exec(req.url);

  if (match) {
    body.sessionId = match[1];
  }

  return body;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,