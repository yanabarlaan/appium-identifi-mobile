"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleIdempotency = handleIdempotency;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _support = require("@appium/support");

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _events = require("events");

const CACHE_SIZE = 1024;
const IDEMPOTENT_RESPONSES = new _lruCache.default({
  max: CACHE_SIZE,
  updateAgeOnGet: true,

  dispose(key, {
    response
  }) {
    if (response) {
      _support.fs.rimrafSync(response);
    }
  }

});
const MONITORED_METHODS = ['POST', 'PATCH'];
const IDEMPOTENCY_KEY_HEADER = 'x-idempotency-key';
process.on('exit', () => {
  const resPaths = [...IDEMPOTENT_RESPONSES.values()].map(({
    response
  }) => response).filter(Boolean);

  for (const resPath of resPaths) {
    try {
      _support.fs.rimrafSync(resPath);
    } catch (ign) {}
  }
});

function cacheResponse(key, req, res) {
  const responseStateListener = new _events.EventEmitter();
  IDEMPOTENT_RESPONSES.set(key, {
    method: req.method,
    path: req.path,
    response: null,
    responseStateListener
  });

  const tmpFile = _path.default.resolve(_os.default.tmpdir(), `${_support.util.uuidV4()}.response`);

  const responseListener = _support.fs.createWriteStream(tmpFile, {
    emitClose: true
  });

  const originalSocketWriter = res.socket.write.bind(res.socket);

  const patchedWriter = (chunk, encoding, next) => {
    if (responseListener.writable) {
      responseListener.write(chunk);
    }

    return originalSocketWriter(chunk, encoding, next);
  };

  res.socket.write = patchedWriter;
  let writeError = null;
  let isResponseFullySent = false;
  responseListener.once('error', e => {
    writeError = e;
  });
  res.once('finish', () => {
    isResponseFullySent = true;
    responseListener.end();
  });
  res.once('close', () => {
    if (!isResponseFullySent) {
      responseListener.end();
    }
  });
  responseListener.once('close', () => {
    var _res$socket;

    if (((_res$socket = res.socket) === null || _res$socket === void 0 ? void 0 : _res$socket.write) === patchedWriter) {
      res.socket.write = originalSocketWriter;
    }

    if (!IDEMPOTENT_RESPONSES.has(key)) {
      _logger.default.info(`Could not cache the response identified by '${key}'. ` + `Cache consistency has been damaged`);

      return responseStateListener.emit('ready', null);
    }

    if (writeError) {
      _logger.default.info(`Could not cache the response identified by '${key}': ${writeError.message}`);

      IDEMPOTENT_RESPONSES.delete(key);
      return responseStateListener.emit('ready', null);
    }

    if (!isResponseFullySent) {
      _logger.default.info(`Could not cache the response identified by '${key}', ` + `because it has not been completed`);

      _logger.default.info('Does the client terminate connections too early?');

      IDEMPOTENT_RESPONSES.delete(key);
      return responseStateListener.emit('ready', null);
    }

    IDEMPOTENT_RESPONSES.get(key).response = tmpFile;
    responseStateListener.emit('ready', tmpFile);
  });
}

async function handleIdempotency(req, res, next) {
  const key = req.headers[IDEMPOTENCY_KEY_HEADER];

  if (!key) {
    return next();
  }

  if (!MONITORED_METHODS.includes(req.method)) {
    return next();
  }

  _logger.default.debug(`Request idempotency key: ${key}`);

  if (!IDEMPOTENT_RESPONSES.has(key)) {
    cacheResponse(key, req, res);
    return next();
  }

  const {
    method: storedMethod,
    path: storedPath,
    response,
    responseStateListener
  } = IDEMPOTENT_RESPONSES.get(key);

  if (req.method !== storedMethod || req.path !== storedPath) {
    _logger.default.warn(`Got two different requests with the same idempotency key '${key}'`);

    _logger.default.warn('Is the client generating idempotency keys properly?');

    return next();
  }

  const rerouteCachedResponse = async cachedResPath => {
    if (!(await _support.fs.exists(cachedResPath))) {
      IDEMPOTENT_RESPONSES.delete(key);

      _logger.default.warn(`Could not read the cached response identified by key '${key}'`);

      _logger.default.warn('The temporary storage is not accessible anymore');

      return next();
    }

    _support.fs.createReadStream(cachedResPath).pipe(res.socket);
  };

  if (response) {
    _logger.default.info(`The same request with the idempotency key '${key}' has been already processed`);

    _logger.default.info(`Rerouting its response to the current request`);

    await rerouteCachedResponse(response);
  } else {
    _logger.default.info(`The same request with the idempotency key '${key}' is being processed`);

    _logger.default.info(`Waiting for the response to be rerouted to the current request`);

    responseStateListener.once('ready', async cachedResponsePath => {
      if (!cachedResponsePath) {
        return next();
      }

      await rerouteCachedResponse(cachedResponsePath);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,