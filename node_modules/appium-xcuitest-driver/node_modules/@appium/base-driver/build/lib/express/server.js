"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureServer = configureServer;
exports.normalizeBasePath = normalizeBasePath;
exports.server = server;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _http = _interopRequireDefault(require("http"));

var _serveFavicon = _interopRequireDefault(require("serve-favicon"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _methodOverride = _interopRequireDefault(require("method-override"));

var _logger = _interopRequireDefault(require("./logger"));

var _expressLogging = require("./express-logging");

var _middleware = require("./middleware");

var _static = require("./static");

var _crash = require("./crash");

var _websocket = require("./websocket");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _constants = require("../constants");

var _events = require("events");

const KEEP_ALIVE_TIMEOUT_MS = 10 * 60 * 1000;

async function server(opts = {}) {
  const {
    routeConfiguringFunction,
    port,
    hostname = null,
    allowCors = true,
    basePath = _constants.DEFAULT_BASE_PATH,
    extraMethodMap = {},
    serverUpdaters = [],
    keepAliveTimeout = KEEP_ALIVE_TIMEOUT_MS
  } = opts;
  const app = (0, _express.default)();

  const httpServer = _http.default.createServer(app);

  return await new _bluebird.default(async (resolve, reject) => {
    try {
      configureHttp({
        httpServer,
        reject,
        keepAliveTimeout
      });
      configureServer({
        app,
        addRoutes: routeConfiguringFunction,
        allowCors,
        basePath,
        extraMethodMap
      });

      for (const updater of serverUpdaters) {
        await updater(app, httpServer);
      }

      app.all('*', _middleware.catch404Handler);
      await startServer({
        httpServer,
        hostname,
        port,
        keepAliveTimeout
      });
      resolve(httpServer);
    } catch (err) {
      reject(err);
    }
  });
}

function configureServer({
  app,
  addRoutes,
  allowCors = true,
  basePath = _constants.DEFAULT_BASE_PATH,
  extraMethodMap = {}
}) {
  basePath = normalizeBasePath(basePath);
  app.use(_expressLogging.endLogFormatter);
  app.use((0, _serveFavicon.default)(_path.default.resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express.default.static(_static.STATIC_DIR));
  app.use(`${basePath}/produce_error`, _crash.produceError);
  app.use(`${basePath}/crash`, _crash.produceCrash);

  if (allowCors) {
    app.use(_middleware.allowCrossDomain);
  } else {
    app.use((0, _middleware.allowCrossDomainAsyncExecute)(basePath));
  }

  app.use(_middleware.handleIdempotency);
  app.use((0, _middleware.fixPythonContentType)(basePath));
  app.use(_middleware.defaultToJSONContentType);
  app.use(_bodyParser.default.urlencoded({
    extended: true
  }));
  app.use((0, _methodOverride.default)());
  app.use(_middleware.catchAllHandler);
  app.use(_bodyParser.default.json({
    limit: '1gb'
  }));
  app.use(_expressLogging.startLogFormatter);
  addRoutes(app, {
    basePath,
    extraMethodMap
  });
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);
  app.all('/test/guinea-pig-scrollable', _static.guineaPigScrollable);
  app.all('/test/guinea-pig-app-banner', _static.guineaPigAppBanner);
}

function configureHttp({
  httpServer,
  reject,
  keepAliveTimeout
}) {
  const serverState = {
    notifier: new _events.EventEmitter(),
    closed: false
  };
  httpServer.addWebSocketHandler = _websocket.addWebSocketHandler;
  httpServer.removeWebSocketHandler = _websocket.removeWebSocketHandler;
  httpServer.removeAllWebSocketHandlers = _websocket.removeAllWebSocketHandlers;
  httpServer.getWebSocketHandlers = _websocket.getWebSocketHandlers;
  const close = httpServer.close.bind(httpServer);

  httpServer.close = async () => await new _bluebird.default((resolve, reject) => {
    serverState.closed = true;
    serverState.notifier.emit('shutdown');

    _logger.default.info('Waiting until the server is closed');

    httpServer.on('close', () => {
      _logger.default.info('Received server close event');

      resolve();
    });
    close(err => {
      if (err) reject(err);
    });
  });

  httpServer.on('error', err => {
    if (err.code === 'EADDRNOTAVAIL') {
      _logger.default.error('Could not start REST http interface listener. ' + 'Requested address is not available.');
    } else {
      _logger.default.error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
    }

    reject(err);
  });
  httpServer.on('connection', socket => {
    socket.setTimeout(keepAliveTimeout);
    socket.on('error', reject);

    function destroy() {
      socket.destroy();
    }

    socket._openReqCount = 0;
    socket.once('close', () => serverState.notifier.removeListener('shutdown', destroy));
    serverState.notifier.once('shutdown', destroy);
  });
  httpServer.on('request', function (req, res) {
    const socket = req.connection || req.socket;
    socket._openReqCount++;
    res.on('finish', function () {
      socket._openReqCount--;

      if (serverState.closed && socket._openReqCount === 0) {
        socket.destroy();
      }
    });
  });
}

async function startServer({
  httpServer,
  port,
  hostname,
  keepAliveTimeout
}) {
  const serverArgs = [port];

  if (hostname) {
    serverArgs.push(hostname);
  }

  const startPromise = _bluebird.default.promisify(httpServer.listen, {
    context: httpServer
  })(...serverArgs);

  httpServer.keepAliveTimeout = keepAliveTimeout;
  httpServer.headersTimeout = keepAliveTimeout + 5 * 1000;
  await startPromise;
}

function normalizeBasePath(basePath) {
  if (!_lodash.default.isString(basePath)) {
    throw new Error(`Invalid path prefix ${basePath}`);
  }

  basePath = basePath.replace(/\/$/, '');

  if (basePath !== '' && basePath[0] !== '/') {
    basePath = `/${basePath}`;
  }

  return basePath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,