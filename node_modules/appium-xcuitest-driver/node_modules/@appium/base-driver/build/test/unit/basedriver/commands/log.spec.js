"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _log = require("../../../../lib/basedriver/commands/log");

var _sinon = require("sinon");

var _lodash = _interopRequireDefault(require("lodash"));

const expect = chai.expect;
const FIRST_LOGS = ['first', 'logs'];
const SECOND_LOGS = ['second', 'logs'];
const SUPPORTED_LOG_TYPES = {
  one: {
    description: 'First logs',
    getter: () => _lodash.default.clone(FIRST_LOGS)
  },
  two: {
    description: 'Seconds logs',
    getter: () => _lodash.default.clone(SECOND_LOGS)
  }
};
describe('log commands -', function () {
  let sandbox;
  let LogCommands;
  let logCommands;
  beforeEach(function () {
    sandbox = (0, _sinon.createSandbox)();
    LogCommands = (0, _log.LogMixin)(class {
      get log() {
        return this._log;
      }

    });
    logCommands = new LogCommands();
    logCommands.supportedLogTypes = {};
    logCommands._log = {
      debug: _lodash.default.noop
    };
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('getLogTypes', function () {
    it('should return empty array when no supported log types', async function () {
      (await logCommands.getLogTypes()).should.eql([]);
    });
    it('should return keys to log type object', async function () {
      logCommands.supportedLogTypes = SUPPORTED_LOG_TYPES;
      (await logCommands.getLogTypes()).should.eql(['one', 'two']);
    });
  });
  describe('getLog', function () {
    let one;
    let two;
    beforeEach(function () {
      one = sandbox.spy(SUPPORTED_LOG_TYPES.one, 'getter');
      two = sandbox.spy(SUPPORTED_LOG_TYPES.two, 'getter');
    });
    it('should throw error if log type not supported', async function () {
      await logCommands.getLog('one').should.eventually.be.rejected;
      one.called.should.be.false;
      two.called.should.be.false;
    });
    it('should throw an error with available log types if log type not supported', async function () {
      logCommands.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let err;

      try {
        await logCommands.getLog('three');
      } catch (_err) {
        err = _err;
      }

      expect(err).to.exist;
      err.message.should.eql(`Unsupported log type 'three'. Supported types: {"one":"First logs","two":"Seconds logs"}`);
      one.called.should.be.false;
      two.called.should.be.false;
    });
    it('should call getter on appropriate log when found', async function () {
      logCommands.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let logs = await logCommands.getLog('one');
      logs.should.eql(FIRST_LOGS);
      one.called.should.be.true;
      two.called.should.be.false;
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBlY3QiLCJjaGFpIiwiRklSU1RfTE9HUyIsIlNFQ09ORF9MT0dTIiwiU1VQUE9SVEVEX0xPR19UWVBFUyIsIm9uZSIsImRlc2NyaXB0aW9uIiwiZ2V0dGVyIiwiXyIsImNsb25lIiwidHdvIiwiZGVzY3JpYmUiLCJzYW5kYm94IiwiTG9nQ29tbWFuZHMiLCJsb2dDb21tYW5kcyIsImJlZm9yZUVhY2giLCJsb2ciLCJfbG9nIiwic3VwcG9ydGVkTG9nVHlwZXMiLCJkZWJ1ZyIsIm5vb3AiLCJhZnRlckVhY2giLCJyZXN0b3JlIiwiaXQiLCJnZXRMb2dUeXBlcyIsInNob3VsZCIsImVxbCIsInNweSIsImdldExvZyIsImV2ZW50dWFsbHkiLCJiZSIsInJlamVjdGVkIiwiY2FsbGVkIiwiZmFsc2UiLCJlcnIiLCJfZXJyIiwidG8iLCJleGlzdCIsIm1lc3NhZ2UiLCJsb2dzIiwidHJ1ZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1jaGVja1xuaW1wb3J0IHtMb2dNaXhpbn0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL2Jhc2Vkcml2ZXIvY29tbWFuZHMvbG9nJztcbmltcG9ydCB7IGNyZWF0ZVNhbmRib3ggfSBmcm9tICdzaW5vbic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcblxuY29uc3QgRklSU1RfTE9HUyA9IFsnZmlyc3QnLCAnbG9ncyddO1xuY29uc3QgU0VDT05EX0xPR1MgPSBbJ3NlY29uZCcsICdsb2dzJ107XG5jb25zdCBTVVBQT1JURURfTE9HX1RZUEVTID0ge1xuICBvbmU6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0ZpcnN0IGxvZ3MnLFxuICAgIGdldHRlcjogKCkgPT4gXy5jbG9uZShGSVJTVF9MT0dTKSxcbiAgfSxcbiAgdHdvOiB7XG4gICAgZGVzY3JpcHRpb246ICdTZWNvbmRzIGxvZ3MnLFxuICAgIGdldHRlcjogKCkgPT4gXy5jbG9uZShTRUNPTkRfTE9HUyksXG4gIH0sXG59O1xuXG5kZXNjcmliZSgnbG9nIGNvbW1hbmRzIC0nLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBzYW5kYm94O1xuICAvKiogQHR5cGUge1JldHVyblR5cGU8dHlwZW9mIExvZ01peGluPn0gKi9cbiAgbGV0IExvZ0NvbW1hbmRzO1xuXG4gIGxldCBsb2dDb21tYW5kcztcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBzYW5kYm94ID0gY3JlYXRlU2FuZGJveCgpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBMb2dDb21tYW5kcyA9IExvZ01peGluKGNsYXNzIHsgZ2V0IGxvZyAoKSB7IHJldHVybiB0aGlzLl9sb2c7IH19KTtcbiAgICBsb2dDb21tYW5kcyA9IG5ldyBMb2dDb21tYW5kcygpO1xuICAgIC8vIHJlc2V0IHRoZSBzdXBwb3J0ZWQgbG9nIHR5cGVzXG4gICAgbG9nQ29tbWFuZHMuc3VwcG9ydGVkTG9nVHlwZXMgPSB7fTtcbiAgICBsb2dDb21tYW5kcy5fbG9nID0gLyoqIEB0eXBlIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5BcHBpdW1Mb2dnZXJ9ICovKHtkZWJ1ZzogXy5ub29wfSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgc2FuZGJveC5yZXN0b3JlKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRMb2dUeXBlcycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBlbXB0eSBhcnJheSB3aGVuIG5vIHN1cHBvcnRlZCBsb2cgdHlwZXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAoYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nVHlwZXMoKSkuc2hvdWxkLmVxbChbXSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4ga2V5cyB0byBsb2cgdHlwZSBvYmplY3QnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDb21tYW5kcy5zdXBwb3J0ZWRMb2dUeXBlcyA9IFNVUFBPUlRFRF9MT0dfVFlQRVM7XG4gICAgICAoYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nVHlwZXMoKSkuc2hvdWxkLmVxbChbJ29uZScsICd0d28nXSk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ2V0TG9nJywgZnVuY3Rpb24gKCkge1xuICAgIC8qKiBAdHlwZSB7c2lub24uU2lub25TcGllZE1lbWJlcjx0eXBlb2YgU1VQUE9SVEVEX0xPR19UWVBFUy5vbmUuZ2V0dGVyPn0gKi9cbiAgICBsZXQgb25lO1xuICAgIC8qKiBAdHlwZSB7c2lub24uU2lub25TcGllZE1lbWJlcjx0eXBlb2YgU1VQUE9SVEVEX0xPR19UWVBFUy50d28uZ2V0dGVyPn0gKi9cbiAgICBsZXQgdHdvO1xuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgb25lID0gc2FuZGJveC5zcHkoU1VQUE9SVEVEX0xPR19UWVBFUy5vbmUsICdnZXR0ZXInKTtcbiAgICAgIHR3byA9IHNhbmRib3guc3B5KFNVUFBPUlRFRF9MT0dfVFlQRVMudHdvLCAnZ2V0dGVyJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBpZiBsb2cgdHlwZSBub3Qgc3VwcG9ydGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nKCdvbmUnKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZDtcbiAgICAgIG9uZS5jYWxsZWQuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgdHdvLmNhbGxlZC5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aXRoIGF2YWlsYWJsZSBsb2cgdHlwZXMgaWYgbG9nIHR5cGUgbm90IHN1cHBvcnRlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NvbW1hbmRzLnN1cHBvcnRlZExvZ1R5cGVzID0gU1VQUE9SVEVEX0xPR19UWVBFUztcbiAgICAgIGxldCBlcnI7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBsb2dDb21tYW5kcy5nZXRMb2coJ3RocmVlJyk7XG4gICAgICB9IGNhdGNoIChfZXJyKSB7XG4gICAgICAgIGVyciA9IF9lcnI7XG4gICAgICB9XG4gICAgICBleHBlY3QoZXJyKS50by5leGlzdDtcbiAgICAgIGVyci5tZXNzYWdlLnNob3VsZC5lcWwoYFVuc3VwcG9ydGVkIGxvZyB0eXBlICd0aHJlZScuIFN1cHBvcnRlZCB0eXBlczoge1wib25lXCI6XCJGaXJzdCBsb2dzXCIsXCJ0d29cIjpcIlNlY29uZHMgbG9nc1wifWApO1xuICAgICAgb25lLmNhbGxlZC5zaG91bGQuYmUuZmFsc2U7XG4gICAgICB0d28uY2FsbGVkLnNob3VsZC5iZS5mYWxzZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGNhbGwgZ2V0dGVyIG9uIGFwcHJvcHJpYXRlIGxvZyB3aGVuIGZvdW5kJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbG9nQ29tbWFuZHMuc3VwcG9ydGVkTG9nVHlwZXMgPSBTVVBQT1JURURfTE9HX1RZUEVTO1xuICAgICAgbGV0IGxvZ3MgPSBhd2FpdCBsb2dDb21tYW5kcy5nZXRMb2coJ29uZScpO1xuICAgICAgbG9ncy5zaG91bGQuZXFsKEZJUlNUX0xPR1MpO1xuICAgICAgb25lLmNhbGxlZC5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIHR3by5jYWxsZWQuc2hvdWxkLmJlLmZhbHNlO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLElBQUksQ0FBQ0QsTUFBcEI7QUFFQSxNQUFNRSxVQUFVLEdBQUcsQ0FBQyxPQUFELEVBQVUsTUFBVixDQUFuQjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxDQUFDLFFBQUQsRUFBVyxNQUFYLENBQXBC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