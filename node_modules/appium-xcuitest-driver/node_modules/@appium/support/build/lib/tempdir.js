"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.open = open;
exports.openDir = void 0;
exports.path = path;
exports.staticDir = staticDir;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("./fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _constants = _interopRequireDefault(require("constants"));

var _logger = _interopRequireDefault(require("./logger"));

const RDWR_EXCL = _constants.default.O_CREAT | _constants.default.O_TRUNC | _constants.default.O_RDWR | _constants.default.O_EXCL;

async function tempDir() {
  const now = new Date();

  const filePath = _path.default.join(process.env.APPIUM_TMP_DIR || _os.default.tmpdir(), [now.getFullYear(), now.getMonth(), now.getDate(), '-', process.pid, '-', (Math.random() * 0x100000000 + 1).toString(36)].join(''));

  await _fs.default.mkdir(filePath);
  return filePath;
}

async function path(rawAffixes, defaultPrefix) {
  const affixes = parseAffixes(rawAffixes, defaultPrefix);
  const name = `${affixes.prefix || ''}${affixes.suffix || ''}`;
  const tempDirectory = await tempDir();
  return _path.default.join(tempDirectory, name);
}

async function open(affixes) {
  const filePath = await path(affixes, 'f-');

  try {
    let fd = await _fs.default.open(filePath, RDWR_EXCL, 0o600);
    return {
      path: filePath,
      fd
    };
  } catch (err) {
    return _logger.default.errorAndThrow(err);
  }
}

function parseAffixes(rawAffixes, defaultPrefix) {
  let affixes = {};

  if (rawAffixes) {
    switch (typeof rawAffixes) {
      case 'string':
        affixes.prefix = rawAffixes;
        break;

      case 'object':
        affixes = rawAffixes;
        break;

      default:
        throw new Error(`Unknown affix declaration: ${affixes}`);
    }
  } else {
    affixes.prefix = defaultPrefix;
  }

  return affixes;
}

const _static = tempDir();

const openDir = tempDir;
exports.openDir = openDir;

async function staticDir() {
  return _static;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSRFdSX0VYQ0wiLCJjbnN0IiwiT19DUkVBVCIsIk9fVFJVTkMiLCJPX1JEV1IiLCJPX0VYQ0wiLCJ0ZW1wRGlyIiwibm93IiwiRGF0ZSIsImZpbGVQYXRoIiwibm9kZVBhdGgiLCJqb2luIiwicHJvY2VzcyIsImVudiIsIkFQUElVTV9UTVBfRElSIiwib3MiLCJ0bXBkaXIiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInBpZCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImZzIiwibWtkaXIiLCJwYXRoIiwicmF3QWZmaXhlcyIsImRlZmF1bHRQcmVmaXgiLCJhZmZpeGVzIiwicGFyc2VBZmZpeGVzIiwibmFtZSIsInByZWZpeCIsInN1ZmZpeCIsInRlbXBEaXJlY3RvcnkiLCJvcGVuIiwiZmQiLCJlcnIiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiRXJyb3IiLCJfc3RhdGljIiwib3BlbkRpciIsInN0YXRpY0RpciJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi90ZW1wZGlyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgbGlicmFyeSBpcyBvcmlnaW5hdGVkIGZyb20gdGVtcC5qcyBhdCBodHRwOi8vZ2l0aHViLmNvbS9icnVjZS9ub2RlLXRlbXAgKi9cbmltcG9ydCBmcyBmcm9tICcuL2ZzJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgbm9kZVBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgY25zdCBmcm9tICdjb25zdGFudHMnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cbmNvbnN0IFJEV1JfRVhDTCA9IGNuc3QuT19DUkVBVCB8IGNuc3QuT19UUlVOQyB8IGNuc3QuT19SRFdSIHwgY25zdC5PX0VYQ0w7XG5cbi8qKlxuICogR2VuZXJhdGUgYSB0ZW1wb3JhcnkgZGlyZWN0b3J5IGluIG9zLnRlbXBkaXIoKSBvciBwcm9jZXNzLmVudi5BUFBJVU1fVE1QX0RJUi5cbiAqIGUuZy5cbiAqIC0gTm8gYHByb2Nlc3MuZW52LkFQUElVTV9UTVBfRElSYDogYC92YXIvZm9sZGVycy8zNC8yMjIyc2g4bjI3ZDZyY3A3anFsa3c4a20wMDAwZ24vVC94eHh4eHh4eC55eXl5YFxuICogLSBXaXRoIGBwcm9jZXNzLmVudi5BUFBJVU1fVE1QX0RJUiA9ICcvcGF0aC90by9yb290J2A6IGAvcGF0aC90by9yb290L3h4eHh4eHh4Lnl5eXlgXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gQSBwYXRoIHRvIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHRlbXBEaXIgKCkge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBmaWxlUGF0aCA9IG5vZGVQYXRoLmpvaW4ocHJvY2Vzcy5lbnYuQVBQSVVNX1RNUF9ESVIgfHwgb3MudG1wZGlyKCksXG4gICAgW1xuICAgICAgbm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCBub3cuZ2V0RGF0ZSgpLFxuICAgICAgJy0nLFxuICAgICAgcHJvY2Vzcy5waWQsXG4gICAgICAnLScsXG4gICAgICAoTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwICsgMSkudG9TdHJpbmcoMzYpLFxuICAgIF0uam9pbignJykpO1xuICAvLyBjcmVhdGVzIGEgdGVtcCBkaXJlY3RvcnkgdXNpbmcgdGhlIGRhdGUgYW5kIGEgcmFuZG9tIHN0cmluZ1xuXG4gIGF3YWl0IGZzLm1rZGlyKGZpbGVQYXRoKTtcblxuICByZXR1cm4gZmlsZVBhdGg7XG59XG5cbi8qKlxuICogQHR5cGVkZWYgQWZmaXhlc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcmVmaXhdIC0gcHJlZml4IG9mIHRoZSB0ZW1wIGRpcmVjdG9yeSBuYW1lXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3N1ZmZpeF0gLSBzdWZmaXggb2YgdGhlIHRlbXAgZGlyZWN0b3J5IG5hbWVcbiAqL1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgdGVtcG9yYXJ5IGRpcmVjdG9yeSBpbiBvcy50ZW1wZGlyKCkgb3IgcHJvY2Vzcy5lbnYuQVBQSVVNX1RNUF9ESVJcbiAqIHdpdGggYXJiaXRyYXJ5IHByZWZpeC9zdWZmaXggZm9yIHRoZSBkaXJlY3RvcnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xBZmZpeGVzfSByYXdBZmZpeGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RlZmF1bHRQcmVmaXhdXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSAgQSBwYXRoIHRvIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5IHdpdGggcmF3QWZmaXhlcyBhbmQgZGVmYXVsdFByZWZpeFxuICovXG5hc3luYyBmdW5jdGlvbiBwYXRoIChyYXdBZmZpeGVzLCBkZWZhdWx0UHJlZml4KSB7XG4gIGNvbnN0IGFmZml4ZXMgPSBwYXJzZUFmZml4ZXMocmF3QWZmaXhlcywgZGVmYXVsdFByZWZpeCk7XG4gIGNvbnN0IG5hbWUgPSBgJHthZmZpeGVzLnByZWZpeCB8fCAnJ30ke2FmZml4ZXMuc3VmZml4IHx8ICcnfWA7XG4gIGNvbnN0IHRlbXBEaXJlY3RvcnkgPSBhd2FpdCB0ZW1wRGlyKCk7XG4gIHJldHVybiBub2RlUGF0aC5qb2luKHRlbXBEaXJlY3RvcnksIG5hbWUpO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIE9wZW5lZEFmZml4ZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gZmlsZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZkIC0gVGhlIGZpbGUgZGVzY3JpcHRvciBvcGVuZWRcbiAqL1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgdGVtcG9yYXJ5IGRpcmVjdG9yeSBpbiBvcy50ZW1wZGlyKCkgb3IgcHJvY2Vzcy5lbnYuQVBQSVVNX1RNUF9ESVJcbiAqIHdpdGggYXJiaXRyYXJ5IHByZWZpeC9zdWZmaXggZm9yIHRoZSBkaXJlY3RvcnkgbmFtZSBhbmQgcmV0dXJuIGl0IGFzIG9wZW4uXG4gKlxuICogQHBhcmFtIHtBZmZpeGVzfSBhZmZpeGVzXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPcGVuZWRBZmZpeGVzPn1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gb3BlbiAoYWZmaXhlcykge1xuICBjb25zdCBmaWxlUGF0aCA9IGF3YWl0IHBhdGgoYWZmaXhlcywgJ2YtJyk7XG4gIHRyeSB7XG4gICAgbGV0IGZkID0gYXdhaXQgZnMub3BlbihmaWxlUGF0aCwgUkRXUl9FWENMLCAwbzYwMCk7XG4gICAgLy8gb3BlbnMgdGhlIGZpbGUgaW4gbW9kZSAzODRcbiAgICByZXR1cm4ge3BhdGg6IGZpbGVQYXRoLCBmZH07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBsb2cuZXJyb3JBbmRUaHJvdyhlcnIpO1xuICB9XG59XG5cbi8qKlxuICpcbiAqIFJldHVybnMgcHJlZml4L3N1ZmZpeCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xBZmZpeGVzfSByYXdBZmZpeGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RlZmF1bHRQcmVmaXhdXG4gKiBAcmV0dXJucyB7QWZmaXhlc31cbiAqL1xuZnVuY3Rpb24gcGFyc2VBZmZpeGVzIChyYXdBZmZpeGVzLCBkZWZhdWx0UHJlZml4KSB7XG4gIC8qKiBAdHlwZSB7QWZmaXhlc30gKi9cbiAgbGV0IGFmZml4ZXMgPSB7fTtcbiAgaWYgKHJhd0FmZml4ZXMpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiByYXdBZmZpeGVzKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBhZmZpeGVzLnByZWZpeCA9IHJhd0FmZml4ZXM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgYWZmaXhlcyA9IHJhd0FmZml4ZXM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGFmZml4IGRlY2xhcmF0aW9uOiAke2FmZml4ZXN9YCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFmZml4ZXMucHJlZml4ID0gZGVmYXVsdFByZWZpeDtcbiAgfVxuICByZXR1cm4gYWZmaXhlcztcbn1cblxuY29uc3QgX3N0YXRpYyA9IHRlbXBEaXIoKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHBhdGggdG8gYSB0ZW1wb3JhcnkgZGlyZWN0b3J5XG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBuZXcgdGVtcERpcigpIGlmIHRlbXBSb290RGlyZWN0b3J5IGlzIG5vdCBwcm92aWRlZFxuICovXG5jb25zdCBvcGVuRGlyID0gdGVtcERpcjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCB0byBhIHRlbXBvcmFyeSBkaXJlY3Rvcnkgd2hjaWggaXMgZGVmaW5lZCBhcyBzdGF0aWMgaW4gdGhlIHNhbWUgcHJvY2Vzc1xuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEEgdGVtcCBkaXJlY3RvcnkgcGF0aCB3aGNpaCBpcyBkZWZpbmVkIGFzIHN0YXRpYyBpbiB0aGUgc2FtZSBwcm9jZXNzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHN0YXRpY0RpciAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICByZXR1cm4gX3N0YXRpYztcbn1cblxuZXhwb3J0IHsgb3BlbiwgcGF0aCwgb3BlbkRpciwgc3RhdGljRGlyIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxtQkFBS0MsT0FBTCxHQUFlRCxtQkFBS0UsT0FBcEIsR0FBOEJGLG1CQUFLRyxNQUFuQyxHQUE0Q0gsbUJBQUtJLE1BQW5FOztBQVVBLGVBQWVDLE9BQWYsR0FBMEI7RUFDeEIsTUFBTUMsR0FBRyxHQUFHLElBQUlDLElBQUosRUFBWjs7RUFDQSxNQUFNQyxRQUFRLEdBQUdDLGNBQVNDLElBQVQsQ0FBY0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGNBQVosSUFBOEJDLFlBQUdDLE1BQUgsRUFBNUMsRUFDZixDQUNFVCxHQUFHLENBQUNVLFdBQUosRUFERixFQUNxQlYsR0FBRyxDQUFDVyxRQUFKLEVBRHJCLEVBQ3FDWCxHQUFHLENBQUNZLE9BQUosRUFEckMsRUFFRSxHQUZGLEVBR0VQLE9BQU8sQ0FBQ1EsR0FIVixFQUlFLEdBSkYsRUFLRSxDQUFDQyxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsV0FBaEIsR0FBOEIsQ0FBL0IsRUFBa0NDLFFBQWxDLENBQTJDLEVBQTNDLENBTEYsRUFNRVosSUFORixDQU1PLEVBTlAsQ0FEZSxDQUFqQjs7RUFVQSxNQUFNYSxZQUFHQyxLQUFILENBQVNoQixRQUFULENBQU47RUFFQSxPQUFPQSxRQUFQO0FBQ0Q7O0FBZ0JELGVBQWVpQixJQUFmLENBQXFCQyxVQUFyQixFQUFpQ0MsYUFBakMsRUFBZ0Q7RUFDOUMsTUFBTUMsT0FBTyxHQUFHQyxZQUFZLENBQUNILFVBQUQsRUFBYUMsYUFBYixDQUE1QjtFQUNBLE1BQU1HLElBQUksR0FBSSxHQUFFRixPQUFPLENBQUNHLE1BQVIsSUFBa0IsRUFBRyxHQUFFSCxPQUFPLENBQUNJLE1BQVIsSUFBa0IsRUFBRyxFQUE1RDtFQUNBLE1BQU1DLGFBQWEsR0FBRyxNQUFNNUIsT0FBTyxFQUFuQztFQUNBLE9BQU9JLGNBQVNDLElBQVQsQ0FBY3VCLGFBQWQsRUFBNkJILElBQTdCLENBQVA7QUFDRDs7QUFlRCxlQUFlSSxJQUFmLENBQXFCTixPQUFyQixFQUE4QjtFQUM1QixNQUFNcEIsUUFBUSxHQUFHLE1BQU1pQixJQUFJLENBQUNHLE9BQUQsRUFBVSxJQUFWLENBQTNCOztFQUNBLElBQUk7SUFDRixJQUFJTyxFQUFFLEdBQUcsTUFBTVosWUFBR1csSUFBSCxDQUFRMUIsUUFBUixFQUFrQlQsU0FBbEIsRUFBNkIsS0FBN0IsQ0FBZjtJQUVBLE9BQU87TUFBQzBCLElBQUksRUFBRWpCLFFBQVA7TUFBaUIyQjtJQUFqQixDQUFQO0VBQ0QsQ0FKRCxDQUlFLE9BQU9DLEdBQVAsRUFBWTtJQUNaLE9BQU9DLGdCQUFJQyxhQUFKLENBQWtCRixHQUFsQixDQUFQO0VBQ0Q7QUFDRjs7QUFVRCxTQUFTUCxZQUFULENBQXVCSCxVQUF2QixFQUFtQ0MsYUFBbkMsRUFBa0Q7RUFFaEQsSUFBSUMsT0FBTyxHQUFHLEVBQWQ7O0VBQ0EsSUFBSUYsVUFBSixFQUFnQjtJQUNkLFFBQVEsT0FBT0EsVUFBZjtNQUNFLEtBQUssUUFBTDtRQUNFRSxPQUFPLENBQUNHLE1BQVIsR0FBaUJMLFVBQWpCO1FBQ0E7O01BQ0YsS0FBSyxRQUFMO1FBQ0VFLE9BQU8sR0FBR0YsVUFBVjtRQUNBOztNQUNGO1FBQ0UsTUFBTSxJQUFJYSxLQUFKLENBQVcsOEJBQTZCWCxPQUFRLEVBQWhELENBQU47SUFSSjtFQVVELENBWEQsTUFXTztJQUNMQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJKLGFBQWpCO0VBQ0Q7O0VBQ0QsT0FBT0MsT0FBUDtBQUNEOztBQUVELE1BQU1ZLE9BQU8sR0FBR25DLE9BQU8sRUFBdkI7O0FBT0EsTUFBTW9DLE9BQU8sR0FBR3BDLE9BQWhCOzs7QUFPQSxlQUFlcUMsU0FBZixHQUE0QjtFQUMxQixPQUFPRixPQUFQO0FBQ0QifQ==