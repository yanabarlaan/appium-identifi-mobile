"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getLogger = getLogger;
exports.loadSecureValuesPreprocessingRules = loadSecureValuesPreprocessingRules;
exports.log = void 0;
exports.patchLogger = patchLogger;

require("source-map-support/register");

var _npmlog = _interopRequireDefault(require("npmlog"));

var _lodash = _interopRequireDefault(require("lodash"));

var _util = require("./util");

var _moment = _interopRequireDefault(require("moment"));

var _logInternal = _interopRequireDefault(require("./log-internal"));

const NPM_LEVELS = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];
const MAX_LOG_RECORDS_COUNT = 3000;
const PREFIX_TIMESTAMP_FORMAT = 'HH-mm-ss:SSS';
let mockLog = {};

for (let level of NPM_LEVELS) {
  mockLog[level] = () => {};
}

function patchLogger(logger) {
  if (!logger.debug) {
    logger.addLevel('debug', 1000, {
      fg: 'blue',
      bg: 'black'
    }, 'dbug');
  }
}

function _getLogger() {
  const testingMode = process.env._TESTING === '1';
  const forceLogMode = process.env._FORCE_LOGS === '1';
  const usingGlobalLog = !!global._global_npmlog;
  let logger;

  if (testingMode && !forceLogMode) {
    logger = mockLog;
  } else {
    logger = global._global_npmlog || _npmlog.default;
    logger.maxRecordSize = MAX_LOG_RECORDS_COUNT;
  }

  patchLogger(logger);
  return [logger, usingGlobalLog];
}

function getActualPrefix(prefix, logTimestamp = false) {
  var _ref;

  const result = (_ref = _lodash.default.isFunction(prefix) ? prefix() : prefix) !== null && _ref !== void 0 ? _ref : '';
  return logTimestamp ? `[${(0, _moment.default)().format(PREFIX_TIMESTAMP_FORMAT)}] ${result}` : result;
}

function getLogger(prefix = null) {
  let [logger, usingGlobalLog] = _getLogger();

  let wrappedLogger = {
    unwrap: () => logger,
    levels: NPM_LEVELS,
    prefix
  };
  Object.defineProperty(wrappedLogger, 'level', {
    get() {
      return logger.level;
    },

    set(newValue) {
      logger.level = newValue;
    },

    enumerable: true,
    configurable: true
  });
  const logTimestamp = process.env._LOG_TIMESTAMP === '1';

  for (const level of NPM_LEVELS) {
    wrappedLogger[level] = function (...args) {
      const actualPrefix = getActualPrefix(this.prefix, logTimestamp);

      for (const arg of args) {
        const out = _lodash.default.isError(arg) && arg.stack ? arg.stack : `${arg}`;

        for (const line of out.split('\n')) {
          const unleakedLine = (0, _util.unleakString)(line);
          logger[level](actualPrefix, _logInternal.default.preprocess(unleakedLine));
        }
      }
    };
  }

  wrappedLogger.errorAndThrow = function (err) {
    this.error(err);
    throw _lodash.default.isError(err) ? err : new Error((0, _util.unleakString)(err));
  };

  if (!usingGlobalLog) {
    wrappedLogger.level = 'verbose';
  }

  return wrappedLogger;
}

async function loadSecureValuesPreprocessingRules(rulesJsonPath) {
  const issues = await _logInternal.default.loadRules(rulesJsonPath);
  return {
    issues,
    rules: _lodash.default.cloneDeep(_logInternal.default.rules)
  };
}

const log = getLogger();
exports.log = log;
var _default = log;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,