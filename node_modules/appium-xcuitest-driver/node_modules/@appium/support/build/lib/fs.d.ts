/// <reference types="node" />
export default fs;
/**
 * The callback function which will be called during the directory walking
 */
export type WalkDirCallback = (itemPath: string, isDirectory: boolean) => boolean;
export type glob = typeof glob;
export type mv = typeof mv;
export namespace fs {
    /**
     * Resolves `true` if `path` is _readable_, which differs from Node.js' default behavior of "can we see it?"
     * @param {import('fs').PathLike} path
     * @returns {Promise<boolean>}
     */
    export function hasAccess(path: import("fs").PathLike): Promise<boolean>;
    /**
     * Resolves `true` if `path` is _readable_, which differs from Node.js' default behavior of "can we see it?"
     * @param {import('fs').PathLike} path
     * @returns {Promise<boolean>}
     */
    export function hasAccess(path: import("fs").PathLike): Promise<boolean>;
    /**
     * Alias for {@linkcode fs.hasAccess}
     * @param {import('fs').PathLike} path
     */
    export function exists(path: import("fs").PathLike): Promise<boolean>;
    /**
     * Alias for {@linkcode fs.hasAccess}
     * @param {import('fs').PathLike} path
     */
    export function exists(path: import("fs").PathLike): Promise<boolean>;
    export function rimraf(dirpath: string, opts?: rimrafIdx.Options | undefined): Promise<void>;
    export const rimrafSync: typeof rimrafIdx.sync;
    /**
     * Like Node.js' `fsPromises.mkdir()`, but will _not_ reject if the directory already exists.
     *
     * @param {string|Buffer|URL} filepath
     * @param {import('fs').MakeDirectoryOptions} [opts]
     * @returns {Promise<string|undefined>}
     * @see https://nodejs.org/api/fs.html#fspromisesmkdirpath-options
     */
    export function mkdir(filepath: string | Buffer | URL, opts?: import("fs").MakeDirectoryOptions | undefined): Promise<string | undefined>;
    /**
     * Like Node.js' `fsPromises.mkdir()`, but will _not_ reject if the directory already exists.
     *
     * @param {string|Buffer|URL} filepath
     * @param {import('fs').MakeDirectoryOptions} [opts]
     * @returns {Promise<string|undefined>}
     * @see https://nodejs.org/api/fs.html#fspromisesmkdirpath-options
     */
    export function mkdir(filepath: string | Buffer | URL, opts?: import("fs").MakeDirectoryOptions | undefined): Promise<string | undefined>;
    /**
     * Copies files _and entire directories_
     * @param {string} source - Source to copy
     * @param {string} destination - Destination to copy to
     * @param {ncp.Options} [opts] - Additional arguments to pass to `ncp`
     * @see https://npm.im/ncp
     * @returns {Promise<void>}
     */
    export function copyFile(source: string, destination: string, opts?: ncp.Options | undefined): Promise<void>;
    /**
     * Copies files _and entire directories_
     * @param {string} source - Source to copy
     * @param {string} destination - Destination to copy to
     * @param {ncp.Options} [opts] - Additional arguments to pass to `ncp`
     * @see https://npm.im/ncp
     * @returns {Promise<void>}
     */
    export function copyFile(source: string, destination: string, opts?: ncp.Options | undefined): Promise<void>;
    /**
     * Create an MD5 hash of a file.
     * @param {import('fs').PathLike} filePath
     * @returns {Promise<string>}
     */
    export function md5(filePath: import("fs").PathLike): Promise<string>;
    /**
     * Create an MD5 hash of a file.
     * @param {import('fs').PathLike} filePath
     * @returns {Promise<string>}
     */
    export function md5(filePath: import("fs").PathLike): Promise<string>;
    export function mv_1(from: string, to: string, opts?: mv.Options | undefined): B<void>;
    export { mv_1 as mv };
    export { which };
    export function glob_1(pattern: string, opts?: glob.IOptions | undefined): B<string[]>;
    export { glob_1 as glob };
    export { sanitize as sanitizeName };
    /**
     * Create a hex digest of some file at `filePath`
     * @param {import('fs').PathLike} filePath
     * @param {string} [algorithm]
     * @returns {Promise<string>}
     */
    export function hash(filePath: import("fs").PathLike, algorithm?: string | undefined): Promise<string>;
    /**
     * Create a hex digest of some file at `filePath`
     * @param {import('fs').PathLike} filePath
     * @param {string} [algorithm]
     * @returns {Promise<string>}
     */
    export function hash(filePath: import("fs").PathLike, algorithm?: string | undefined): Promise<string>;
    /**
     * Returns an `Walker` instance, which is a readable stream (and thusly an async iterator).
     *
     * @param {string} dir - Dir to start walking at
     * @param {import('klaw').Options} [opts]
     * @returns {import('klaw').Walker}
     * @see https://www.npmjs.com/package/klaw
     */
    export function walk(dir: string, opts?: klaw.Options | undefined): klaw.Walker;
    /**
     * Returns an `Walker` instance, which is a readable stream (and thusly an async iterator).
     *
     * @param {string} dir - Dir to start walking at
     * @param {import('klaw').Options} [opts]
     * @returns {import('klaw').Walker}
     * @see https://www.npmjs.com/package/klaw
     */
    export function walk(dir: string, opts?: klaw.Options | undefined): klaw.Walker;
    /**
     * Recursively create a directory.
     * @param {import('fs').PathLike} dir
     * @returns {Promise<string|undefined>}
     */
    export function mkdirp(dir: import("fs").PathLike): Promise<string | undefined>;
    /**
     * Recursively create a directory.
     * @param {import('fs').PathLike} dir
     * @returns {Promise<string|undefined>}
     */
    export function mkdirp(dir: import("fs").PathLike): Promise<string | undefined>;
    /**
     * Walks a directory given according to the parameters given. The callback will be invoked with a path joined with the dir parameter
     * @param {string} dir Directory path where we will start walking
     * @param {boolean} recursive Set it to true if you want to continue walking sub directories
     * @param {WalkDirCallback} callback The callback to be called when a new path is found
     * @throws {Error} If the `dir` parameter contains a path to an invalid folder
     * @returns {Promise<string?>} returns the found path or null if the item was not found
     */
    export function walkDir(dir: string, recursive: boolean, callback: WalkDirCallback): Promise<string | null>;
    /**
     * Walks a directory given according to the parameters given. The callback will be invoked with a path joined with the dir parameter
     * @param {string} dir Directory path where we will start walking
     * @param {boolean} recursive Set it to true if you want to continue walking sub directories
     * @param {WalkDirCallback} callback The callback to be called when a new path is found
     * @throws {Error} If the `dir` parameter contains a path to an invalid folder
     * @returns {Promise<string?>} returns the found path or null if the item was not found
     */
    export function walkDir(dir: string, recursive: boolean, callback: WalkDirCallback): Promise<string | null>;
    /**
     * Reads the closest `package.json` file from absolute path `dir`.
     * @param {string} dir - Directory to search from
     * @param {import('read-pkg').Options} [opts] - Additional options for `read-pkg`
     * @throws {Error} If there were problems finding or reading a `package.json` file
     * @returns {object} A parsed `package.json`
     */
    export function readPackageJsonFrom(dir: string, opts?: readPkg.Options | undefined): any;
    /**
     * Reads the closest `package.json` file from absolute path `dir`.
     * @param {string} dir - Directory to search from
     * @param {import('read-pkg').Options} [opts] - Additional options for `read-pkg`
     * @throws {Error} If there were problems finding or reading a `package.json` file
     * @returns {object} A parsed `package.json`
     */
    export function readPackageJsonFrom(dir: string, opts?: readPkg.Options | undefined): any;
    /**
     * Finds the project root directory from `dir`.
     * @param {string} dir - Directory to search from
     * @throws {TypeError} If `dir` is not a nonempty string or relative path
     * @throws {Error} If there were problems finding the project root
     * @returns {string} The closeset parent dir containing `package.json`
     */
    export function findRoot(dir: string): string;
    /**
     * Finds the project root directory from `dir`.
     * @param {string} dir - Directory to search from
     * @throws {TypeError} If `dir` is not a nonempty string or relative path
     * @throws {Error} If there were problems finding the project root
     * @returns {string} The closeset parent dir containing `package.json`
     */
    export function findRoot(dir: string): string;
    export const access: typeof fsPromises.access;
    export const appendFile: typeof fsPromises.appendFile;
    export const chmod: typeof fsPromises.chmod;
    export const close: (arg1: number) => B<any>;
    export { constants };
    export { createWriteStream };
    export { createReadStream };
    export const lstat: typeof fsPromises.lstat;
    export const open: (path: import("fs").PathLike, flags: import("fs").OpenMode, mode?: import("fs").Mode | undefined) => Promise<number>;
    export const openFile: typeof fsPromises.open;
    export const readdir: typeof fsPromises.readdir;
    export function read<TBuffer extends NodeJS.ArrayBufferView>(arg1: number, arg2: TBuffer, arg3: number, arg4: number, arg5: import("fs").ReadPosition | null): B<number>;
    export const readFile: typeof fsPromises.readFile;
    export const readlink: typeof fsPromises.readlink;
    export const realpath: typeof fsPromises.realpath;
    export const rename: typeof fsPromises.rename;
    export const stat: typeof fsPromises.stat;
    export const symlink: typeof fsPromises.symlink;
    export const unlink: typeof fsPromises.unlink;
    export const write: (arg1: number, arg2: string) => B<number>;
    export const writeFile: typeof fsPromises.writeFile;
    export const F_OK: number;
    export const R_OK: number;
    export const W_OK: number;
    export const X_OK: number;
}
import glob from "glob";
import mv from "mv";
import rimrafIdx from "rimraf";
import ncp from "ncp";
import B from "bluebird";
import which from "which";
import sanitize from "sanitize-filename";
import klaw from "klaw";
import readPkg from "read-pkg";
import { promises as fsPromises } from "fs";
import { constants } from "fs";
import { createWriteStream } from "fs";
import { createReadStream } from "fs";
//# sourceMappingURL=fs.d.ts.map