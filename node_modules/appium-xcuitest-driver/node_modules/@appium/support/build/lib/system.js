"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arch = arch;
exports.isLinux = isLinux;
exports.isMac = isMac;
exports.isOSWin64 = isOSWin64;
exports.isWindows = isWindows;
exports.macOsxVersion = macOsxVersion;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

const VERSION_PATTERN = /^(\d+\.\d+)/m;

function isWindows() {
  return _os.default.type() === 'Windows_NT';
}

function isMac() {
  return _os.default.type() === 'Darwin';
}

function isLinux() {
  return !isWindows() && !isMac();
}

function isOSWin64() {
  return process.arch === 'x64' || _lodash.default.has(process.env, 'PROCESSOR_ARCHITEW6432');
}

async function arch() {
  if (isLinux() || isMac()) {
    let {
      stdout
    } = await (0, _teen_process.exec)('uname', ['-m']);
    return stdout.trim() === 'i686' ? '32' : '64';
  } else if (isWindows()) {
    let is64 = this.isOSWin64();
    return is64 ? '64' : '32';
  }
}

async function macOsxVersion() {
  let stdout;

  try {
    stdout = (await (0, _teen_process.exec)('sw_vers', ['-productVersion'])).stdout.trim();
  } catch (err) {
    throw new Error(`Could not detect Mac OS X Version: ${err}`);
  }

  const versionMatch = VERSION_PATTERN.exec(stdout);

  if (!versionMatch) {
    throw new Error(`Could not detect Mac OS X Version from sw_vers output: '${stdout}'`);
  }

  return versionMatch[1];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWRVJTSU9OX1BBVFRFUk4iLCJpc1dpbmRvd3MiLCJvcyIsInR5cGUiLCJpc01hYyIsImlzTGludXgiLCJpc09TV2luNjQiLCJwcm9jZXNzIiwiYXJjaCIsIl8iLCJoYXMiLCJlbnYiLCJzdGRvdXQiLCJ0cmltIiwiaXM2NCIsIm1hY09zeFZlcnNpb24iLCJlcnIiLCJFcnJvciIsInZlcnNpb25NYXRjaCIsImV4ZWMiXSwic291cmNlcyI6WyIuLi8uLi9saWIvc3lzdGVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5cbmNvbnN0IFZFUlNJT05fUEFUVEVSTiA9IC9eKFxcZCtcXC5cXGQrKS9tO1xuXG5mdW5jdGlvbiBpc1dpbmRvd3MgKCkge1xuICByZXR1cm4gb3MudHlwZSgpID09PSAnV2luZG93c19OVCc7XG59XG5cbmZ1bmN0aW9uIGlzTWFjICgpIHtcbiAgcmV0dXJuIG9zLnR5cGUoKSA9PT0gJ0Rhcndpbic7XG59XG5cbmZ1bmN0aW9uIGlzTGludXggKCkge1xuICByZXR1cm4gIWlzV2luZG93cygpICYmICFpc01hYygpO1xufVxuXG5mdW5jdGlvbiBpc09TV2luNjQgKCkge1xuICByZXR1cm4gcHJvY2Vzcy5hcmNoID09PSAneDY0JyB8fCBfLmhhcyhwcm9jZXNzLmVudiwgJ1BST0NFU1NPUl9BUkNISVRFVzY0MzInKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXJjaCAoKSB7XG4gIGlmIChpc0xpbnV4KCkgfHwgaXNNYWMoKSkge1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3VuYW1lJywgWyctbSddKTtcbiAgICByZXR1cm4gc3Rkb3V0LnRyaW0oKSA9PT0gJ2k2ODYnID8gJzMyJyA6ICc2NCc7XG4gIH0gZWxzZSBpZiAoaXNXaW5kb3dzKCkpIHtcbiAgICBsZXQgaXM2NCA9IHRoaXMuaXNPU1dpbjY0KCk7XG4gICAgcmV0dXJuIGlzNjQgPyAnNjQnIDogJzMyJztcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBtYWNPc3hWZXJzaW9uICgpIHtcbiAgbGV0IHN0ZG91dDtcbiAgdHJ5IHtcbiAgICBzdGRvdXQgPSAoYXdhaXQgZXhlYygnc3dfdmVycycsIFsnLXByb2R1Y3RWZXJzaW9uJ10pKS5zdGRvdXQudHJpbSgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBkZXRlY3QgTWFjIE9TIFggVmVyc2lvbjogJHtlcnJ9YCk7XG4gIH1cblxuICBjb25zdCB2ZXJzaW9uTWF0Y2ggPSBWRVJTSU9OX1BBVFRFUk4uZXhlYyhzdGRvdXQpO1xuICBpZiAoIXZlcnNpb25NYXRjaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGRldGVjdCBNYWMgT1MgWCBWZXJzaW9uIGZyb20gc3dfdmVycyBvdXRwdXQ6ICcke3N0ZG91dH0nYCk7XG4gIH1cbiAgcmV0dXJuIHZlcnNpb25NYXRjaFsxXTtcbn1cblxuZXhwb3J0IHsgaXNXaW5kb3dzLCBpc01hYywgaXNMaW51eCwgaXNPU1dpbjY0LCBhcmNoLCBtYWNPc3hWZXJzaW9uIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxlQUFlLEdBQUcsY0FBeEI7O0FBRUEsU0FBU0MsU0FBVCxHQUFzQjtFQUNwQixPQUFPQyxZQUFHQyxJQUFILE9BQWMsWUFBckI7QUFDRDs7QUFFRCxTQUFTQyxLQUFULEdBQWtCO0VBQ2hCLE9BQU9GLFlBQUdDLElBQUgsT0FBYyxRQUFyQjtBQUNEOztBQUVELFNBQVNFLE9BQVQsR0FBb0I7RUFDbEIsT0FBTyxDQUFDSixTQUFTLEVBQVYsSUFBZ0IsQ0FBQ0csS0FBSyxFQUE3QjtBQUNEOztBQUVELFNBQVNFLFNBQVQsR0FBc0I7RUFDcEIsT0FBT0MsT0FBTyxDQUFDQyxJQUFSLEtBQWlCLEtBQWpCLElBQTBCQyxnQkFBRUMsR0FBRixDQUFNSCxPQUFPLENBQUNJLEdBQWQsRUFBbUIsd0JBQW5CLENBQWpDO0FBQ0Q7O0FBRUQsZUFBZUgsSUFBZixHQUF1QjtFQUNyQixJQUFJSCxPQUFPLE1BQU1ELEtBQUssRUFBdEIsRUFBMEI7SUFDeEIsSUFBSTtNQUFDUTtJQUFELElBQVcsTUFBTSx3QkFBSyxPQUFMLEVBQWMsQ0FBQyxJQUFELENBQWQsQ0FBckI7SUFDQSxPQUFPQSxNQUFNLENBQUNDLElBQVAsT0FBa0IsTUFBbEIsR0FBMkIsSUFBM0IsR0FBa0MsSUFBekM7RUFDRCxDQUhELE1BR08sSUFBSVosU0FBUyxFQUFiLEVBQWlCO0lBQ3RCLElBQUlhLElBQUksR0FBRyxLQUFLUixTQUFMLEVBQVg7SUFDQSxPQUFPUSxJQUFJLEdBQUcsSUFBSCxHQUFVLElBQXJCO0VBQ0Q7QUFDRjs7QUFFRCxlQUFlQyxhQUFmLEdBQWdDO0VBQzlCLElBQUlILE1BQUo7O0VBQ0EsSUFBSTtJQUNGQSxNQUFNLEdBQUcsQ0FBQyxNQUFNLHdCQUFLLFNBQUwsRUFBZ0IsQ0FBQyxpQkFBRCxDQUFoQixDQUFQLEVBQTZDQSxNQUE3QyxDQUFvREMsSUFBcEQsRUFBVDtFQUNELENBRkQsQ0FFRSxPQUFPRyxHQUFQLEVBQVk7SUFDWixNQUFNLElBQUlDLEtBQUosQ0FBVyxzQ0FBcUNELEdBQUksRUFBcEQsQ0FBTjtFQUNEOztFQUVELE1BQU1FLFlBQVksR0FBR2xCLGVBQWUsQ0FBQ21CLElBQWhCLENBQXFCUCxNQUFyQixDQUFyQjs7RUFDQSxJQUFJLENBQUNNLFlBQUwsRUFBbUI7SUFDakIsTUFBTSxJQUFJRCxLQUFKLENBQVcsMkRBQTBETCxNQUFPLEdBQTVFLENBQU47RUFDRDs7RUFDRCxPQUFPTSxZQUFZLENBQUMsQ0FBRCxDQUFuQjtBQUNEIn0=