"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Timer = exports.Duration = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

const NS_PER_S = 1e9;
const NS_PER_MS = 1e6;

class Duration {
  constructor(nanos) {
    this._nanos = nanos;
  }

  get nanos() {
    return this._nanos;
  }

  get asNanoSeconds() {
    return this.nanos;
  }

  get asMilliSeconds() {
    return this.nanos / NS_PER_MS;
  }

  get asSeconds() {
    return this.nanos / NS_PER_S;
  }

  toString() {
    return this.asMilliSeconds.toFixed(0);
  }

}

exports.Duration = Duration;

class Timer {
  constructor() {
    this._startTime = null;
  }

  get startTime() {
    return this._startTime;
  }

  start() {
    if (!_lodash.default.isNull(this.startTime)) {
      throw new Error('Timer has already been started.');
    }

    this._startTime = _lodash.default.isFunction(process.hrtime.bigint) ? process.hrtime.bigint() : process.hrtime();
    return this;
  }

  getDuration() {
    if (_lodash.default.isNull(this.startTime)) {
      throw new Error(`Unable to get duration. Timer was not started`);
    }

    let nanoDuration;

    if (_lodash.default.isArray(this.startTime)) {
      const [seconds, nanos] = process.hrtime(this.startTime);
      nanoDuration = seconds * NS_PER_S + nanos;
    } else if (typeof this.startTime === 'bigint' && _lodash.default.isFunction(process.hrtime.bigint)) {
      const endTime = process.hrtime.bigint();
      nanoDuration = Number(endTime - this.startTime);
    } else {
      throw new Error(`Unable to get duration. Start time '${this.startTime}' cannot be parsed`);
    }

    return new Duration(nanoDuration);
  }

  toString() {
    try {
      return this.getDuration().toString();
    } catch (err) {
      return `<err: ${err.message}>`;
    }
  }

}

exports.Timer = Timer;
var _default = Timer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOU19QRVJfUyIsIk5TX1BFUl9NUyIsIkR1cmF0aW9uIiwiY29uc3RydWN0b3IiLCJuYW5vcyIsIl9uYW5vcyIsImFzTmFub1NlY29uZHMiLCJhc01pbGxpU2Vjb25kcyIsImFzU2Vjb25kcyIsInRvU3RyaW5nIiwidG9GaXhlZCIsIlRpbWVyIiwiX3N0YXJ0VGltZSIsInN0YXJ0VGltZSIsInN0YXJ0IiwiXyIsImlzTnVsbCIsIkVycm9yIiwiaXNGdW5jdGlvbiIsInByb2Nlc3MiLCJocnRpbWUiLCJiaWdpbnQiLCJnZXREdXJhdGlvbiIsIm5hbm9EdXJhdGlvbiIsImlzQXJyYXkiLCJzZWNvbmRzIiwiZW5kVGltZSIsIk51bWJlciIsImVyciIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi8uLi9saWIvdGltaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuY29uc3QgTlNfUEVSX1MgPSAxZTk7XG5jb25zdCBOU19QRVJfTVMgPSAxZTY7XG5cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBkdXJhdGlvbiwgZW5jYXBzdWxhdGluZyB0aGUgbnVtYmVyIGFuZCB1bml0cy5cbiAqL1xuY2xhc3MgRHVyYXRpb24ge1xuICBjb25zdHJ1Y3RvciAobmFub3MpIHtcbiAgICB0aGlzLl9uYW5vcyA9IG5hbm9zO1xuICB9XG5cbiAgZ2V0IG5hbm9zICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFub3M7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBkdXJhdGlvbiBhcyBuYW5vc2Vjb25kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZHVyYXRpb24gYXMgbmFub3NlY29uZHNcbiAgICovXG4gIGdldCBhc05hbm9TZWNvbmRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW5vcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGR1cmF0aW9uIGNvbnZlcnRlZCBpbnRvIG1pbGxpc2Vjb25kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZHVyYXRpb24gYXMgbWlsbGlzZWNvbmRzXG4gICAqL1xuICBnZXQgYXNNaWxsaVNlY29uZHMgKCkge1xuICAgIHJldHVybiB0aGlzLm5hbm9zIC8gTlNfUEVSX01TO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZHVyYXRpb24gY29udmVydGVkIGludG8gc2Vjb25kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZHVyYXRpb24gZmFzIHNlY29uZHNcbiAgICovXG4gIGdldCBhc1NlY29uZHMgKCkge1xuICAgIHJldHVybiB0aGlzLm5hbm9zIC8gTlNfUEVSX1M7XG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgLy8gZGVmYXVsdCB0byBtaWxsaXNlY29uZHMsIHJvdW5kZWRcbiAgICByZXR1cm4gdGhpcy5hc01pbGxpU2Vjb25kcy50b0ZpeGVkKDApO1xuICB9XG59XG5cbmNsYXNzIFRpbWVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB0aW1lclxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7XG4gIH1cblxuICBnZXQgc3RhcnRUaW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSB0aW1lclxuICAgKlxuICAgKiBAcmV0dXJuIHtUaW1lcn0gVGhlIGN1cnJlbnQgaW5zdGFuY2UsIGZvciBjaGFpbmluZ1xuICAgKi9cbiAgc3RhcnQgKCkge1xuICAgIGlmICghXy5pc051bGwodGhpcy5zdGFydFRpbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RpbWVyIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZC4nKTtcbiAgICB9XG4gICAgLy8gb25jZSBOb2RlIDEwIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQsIHRoaXMgY2hlY2sgY2FuIGJlIHJlbW92ZWRcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBfLmlzRnVuY3Rpb24ocHJvY2Vzcy5ocnRpbWUuYmlnaW50KVxuICAgICAgPyBwcm9jZXNzLmhydGltZS5iaWdpbnQoKVxuICAgICAgOiBwcm9jZXNzLmhydGltZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZHVyYXRpb24gc2luY2UgdGhlIHRpbWVyIHdhcyBzdGFydGVkXG4gICAqXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufSB0aGUgZHVyYXRpb25cbiAgICovXG4gIGdldER1cmF0aW9uICgpIHtcbiAgICBpZiAoXy5pc051bGwodGhpcy5zdGFydFRpbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBnZXQgZHVyYXRpb24uIFRpbWVyIHdhcyBub3Qgc3RhcnRlZGApO1xuICAgIH1cblxuICAgIGxldCBuYW5vRHVyYXRpb247XG4gICAgaWYgKF8uaXNBcnJheSh0aGlzLnN0YXJ0VGltZSkpIHtcbiAgICAgIC8vIHN0YXJ0VGltZSB3YXMgY3JlYXRlZCB1c2luZyBwcm9jZXNzLmhydGltZSgpXG4gICAgICBjb25zdCBbc2Vjb25kcywgbmFub3NdID0gcHJvY2Vzcy5ocnRpbWUodGhpcy5zdGFydFRpbWUpO1xuICAgICAgbmFub0R1cmF0aW9uID0gc2Vjb25kcyAqIE5TX1BFUl9TICsgbmFub3M7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5zdGFydFRpbWUgPT09ICdiaWdpbnQnICYmIF8uaXNGdW5jdGlvbihwcm9jZXNzLmhydGltZS5iaWdpbnQpKSB7XG4gICAgICAvLyBzdGFydFRpbWUgd2FzIGNyZWF0ZWQgdXNpbmcgcHJvY2Vzcy5ocnRpbWUuYmlnaW50KClcbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBwcm9jZXNzLmhydGltZS5iaWdpbnQoKTtcbiAgICAgIC8vIGdldCB0aGUgZGlmZmVyZW5jZSwgYW5kIGNvbnZlcnQgdG8gbnVtYmVyXG4gICAgICBuYW5vRHVyYXRpb24gPSBOdW1iZXIoZW5kVGltZSAtIHRoaXMuc3RhcnRUaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZ2V0IGR1cmF0aW9uLiBTdGFydCB0aW1lICcke3RoaXMuc3RhcnRUaW1lfScgY2Fubm90IGJlIHBhcnNlZGApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRHVyYXRpb24obmFub0R1cmF0aW9uKTtcbiAgfVxuXG4gIHRvU3RyaW5nICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RHVyYXRpb24oKS50b1N0cmluZygpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGA8ZXJyOiAke2Vyci5tZXNzYWdlfT5gO1xuICAgIH1cbiAgfVxufVxuXG5cbmV4cG9ydCB7IFRpbWVyLCBEdXJhdGlvbiB9O1xuZXhwb3J0IGRlZmF1bHQgVGltZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBR0EsTUFBTUEsUUFBUSxHQUFHLEdBQWpCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLEdBQWxCOztBQU1BLE1BQU1DLFFBQU4sQ0FBZTtFQUNiQyxXQUFXLENBQUVDLEtBQUYsRUFBUztJQUNsQixLQUFLQyxNQUFMLEdBQWNELEtBQWQ7RUFDRDs7RUFFUSxJQUFMQSxLQUFLLEdBQUk7SUFDWCxPQUFPLEtBQUtDLE1BQVo7RUFDRDs7RUFPZ0IsSUFBYkMsYUFBYSxHQUFJO0lBQ25CLE9BQU8sS0FBS0YsS0FBWjtFQUNEOztFQU9pQixJQUFkRyxjQUFjLEdBQUk7SUFDcEIsT0FBTyxLQUFLSCxLQUFMLEdBQWFILFNBQXBCO0VBQ0Q7O0VBT1ksSUFBVE8sU0FBUyxHQUFJO0lBQ2YsT0FBTyxLQUFLSixLQUFMLEdBQWFKLFFBQXBCO0VBQ0Q7O0VBRURTLFFBQVEsR0FBSTtJQUVWLE9BQU8sS0FBS0YsY0FBTCxDQUFvQkcsT0FBcEIsQ0FBNEIsQ0FBNUIsQ0FBUDtFQUNEOztBQXZDWTs7OztBQTBDZixNQUFNQyxLQUFOLENBQVk7RUFJVlIsV0FBVyxHQUFJO0lBQ2IsS0FBS1MsVUFBTCxHQUFrQixJQUFsQjtFQUNEOztFQUVZLElBQVRDLFNBQVMsR0FBSTtJQUNmLE9BQU8sS0FBS0QsVUFBWjtFQUNEOztFQU9ERSxLQUFLLEdBQUk7SUFDUCxJQUFJLENBQUNDLGdCQUFFQyxNQUFGLENBQVMsS0FBS0gsU0FBZCxDQUFMLEVBQStCO01BQzdCLE1BQU0sSUFBSUksS0FBSixDQUFVLGlDQUFWLENBQU47SUFDRDs7SUFFRCxLQUFLTCxVQUFMLEdBQWtCRyxnQkFBRUcsVUFBRixDQUFhQyxPQUFPLENBQUNDLE1BQVIsQ0FBZUMsTUFBNUIsSUFDZEYsT0FBTyxDQUFDQyxNQUFSLENBQWVDLE1BQWYsRUFEYyxHQUVkRixPQUFPLENBQUNDLE1BQVIsRUFGSjtJQUdBLE9BQU8sSUFBUDtFQUNEOztFQU9ERSxXQUFXLEdBQUk7SUFDYixJQUFJUCxnQkFBRUMsTUFBRixDQUFTLEtBQUtILFNBQWQsQ0FBSixFQUE4QjtNQUM1QixNQUFNLElBQUlJLEtBQUosQ0FBVywrQ0FBWCxDQUFOO0lBQ0Q7O0lBRUQsSUFBSU0sWUFBSjs7SUFDQSxJQUFJUixnQkFBRVMsT0FBRixDQUFVLEtBQUtYLFNBQWYsQ0FBSixFQUErQjtNQUU3QixNQUFNLENBQUNZLE9BQUQsRUFBVXJCLEtBQVYsSUFBbUJlLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLEtBQUtQLFNBQXBCLENBQXpCO01BQ0FVLFlBQVksR0FBR0UsT0FBTyxHQUFHekIsUUFBVixHQUFxQkksS0FBcEM7SUFDRCxDQUpELE1BSU8sSUFBSSxPQUFPLEtBQUtTLFNBQVosS0FBMEIsUUFBMUIsSUFBc0NFLGdCQUFFRyxVQUFGLENBQWFDLE9BQU8sQ0FBQ0MsTUFBUixDQUFlQyxNQUE1QixDQUExQyxFQUErRTtNQUVwRixNQUFNSyxPQUFPLEdBQUdQLE9BQU8sQ0FBQ0MsTUFBUixDQUFlQyxNQUFmLEVBQWhCO01BRUFFLFlBQVksR0FBR0ksTUFBTSxDQUFDRCxPQUFPLEdBQUcsS0FBS2IsU0FBaEIsQ0FBckI7SUFDRCxDQUxNLE1BS0E7TUFDTCxNQUFNLElBQUlJLEtBQUosQ0FBVyx1Q0FBc0MsS0FBS0osU0FBVSxvQkFBaEUsQ0FBTjtJQUNEOztJQUVELE9BQU8sSUFBSVgsUUFBSixDQUFhcUIsWUFBYixDQUFQO0VBQ0Q7O0VBRURkLFFBQVEsR0FBSTtJQUNWLElBQUk7TUFDRixPQUFPLEtBQUthLFdBQUwsR0FBbUJiLFFBQW5CLEVBQVA7SUFDRCxDQUZELENBRUUsT0FBT21CLEdBQVAsRUFBWTtNQUNaLE9BQVEsU0FBUUEsR0FBRyxDQUFDQyxPQUFRLEdBQTVCO0lBQ0Q7RUFDRjs7QUE3RFM7OztlQWtFR2xCLEsifQ==