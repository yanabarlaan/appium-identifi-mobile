'use strict';

require("source-map-support/register");

const gulp = require('gulp');

const {
  Transpiler,
  spawnWatcher,
  isVerbose
} = require('../..');

const _ = require('lodash');

const B = require('bluebird');

const {
  exec
} = require('../../lib/utils');

const assert = require('assert');

const debug = require('gulp-debug');

const gulpIf = require('gulp-if');

const globby = require('globby');

const rimraf = B.promisify(require('rimraf'));
spawnWatcher.use(gulp);
gulp.task('generate-lots-of-files', async function () {
  await rimraf('test/generated/es7 build/generated');
  await exec('mkdir', ['-p', 'test/generated/es7']);
  await B.all([..._.times(24).map(function (i) {
    return exec('cp', ['test/fixtures/es7/lib/a.es7.js', `test/generated/es7/a${i + 1}.es7.js`]);
  })]);
});
gulp.task('transpile-lots-of-es7-files', function () {
  const transpiler = new Transpiler();
  return gulp.src('test/generated/es7/**/*.js').pipe(gulpIf(isVerbose(), debug())).pipe(transpiler.stream()).on('error', spawnWatcher.handleError).pipe(gulp.dest('build/generated'));
});
gulp.task('transpile-lots-of-files', gulp.series('generate-lots-of-files', 'transpile-lots-of-es7-files'));
gulp.task('test-transpile-lots-of-es7-files', async function testTranspileLotsOfFiles() {
  let files = await globby('test/generated/es7/**/*.js');
  const numOfFiles = files.length;
  assert(numOfFiles > 16);
  files = await globby('build/generated/a*.js');
  assert(files.length === numOfFiles);
  files = await globby('build/generated/*.es7.js');
  assert(files.length === 0);
});
gulp.task('test-transpile-lots-of-files', gulp.series('transpile-lots-of-files', 'test-transpile-lots-of-es7-files'));require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9ndWxwZmlsZS1qcy9nZW5lcmF0ZS5qcyIsIm5hbWVzIjpbImd1bHAiLCJyZXF1aXJlIiwiVHJhbnNwaWxlciIsInNwYXduV2F0Y2hlciIsImlzVmVyYm9zZSIsIl8iLCJCIiwiZXhlYyIsImFzc2VydCIsImRlYnVnIiwiZ3VscElmIiwiZ2xvYmJ5IiwicmltcmFmIiwicHJvbWlzaWZ5IiwidXNlIiwidGFzayIsImFsbCIsInRpbWVzIiwibWFwIiwiaSIsInRyYW5zcGlsZXIiLCJzcmMiLCJwaXBlIiwic3RyZWFtIiwib24iLCJoYW5kbGVFcnJvciIsImRlc3QiLCJzZXJpZXMiLCJ0ZXN0VHJhbnNwaWxlTG90c09mRmlsZXMiLCJmaWxlcyIsIm51bU9mRmlsZXMiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJ0ZXN0L2d1bHBmaWxlLWpzL2dlbmVyYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ3VscCA9IHJlcXVpcmUoJ2d1bHAnKTtcbmNvbnN0IHsgVHJhbnNwaWxlciwgc3Bhd25XYXRjaGVyLCBpc1ZlcmJvc2UgfSA9IHJlcXVpcmUoJy4uLy4uJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBCID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IHsgZXhlYyB9ID0gcmVxdWlyZSgnLi4vLi4vbGliL3V0aWxzJyk7XG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZ3VscC1kZWJ1ZycpO1xuY29uc3QgZ3VscElmID0gcmVxdWlyZSgnZ3VscC1pZicpO1xuY29uc3QgZ2xvYmJ5ID0gcmVxdWlyZSgnZ2xvYmJ5Jyk7XG5jb25zdCByaW1yYWYgPSBCLnByb21pc2lmeShyZXF1aXJlKCdyaW1yYWYnKSk7XG5cblxuc3Bhd25XYXRjaGVyLnVzZShndWxwKTtcblxuZ3VscC50YXNrKCdnZW5lcmF0ZS1sb3RzLW9mLWZpbGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICBhd2FpdCByaW1yYWYoJ3Rlc3QvZ2VuZXJhdGVkL2VzNyBidWlsZC9nZW5lcmF0ZWQnKTtcbiAgYXdhaXQgZXhlYygnbWtkaXInLCBbJy1wJywgJ3Rlc3QvZ2VuZXJhdGVkL2VzNyddKTtcbiAgYXdhaXQgQi5hbGwoW1xuICAgIC4uLihcbiAgICAgIF8udGltZXMoMjQpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gZXhlYygnY3AnLCBbJ3Rlc3QvZml4dHVyZXMvZXM3L2xpYi9hLmVzNy5qcycsIGB0ZXN0L2dlbmVyYXRlZC9lczcvYSR7aSArIDF9LmVzNy5qc2BdKTtcbiAgICAgIH0pXG4gICAgKVxuICBdKTtcbn0pO1xuXG5ndWxwLnRhc2soJ3RyYW5zcGlsZS1sb3RzLW9mLWVzNy1maWxlcycsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdHJhbnNwaWxlciA9IG5ldyBUcmFuc3BpbGVyKCk7XG4gIHJldHVybiBndWxwLnNyYygndGVzdC9nZW5lcmF0ZWQvZXM3LyoqLyouanMnKVxuICAgIC5waXBlKGd1bHBJZihpc1ZlcmJvc2UoKSwgZGVidWcoKSkpXG4gICAgLnBpcGUodHJhbnNwaWxlci5zdHJlYW0oKSlcbiAgICAub24oJ2Vycm9yJywgc3Bhd25XYXRjaGVyLmhhbmRsZUVycm9yKVxuICAgIC5waXBlKGd1bHAuZGVzdCgnYnVpbGQvZ2VuZXJhdGVkJykpO1xufSk7XG5cbmd1bHAudGFzaygndHJhbnNwaWxlLWxvdHMtb2YtZmlsZXMnLFxuICBndWxwLnNlcmllcygnZ2VuZXJhdGUtbG90cy1vZi1maWxlcycsICd0cmFuc3BpbGUtbG90cy1vZi1lczctZmlsZXMnKVxuKTtcblxuZ3VscC50YXNrKCd0ZXN0LXRyYW5zcGlsZS1sb3RzLW9mLWVzNy1maWxlcycsIGFzeW5jIGZ1bmN0aW9uIHRlc3RUcmFuc3BpbGVMb3RzT2ZGaWxlcyAoKSB7XG4gIGxldCBmaWxlcyA9IGF3YWl0IGdsb2JieSgndGVzdC9nZW5lcmF0ZWQvZXM3LyoqLyouanMnKTtcbiAgY29uc3QgbnVtT2ZGaWxlcyA9IGZpbGVzLmxlbmd0aDtcbiAgYXNzZXJ0KG51bU9mRmlsZXMgPiAxNik7XG5cbiAgZmlsZXMgPSBhd2FpdCBnbG9iYnkoJ2J1aWxkL2dlbmVyYXRlZC9hKi5qcycpO1xuICBhc3NlcnQoZmlsZXMubGVuZ3RoID09PSBudW1PZkZpbGVzKTtcblxuICBmaWxlcyA9IGF3YWl0IGdsb2JieSgnYnVpbGQvZ2VuZXJhdGVkLyouZXM3LmpzJyk7XG4gIGFzc2VydChmaWxlcy5sZW5ndGggPT09IDApO1xufSk7XG5cbmd1bHAudGFzaygndGVzdC10cmFuc3BpbGUtbG90cy1vZi1maWxlcycsXG4gIGd1bHAuc2VyaWVzKCd0cmFuc3BpbGUtbG90cy1vZi1maWxlcycsICd0ZXN0LXRyYW5zcGlsZS1sb3RzLW9mLWVzNy1maWxlcycpXG4pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtFQUFFQyxVQUFGO0VBQWNDLFlBQWQ7RUFBNEJDO0FBQTVCLElBQTBDSCxPQUFPLENBQUMsT0FBRCxDQUF2RDs7QUFDQSxNQUFNSSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU1LLENBQUMsR0FBR0wsT0FBTyxDQUFDLFVBQUQsQ0FBakI7O0FBQ0EsTUFBTTtFQUFFTTtBQUFGLElBQVdOLE9BQU8sQ0FBQyxpQkFBRCxDQUF4Qjs7QUFDQSxNQUFNTyxNQUFNLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1RLEtBQUssR0FBR1IsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTVMsTUFBTSxHQUFHVCxPQUFPLENBQUMsU0FBRCxDQUF0Qjs7QUFDQSxNQUFNVSxNQUFNLEdBQUdWLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1XLE1BQU0sR0FBR04sQ0FBQyxDQUFDTyxTQUFGLENBQVlaLE9BQU8sQ0FBQyxRQUFELENBQW5CLENBQWY7QUFHQUUsWUFBWSxDQUFDVyxHQUFiLENBQWlCZCxJQUFqQjtBQUVBQSxJQUFJLENBQUNlLElBQUwsQ0FBVSx3QkFBVixFQUFvQyxrQkFBa0I7RUFDcEQsTUFBTUgsTUFBTSxDQUFDLG9DQUFELENBQVo7RUFDQSxNQUFNTCxJQUFJLENBQUMsT0FBRCxFQUFVLENBQUMsSUFBRCxFQUFPLG9CQUFQLENBQVYsQ0FBVjtFQUNBLE1BQU1ELENBQUMsQ0FBQ1UsR0FBRixDQUFNLENBQ1YsR0FDRVgsQ0FBQyxDQUFDWSxLQUFGLENBQVEsRUFBUixFQUFZQyxHQUFaLENBQWdCLFVBQVVDLENBQVYsRUFBYTtJQUMzQixPQUFPWixJQUFJLENBQUMsSUFBRCxFQUFPLENBQUMsZ0NBQUQsRUFBb0MsdUJBQXNCWSxDQUFDLEdBQUcsQ0FBRSxTQUFoRSxDQUFQLENBQVg7RUFDRCxDQUZELENBRlEsQ0FBTixDQUFOO0FBT0QsQ0FWRDtBQVlBbkIsSUFBSSxDQUFDZSxJQUFMLENBQVUsNkJBQVYsRUFBeUMsWUFBWTtFQUNuRCxNQUFNSyxVQUFVLEdBQUcsSUFBSWxCLFVBQUosRUFBbkI7RUFDQSxPQUFPRixJQUFJLENBQUNxQixHQUFMLENBQVMsNEJBQVQsRUFDSkMsSUFESSxDQUNDWixNQUFNLENBQUNOLFNBQVMsRUFBVixFQUFjSyxLQUFLLEVBQW5CLENBRFAsRUFFSmEsSUFGSSxDQUVDRixVQUFVLENBQUNHLE1BQVgsRUFGRCxFQUdKQyxFQUhJLENBR0QsT0FIQyxFQUdRckIsWUFBWSxDQUFDc0IsV0FIckIsRUFJSkgsSUFKSSxDQUlDdEIsSUFBSSxDQUFDMEIsSUFBTCxDQUFVLGlCQUFWLENBSkQsQ0FBUDtBQUtELENBUEQ7QUFTQTFCLElBQUksQ0FBQ2UsSUFBTCxDQUFVLHlCQUFWLEVBQ0VmLElBQUksQ0FBQzJCLE1BQUwsQ0FBWSx3QkFBWixFQUFzQyw2QkFBdEMsQ0FERjtBQUlBM0IsSUFBSSxDQUFDZSxJQUFMLENBQVUsa0NBQVYsRUFBOEMsZUFBZWEsd0JBQWYsR0FBMkM7RUFDdkYsSUFBSUMsS0FBSyxHQUFHLE1BQU1sQixNQUFNLENBQUMsNEJBQUQsQ0FBeEI7RUFDQSxNQUFNbUIsVUFBVSxHQUFHRCxLQUFLLENBQUNFLE1BQXpCO0VBQ0F2QixNQUFNLENBQUNzQixVQUFVLEdBQUcsRUFBZCxDQUFOO0VBRUFELEtBQUssR0FBRyxNQUFNbEIsTUFBTSxDQUFDLHVCQUFELENBQXBCO0VBQ0FILE1BQU0sQ0FBQ3FCLEtBQUssQ0FBQ0UsTUFBTixLQUFpQkQsVUFBbEIsQ0FBTjtFQUVBRCxLQUFLLEdBQUcsTUFBTWxCLE1BQU0sQ0FBQywwQkFBRCxDQUFwQjtFQUNBSCxNQUFNLENBQUNxQixLQUFLLENBQUNFLE1BQU4sS0FBaUIsQ0FBbEIsQ0FBTjtBQUNELENBVkQ7QUFZQS9CLElBQUksQ0FBQ2UsSUFBTCxDQUFVLDhCQUFWLEVBQ0VmLElBQUksQ0FBQzJCLE1BQUwsQ0FBWSx5QkFBWixFQUF1QyxrQ0FBdkMsQ0FERiJ9
