'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _child_process = _interopRequireDefault(require("child_process"));

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

const GULP = require.resolve('gulp/bin/gulp');

const MOCHA = require.resolve('mocha/bin/mocha');

const readFile = _bluebird.default.promisify(_fs.default.readFile);

async function exec(...args) {
  return await new _bluebird.default(function (resolve) {
    _child_process.default.exec(args.join(' '), function (err, stdout, stderr) {
      resolve([stdout, stderr]);
    });
  });
}

function print(stdout, stderr) {
  if (process.env.VERBOSE) {
    if ((stdout || '').length) {
      (0, _fancyLog.default)(`stdout --> '${stdout}'`);
    }

    if ((stderr || '').length) {
      (0, _fancyLog.default)(`stderr --> '${stderr}'`);
    }
  }
}

describe('transpile-specs', function () {
  this.timeout(60000);
  this.retries(0);
  const tests = {
    es7: {
      classFile: 'a',
      throwFile: 'a-throw.es7.js:7',
      throwTestFile: 'a-throw-specs.es7.js:8'
    }
  };

  for (const [name, files] of _lodash.default.toPairs(tests)) {
    it(`should transpile ${name} fixtures`, async function () {
      const [stdout, stderr] = await exec(`${GULP} transpile-${name}-fixtures`);
      print(stdout, stderr);
      stderr.should.eql('');
      stdout.should.include('Finished');
      const content = await readFile(`build-fixtures/lib/${files.classFile}.js`, 'utf8');
      content.should.have.length.above(0);
      content.should.include('sourceMapping');
    });
    describe('check transpiled', function () {
      before(async function () {
        await exec(`${GULP} transpile-fixtures`);
      });
      it(`should be able to run transpiled ${name} code`, async function () {
        const [stdout, stderr] = await exec(`node build-fixtures/lib/${files.classFile}-run.js`);
        print(stdout, stderr);
        stderr.should.equal('');
        stdout.should.include('hello world!');
      });
      it(`should be able to run transpiled ${name} tests`, async function () {
        const [stdout, stderr] = await exec(`${MOCHA} build-fixtures/test/${files.classFile}-specs.js`);
        print(stdout, stderr);
        stderr.should.equal('');
        stdout.should.include('1 passing');
      });
      it(`should use sourcemap when throwing (${name})`, async function () {
        const [stdout, stderr] = await exec(`node build-fixtures/lib/${files.classFile}-throw.js`);
        print(stdout, stderr);
        let output = stdout + stderr;
        output.should.include('This is really bad!');
        output.should.include(files.throwFile);
      });
      it(`should use sourcemap when throwing within mocha (${name})`, async function () {
        const [stdout, stderr] = await exec(`${MOCHA} build-fixtures/test/${files.classFile}-throw-specs.js`);
        print(stdout, stderr);
        let output = stdout + stderr;
        output.should.include('This is really bad!');
        output.should.include(files.throwTestFile);
      });
      it(`should be able to use gulp-mocha (${name})`, async function () {
        const [stdout, stderr] = await exec(`${GULP} test-${name}-mocha`);
        print(stdout, stderr);
        stderr.should.eql('');
        stdout.should.include('Finished');
      });
      it(`should use sourcemap when throwing within gulp-mocha (${name})`, async function () {
        const [stdout, stderr] = await exec(`${GULP} --no-notif test-${name}-mocha-throw`);
        print(stdout, stderr);
        let output = stdout + stderr;
        output.should.include('This is really bad!');
        output.should.include(files.throwTestFile);
      });
    });
  }

  it('should not detect a rtts-assert error', async function () {
    const [stdout, stderr] = await exec('node build-fixtures/lib/a-rtts-assert-error.js');
    print(stdout, stderr);
    stderr.should.equal('');
    stdout.should.include('123');
    stdout.should.not.include('Invalid arguments given!');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
