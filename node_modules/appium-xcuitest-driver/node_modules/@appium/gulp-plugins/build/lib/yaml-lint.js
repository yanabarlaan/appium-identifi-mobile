"use strict";

require("source-map-support/register");

const {
  Transform
} = require('stream');

const log = require('fancy-log');

const yaml = require('js-yaml');

const {
  EOL
} = require('os');

const PluginError = require('plugin-error');

const red = require('ansi-red');

function gulpYamlLint() {
  let errCount = 0;
  return new Transform({
    objectMode: true,

    transform(file, enc, cb) {
      try {
        yaml.load(file.contents.toString(enc));
      } catch (err) {
        errCount++;
        log.error(`Invalid YAML file: '${file.path}'`);

        for (const line of err.message.split(EOL)) {
          log.error(line);
        }
      }

      cb();
    },

    flush(done) {
      if (errCount > 0) {
        log.error(`YAML errors found. Due to the limitations of YAML linting, the error `);
        log.error(`is most likely in the line immediately ${red('before')} the line reported.`);
        return done(new PluginError('gulp-yaml-lint', {
          name: 'YAMLError',
          message: `Failed with ${errCount} ${errCount === 1 ? 'error' : 'errors'}`
        }));
      }

      done();
    }

  });
}

module.exports = gulpYamlLint;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3lhbWwtbGludC5qcyIsIm5hbWVzIjpbIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJsb2ciLCJ5YW1sIiwiRU9MIiwiUGx1Z2luRXJyb3IiLCJyZWQiLCJndWxwWWFtbExpbnQiLCJlcnJDb3VudCIsIm9iamVjdE1vZGUiLCJ0cmFuc2Zvcm0iLCJmaWxlIiwiZW5jIiwiY2IiLCJsb2FkIiwiY29udGVudHMiLCJ0b1N0cmluZyIsImVyciIsImVycm9yIiwicGF0aCIsImxpbmUiLCJtZXNzYWdlIiwic3BsaXQiLCJmbHVzaCIsImRvbmUiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi95YW1sLWxpbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzICovXG5jb25zdCB7IFRyYW5zZm9ybSB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCBsb2cgPSByZXF1aXJlKCdmYW5jeS1sb2cnKTtcbmNvbnN0IHlhbWwgPSByZXF1aXJlKCdqcy15YW1sJyk7XG5jb25zdCB7IEVPTCB9ID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IFBsdWdpbkVycm9yID0gcmVxdWlyZSgncGx1Z2luLWVycm9yJyk7XG5jb25zdCByZWQgPSByZXF1aXJlKCdhbnNpLXJlZCcpO1xuXG5cbmZ1bmN0aW9uIGd1bHBZYW1sTGludCAoKSB7XG4gIGxldCBlcnJDb3VudCA9IDA7XG4gIHJldHVybiBuZXcgVHJhbnNmb3JtKHtcbiAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgIHRyYW5zZm9ybSAoZmlsZSwgZW5jLCBjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgeWFtbC5sb2FkKGZpbGUuY29udGVudHMudG9TdHJpbmcoZW5jKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZXJyQ291bnQrKztcbiAgICAgICAgbG9nLmVycm9yKGBJbnZhbGlkIFlBTUwgZmlsZTogJyR7ZmlsZS5wYXRofSdgKTtcbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGVyci5tZXNzYWdlLnNwbGl0KEVPTCkpIHtcbiAgICAgICAgICBsb2cuZXJyb3IobGluZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNiKCk7XG4gICAgfSxcbiAgICBmbHVzaCAoZG9uZSkge1xuICAgICAgaWYgKGVyckNvdW50ID4gMCkge1xuICAgICAgICBsb2cuZXJyb3IoYFlBTUwgZXJyb3JzIGZvdW5kLiBEdWUgdG8gdGhlIGxpbWl0YXRpb25zIG9mIFlBTUwgbGludGluZywgdGhlIGVycm9yIGApO1xuICAgICAgICBsb2cuZXJyb3IoYGlzIG1vc3QgbGlrZWx5IGluIHRoZSBsaW5lIGltbWVkaWF0ZWx5ICR7cmVkKCdiZWZvcmUnKX0gdGhlIGxpbmUgcmVwb3J0ZWQuYCk7XG4gICAgICAgIHJldHVybiBkb25lKG5ldyBQbHVnaW5FcnJvcignZ3VscC15YW1sLWxpbnQnLCB7XG4gICAgICAgICAgbmFtZTogJ1lBTUxFcnJvcicsXG4gICAgICAgICAgbWVzc2FnZTogYEZhaWxlZCB3aXRoICR7ZXJyQ291bnR9ICR7ZXJyQ291bnQgPT09IDEgPyAnZXJyb3InIDogJ2Vycm9ycyd9YCxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgZG9uZSgpO1xuICAgIH0sXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGd1bHBZYW1sTGludDtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE1BQU07RUFBRUE7QUFBRixJQUFnQkMsT0FBTyxDQUFDLFFBQUQsQ0FBN0I7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFuQjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQXBCOztBQUNBLE1BQU07RUFBRUc7QUFBRixJQUFVSCxPQUFPLENBQUMsSUFBRCxDQUF2Qjs7QUFDQSxNQUFNSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQyxjQUFELENBQTNCOztBQUNBLE1BQU1LLEdBQUcsR0FBR0wsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBR0EsU0FBU00sWUFBVCxHQUF5QjtFQUN2QixJQUFJQyxRQUFRLEdBQUcsQ0FBZjtFQUNBLE9BQU8sSUFBSVIsU0FBSixDQUFjO0lBQ25CUyxVQUFVLEVBQUUsSUFETzs7SUFFbkJDLFNBQVMsQ0FBRUMsSUFBRixFQUFRQyxHQUFSLEVBQWFDLEVBQWIsRUFBaUI7TUFDeEIsSUFBSTtRQUNGVixJQUFJLENBQUNXLElBQUwsQ0FBVUgsSUFBSSxDQUFDSSxRQUFMLENBQWNDLFFBQWQsQ0FBdUJKLEdBQXZCLENBQVY7TUFDRCxDQUZELENBRUUsT0FBT0ssR0FBUCxFQUFZO1FBQ1pULFFBQVE7UUFDUk4sR0FBRyxDQUFDZ0IsS0FBSixDQUFXLHVCQUFzQlAsSUFBSSxDQUFDUSxJQUFLLEdBQTNDOztRQUNBLEtBQUssTUFBTUMsSUFBWCxJQUFtQkgsR0FBRyxDQUFDSSxPQUFKLENBQVlDLEtBQVosQ0FBa0JsQixHQUFsQixDQUFuQixFQUEyQztVQUN6Q0YsR0FBRyxDQUFDZ0IsS0FBSixDQUFVRSxJQUFWO1FBQ0Q7TUFDRjs7TUFDRFAsRUFBRTtJQUNILENBYmtCOztJQWNuQlUsS0FBSyxDQUFFQyxJQUFGLEVBQVE7TUFDWCxJQUFJaEIsUUFBUSxHQUFHLENBQWYsRUFBa0I7UUFDaEJOLEdBQUcsQ0FBQ2dCLEtBQUosQ0FBVyx1RUFBWDtRQUNBaEIsR0FBRyxDQUFDZ0IsS0FBSixDQUFXLDBDQUF5Q1osR0FBRyxDQUFDLFFBQUQsQ0FBVyxxQkFBbEU7UUFDQSxPQUFPa0IsSUFBSSxDQUFDLElBQUluQixXQUFKLENBQWdCLGdCQUFoQixFQUFrQztVQUM1Q29CLElBQUksRUFBRSxXQURzQztVQUU1Q0osT0FBTyxFQUFHLGVBQWNiLFFBQVMsSUFBR0EsUUFBUSxLQUFLLENBQWIsR0FBaUIsT0FBakIsR0FBMkIsUUFBUztRQUY1QixDQUFsQyxDQUFELENBQVg7TUFJRDs7TUFDRGdCLElBQUk7SUFDTDs7RUF4QmtCLENBQWQsQ0FBUDtBQTBCRDs7QUFFREUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsWUFBakIifQ==
