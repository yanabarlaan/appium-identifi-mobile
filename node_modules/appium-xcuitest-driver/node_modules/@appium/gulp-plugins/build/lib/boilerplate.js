'use strict';

require("source-map-support/register");

const _ = require('lodash');

const tasks = require('./tasks/');

const log = require('fancy-log');

if (process.env.TRAVIS || process.env.CI) {
  process.env.REAL_DEVICE = 0;
}

const DEFAULT_OPTS = {
  files: ['lib/**/*.js', 'test/**/*.js', '!gulpfile.js'],
  transpile: true,
  transpileOut: 'build',
  babelOpts: {},
  linkBabelRuntime: true,
  watch: true,
  watchE2E: false,
  test: {
    files: ['${testDir}/**/*-specs.js', '!${testDir}/**/*-e2e-specs.js'],
    traceWarnings: false
  },
  coverage: {
    files: ['./build/test/**/*-specs.js', '!./build/test/**/*-e2e-specs.js'],
    verbose: true
  },
  'coverage-e2e': {
    files: ['./build/test/**/*-e2e-specs.js'],
    verbose: true
  },
  e2eTest: {
    files: ['${testDir}/**/*-e2e-specs.js'],
    forceExit: false,
    traceWarnings: false
  },
  testReporter: 'spec',
  testTimeout: 20000,
  build: 'Appium',
  extraPrepublishTasks: [],
  eslint: true,
  eslintOnWatch: false,
  lintOnWatch: false,
  ci: {
    interval: 60000,
    owner: 'appium',
    repo: 'appium-build-store'
  },
  yamllint: true,
  yaml: {
    files: ['**/.*.yml', '**/*.yml', '**/.*.yaml', '**/*.yaml', '!test/**', '!node_modules/**', '!**/node_modules/**'],
    safe: false
  }
};

const boilerplate = function (gulp, opts) {
  opts = _.merge({}, DEFAULT_OPTS, opts);

  if (!_.isEmpty(opts.buildName)) {
    log.warn(`The 'buildName' option is deprecated. Use 'build' instead`);
    opts.build = opts.buildName = opts.build || opts.buildName;
  }

  const spawnWatcher = require('./spawn-watcher').use(gulp, opts);

  const rootDir = opts.transpile ? opts.transpileOut : '.';
  const fileAliases = {
    rootDir,
    testDir: `${rootDir}/test`,
    libDir: `${rootDir}/lib`
  };
  tasks.configure(gulp, opts, {
    fileAliases,
    spawnWatcher
  });
  let defaultSequence = [];

  if (opts.transpile) {
    defaultSequence.push('clean');
  }

  if (opts.eslint || opts.lint) {
    defaultSequence.push('lint');
  }

  if (opts.transpile && !opts.test) {
    defaultSequence.push('transpile');
  }

  if (opts.test) {
    if (opts.watchE2E) {
      defaultSequence.push('test');
    } else {
      defaultSequence.push('unit-test');
    }
  }

  if (opts.extraDefaultTasks) {
    defaultSequence.push(...opts.extraDefaultTasks);
  }

  if (opts.watch) {
    if (opts.eslintOnWatch) {
      log.warn(`The 'eslintOnWatch' option is deprecated. Use 'lintOnWatch' instead`);
      opts.lintOnWatch = true;
    }

    const watchSequence = opts.lintOnWatch ? defaultSequence : defaultSequence.filter(function filterLintTasks(step) {
      return step !== 'lint';
    });
    spawnWatcher.configure('watch', opts.files, watchSequence);
  }

  spawnWatcher.configure('dev', opts.files, ['transpile']);
  gulp.task('once', gulp.series(...defaultSequence));
  gulp.task('default', gulp.series(opts.watch ? 'watch' : 'once'));
};

module.exports = {
  DEFAULTS: _.cloneDeep(DEFAULT_OPTS),

  use(gulp) {
    return function callBoilerplate(opts) {
      boilerplate(gulp, opts);
    };
  }

};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2JvaWxlcnBsYXRlLmpzIiwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJ0YXNrcyIsImxvZyIsInByb2Nlc3MiLCJlbnYiLCJUUkFWSVMiLCJDSSIsIlJFQUxfREVWSUNFIiwiREVGQVVMVF9PUFRTIiwiZmlsZXMiLCJ0cmFuc3BpbGUiLCJ0cmFuc3BpbGVPdXQiLCJiYWJlbE9wdHMiLCJsaW5rQmFiZWxSdW50aW1lIiwid2F0Y2giLCJ3YXRjaEUyRSIsInRlc3QiLCJ0cmFjZVdhcm5pbmdzIiwiY292ZXJhZ2UiLCJ2ZXJib3NlIiwiZTJlVGVzdCIsImZvcmNlRXhpdCIsInRlc3RSZXBvcnRlciIsInRlc3RUaW1lb3V0IiwiYnVpbGQiLCJleHRyYVByZXB1Ymxpc2hUYXNrcyIsImVzbGludCIsImVzbGludE9uV2F0Y2giLCJsaW50T25XYXRjaCIsImNpIiwiaW50ZXJ2YWwiLCJvd25lciIsInJlcG8iLCJ5YW1sbGludCIsInlhbWwiLCJzYWZlIiwiYm9pbGVycGxhdGUiLCJndWxwIiwib3B0cyIsIm1lcmdlIiwiaXNFbXB0eSIsImJ1aWxkTmFtZSIsIndhcm4iLCJzcGF3bldhdGNoZXIiLCJ1c2UiLCJyb290RGlyIiwiZmlsZUFsaWFzZXMiLCJ0ZXN0RGlyIiwibGliRGlyIiwiY29uZmlndXJlIiwiZGVmYXVsdFNlcXVlbmNlIiwicHVzaCIsImxpbnQiLCJleHRyYURlZmF1bHRUYXNrcyIsIndhdGNoU2VxdWVuY2UiLCJmaWx0ZXIiLCJmaWx0ZXJMaW50VGFza3MiLCJzdGVwIiwidGFzayIsInNlcmllcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJERUZBVUxUUyIsImNsb25lRGVlcCIsImNhbGxCb2lsZXJwbGF0ZSJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9ib2lsZXJwbGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IHRhc2tzID0gcmVxdWlyZSgnLi90YXNrcy8nKTtcbmNvbnN0IGxvZyA9IHJlcXVpcmUoJ2ZhbmN5LWxvZycpO1xuXG5cbmlmIChwcm9jZXNzLmVudi5UUkFWSVMgfHwgcHJvY2Vzcy5lbnYuQ0kpIHtcbiAgcHJvY2Vzcy5lbnYuUkVBTF9ERVZJQ0UgPSAwO1xufVxuXG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIGZpbGVzOiBbJ2xpYi8qKi8qLmpzJywgJ3Rlc3QvKiovKi5qcycsICchZ3VscGZpbGUuanMnXSxcbiAgdHJhbnNwaWxlOiB0cnVlLFxuICB0cmFuc3BpbGVPdXQ6ICdidWlsZCcsXG4gIGJhYmVsT3B0czoge30sXG4gIGxpbmtCYWJlbFJ1bnRpbWU6IHRydWUsXG4gIHdhdGNoOiB0cnVlLFxuICB3YXRjaEUyRTogZmFsc2UsXG4gIHRlc3Q6IHtcbiAgICBmaWxlczogWycke3Rlc3REaXJ9LyoqLyotc3BlY3MuanMnLCAnISR7dGVzdERpcn0vKiovKi1lMmUtc3BlY3MuanMnXSxcbiAgICB0cmFjZVdhcm5pbmdzOiBmYWxzZSxcbiAgfSxcbiAgY292ZXJhZ2U6IHtcbiAgICBmaWxlczogWycuL2J1aWxkL3Rlc3QvKiovKi1zcGVjcy5qcycsICchLi9idWlsZC90ZXN0LyoqLyotZTJlLXNwZWNzLmpzJ10sXG4gICAgdmVyYm9zZTogdHJ1ZSxcbiAgfSxcbiAgJ2NvdmVyYWdlLWUyZSc6IHtcbiAgICBmaWxlczogWycuL2J1aWxkL3Rlc3QvKiovKi1lMmUtc3BlY3MuanMnXSxcbiAgICB2ZXJib3NlOiB0cnVlLFxuICB9LFxuICBlMmVUZXN0OiB7XG4gICAgZmlsZXM6IFsnJHt0ZXN0RGlyfS8qKi8qLWUyZS1zcGVjcy5qcyddLFxuICAgIGZvcmNlRXhpdDogZmFsc2UsXG4gICAgdHJhY2VXYXJuaW5nczogZmFsc2UsXG4gIH0sXG4gIHRlc3RSZXBvcnRlcjogJ3NwZWMnLFxuICB0ZXN0VGltZW91dDogMjAwMDAsXG4gIGJ1aWxkOiAnQXBwaXVtJyxcbiAgZXh0cmFQcmVwdWJsaXNoVGFza3M6IFtdLFxuICBlc2xpbnQ6IHRydWUsXG4gIGVzbGludE9uV2F0Y2g6IGZhbHNlLCAvLyBkZXByZWNhdGVkLCBtb3ZlIHRvIGxpbnRPbldhdGNoXG4gIGxpbnRPbldhdGNoOiBmYWxzZSxcbiAgY2k6IHtcbiAgICBpbnRlcnZhbDogNjAwMDAsXG4gICAgb3duZXI6ICdhcHBpdW0nLFxuICAgIHJlcG86ICdhcHBpdW0tYnVpbGQtc3RvcmUnLFxuICB9LFxuICB5YW1sbGludDogdHJ1ZSxcbiAgeWFtbDoge1xuICAgIGZpbGVzOiBbJyoqLy4qLnltbCcsICcqKi8qLnltbCcsICcqKi8uKi55YW1sJywgJyoqLyoueWFtbCcsICchdGVzdC8qKicsICchbm9kZV9tb2R1bGVzLyoqJywgJyEqKi9ub2RlX21vZHVsZXMvKionXSxcbiAgICBzYWZlOiBmYWxzZSxcbiAgfSxcbn07XG5cbmNvbnN0IGJvaWxlcnBsYXRlID0gZnVuY3Rpb24gKGd1bHAsIG9wdHMpIHtcbiAgb3B0cyA9IF8ubWVyZ2Uoe30sIERFRkFVTFRfT1BUUywgb3B0cyk7XG5cbiAgaWYgKCFfLmlzRW1wdHkob3B0cy5idWlsZE5hbWUpKSB7XG4gICAgbG9nLndhcm4oYFRoZSAnYnVpbGROYW1lJyBvcHRpb24gaXMgZGVwcmVjYXRlZC4gVXNlICdidWlsZCcgaW5zdGVhZGApO1xuICAgIG9wdHMuYnVpbGQgPSBvcHRzLmJ1aWxkTmFtZSA9IG9wdHMuYnVpbGQgfHwgb3B0cy5idWlsZE5hbWU7XG4gIH1cblxuICBjb25zdCBzcGF3bldhdGNoZXIgPSByZXF1aXJlKCcuL3NwYXduLXdhdGNoZXInKS51c2UoZ3VscCwgb3B0cyk7XG4gIGNvbnN0IHJvb3REaXIgPSBvcHRzLnRyYW5zcGlsZSA/IG9wdHMudHJhbnNwaWxlT3V0IDogJy4nO1xuICBjb25zdCBmaWxlQWxpYXNlcyA9IHtcbiAgICByb290RGlyLFxuICAgIHRlc3REaXI6IGAke3Jvb3REaXJ9L3Rlc3RgLFxuICAgIGxpYkRpcjogYCR7cm9vdERpcn0vbGliYCxcbiAgfTtcblxuICAvLyBjb25maWd1cmUgdGhlIGluZGl2aWR1YWwgdGFza3NcbiAgdGFza3MuY29uZmlndXJlKGd1bHAsIG9wdHMsIHtcbiAgICBmaWxlQWxpYXNlcyxcbiAgICBzcGF3bldhdGNoZXIsXG4gIH0pO1xuXG4gIC8vIGNvbnB1dGUgYW5kIGRlZmluZSB0aGUgZGVmYXVsdCBzZXF1ZW5jZSBvZiB0YXNrc1xuICBsZXQgZGVmYXVsdFNlcXVlbmNlID0gW107XG4gIGlmIChvcHRzLnRyYW5zcGlsZSkge1xuICAgIGRlZmF1bHRTZXF1ZW5jZS5wdXNoKCdjbGVhbicpO1xuICB9XG4gIGlmIChvcHRzLmVzbGludCB8fCBvcHRzLmxpbnQpIHtcbiAgICBkZWZhdWx0U2VxdWVuY2UucHVzaCgnbGludCcpO1xuICB9XG4gIGlmIChvcHRzLnRyYW5zcGlsZSAmJiAhb3B0cy50ZXN0KSB7XG4gICAgZGVmYXVsdFNlcXVlbmNlLnB1c2goJ3RyYW5zcGlsZScpO1xuICB9XG4gIGlmIChvcHRzLnRlc3QpIHtcbiAgICBpZiAob3B0cy53YXRjaEUyRSkge1xuICAgICAgZGVmYXVsdFNlcXVlbmNlLnB1c2goJ3Rlc3QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmYXVsdFNlcXVlbmNlLnB1c2goJ3VuaXQtdGVzdCcpO1xuICAgIH1cbiAgfVxuICBpZiAob3B0cy5leHRyYURlZmF1bHRUYXNrcykge1xuICAgIGRlZmF1bHRTZXF1ZW5jZS5wdXNoKC4uLm9wdHMuZXh0cmFEZWZhdWx0VGFza3MpO1xuICB9XG5cbiAgaWYgKG9wdHMud2F0Y2gpIHtcbiAgICBpZiAob3B0cy5lc2xpbnRPbldhdGNoKSB7XG4gICAgICBsb2cud2FybihgVGhlICdlc2xpbnRPbldhdGNoJyBvcHRpb24gaXMgZGVwcmVjYXRlZC4gVXNlICdsaW50T25XYXRjaCcgaW5zdGVhZGApO1xuICAgICAgb3B0cy5saW50T25XYXRjaCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHdhdGNoU2VxdWVuY2UgPSBvcHRzLmxpbnRPbldhdGNoXG4gICAgICA/IGRlZmF1bHRTZXF1ZW5jZVxuICAgICAgOiBkZWZhdWx0U2VxdWVuY2UuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckxpbnRUYXNrcyAoc3RlcCkge1xuICAgICAgICByZXR1cm4gc3RlcCAhPT0gJ2xpbnQnO1xuICAgICAgfSk7XG4gICAgc3Bhd25XYXRjaGVyLmNvbmZpZ3VyZSgnd2F0Y2gnLCBvcHRzLmZpbGVzLCB3YXRjaFNlcXVlbmNlKTtcbiAgfVxuXG4gIHNwYXduV2F0Y2hlci5jb25maWd1cmUoJ2RldicsIG9wdHMuZmlsZXMsIFsndHJhbnNwaWxlJ10pO1xuICBndWxwLnRhc2soJ29uY2UnLCBndWxwLnNlcmllcyguLi5kZWZhdWx0U2VxdWVuY2UpKTtcbiAgZ3VscC50YXNrKCdkZWZhdWx0JywgZ3VscC5zZXJpZXMob3B0cy53YXRjaCA/ICd3YXRjaCcgOiAnb25jZScpKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERFRkFVTFRTOiBfLmNsb25lRGVlcChERUZBVUxUX09QVFMpLFxuICB1c2UgKGd1bHApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2FsbEJvaWxlcnBsYXRlIChvcHRzKSB7XG4gICAgICBib2lsZXJwbGF0ZShndWxwLCBvcHRzKTtcbiAgICB9O1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFDQSxNQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxXQUFELENBQW5COztBQUdBLElBQUlHLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxNQUFaLElBQXNCRixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsRUFBdEMsRUFBMEM7RUFDeENILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxXQUFaLEdBQTBCLENBQTFCO0FBQ0Q7O0FBRUQsTUFBTUMsWUFBWSxHQUFHO0VBQ25CQyxLQUFLLEVBQUUsQ0FBQyxhQUFELEVBQWdCLGNBQWhCLEVBQWdD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
