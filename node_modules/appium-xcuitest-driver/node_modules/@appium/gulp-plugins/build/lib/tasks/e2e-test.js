'use strict';

require("source-map-support/register");

const mocha = require('gulp-mocha');

const B = require('bluebird');

const globby = require('globby');

const debug = require('gulp-debug');

const gulpIf = require('gulp-if');

const log = require('fancy-log');

const utils = require('../utils');

const {
  isVerbose
} = utils;

const configure = function configure(gulp, opts, env) {
  const e2eTestFiles = utils.translatePaths([opts.e2eTest.files || opts.e2eTestFiles], env.fileAliases);
  gulp.task('e2e-test:run', async function e2eTestRun() {
    const mochaOpts = {
      reporter: utils.getTestReporter(opts),
      timeout: opts.testTimeout,
      'require': opts.testRequire || [],
      exit: true,
      color: true,
      traceWarnings: opts.e2eTest.traceWarnings,
      traceDeprecation: opts.e2eTest.traceWarnings
    };
    process.env._TESTING = 1;

    const mochaCmd = function () {
      return new B(function runCmd(resolve, reject) {
        gulp.src(e2eTestFiles, {
          read: true,
          allowEmpty: true
        }).pipe(gulpIf(isVerbose(), debug())).pipe(mocha(mochaOpts)).on('error', function onError(err) {
          reject(err);
        }).once('_result', function onResult(...args) {
          resolve(...args);
        });
      });
    };

    try {
      const files = await globby(e2eTestFiles);

      if (!files.length) {
        log(`No e2e test files found using '${e2eTestFiles}'`);
        return;
      }

      await mochaCmd();
    } finally {
      if (opts.e2eTest.forceExit) {
        process.exit(0);
      }
    }
  });
  gulp.task('e2e-test', gulp.series(env.testDeps, 'e2e-test:run'));
};

module.exports = {
  configure
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Rhc2tzL2UyZS10ZXN0LmpzIiwibmFtZXMiOlsibW9jaGEiLCJyZXF1aXJlIiwiQiIsImdsb2JieSIsImRlYnVnIiwiZ3VscElmIiwibG9nIiwidXRpbHMiLCJpc1ZlcmJvc2UiLCJjb25maWd1cmUiLCJndWxwIiwib3B0cyIsImVudiIsImUyZVRlc3RGaWxlcyIsInRyYW5zbGF0ZVBhdGhzIiwiZTJlVGVzdCIsImZpbGVzIiwiZmlsZUFsaWFzZXMiLCJ0YXNrIiwiZTJlVGVzdFJ1biIsIm1vY2hhT3B0cyIsInJlcG9ydGVyIiwiZ2V0VGVzdFJlcG9ydGVyIiwidGltZW91dCIsInRlc3RUaW1lb3V0IiwidGVzdFJlcXVpcmUiLCJleGl0IiwiY29sb3IiLCJ0cmFjZVdhcm5pbmdzIiwidHJhY2VEZXByZWNhdGlvbiIsInByb2Nlc3MiLCJfVEVTVElORyIsIm1vY2hhQ21kIiwicnVuQ21kIiwicmVzb2x2ZSIsInJlamVjdCIsInNyYyIsInJlYWQiLCJhbGxvd0VtcHR5IiwicGlwZSIsIm9uIiwib25FcnJvciIsImVyciIsIm9uY2UiLCJvblJlc3VsdCIsImFyZ3MiLCJsZW5ndGgiLCJmb3JjZUV4aXQiLCJzZXJpZXMiLCJ0ZXN0RGVwcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvdGFza3MvZTJlLXRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtb2NoYSA9IHJlcXVpcmUoJ2d1bHAtbW9jaGEnKTtcbmNvbnN0IEIgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgZ2xvYmJ5ID0gcmVxdWlyZSgnZ2xvYmJ5Jyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2d1bHAtZGVidWcnKTtcbmNvbnN0IGd1bHBJZiA9IHJlcXVpcmUoJ2d1bHAtaWYnKTtcbmNvbnN0IGxvZyA9IHJlcXVpcmUoJ2ZhbmN5LWxvZycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5cbmNvbnN0IHsgaXNWZXJib3NlIH0gPSB1dGlscztcblxuY29uc3QgY29uZmlndXJlID0gZnVuY3Rpb24gY29uZmlndXJlIChndWxwLCBvcHRzLCBlbnYpIHtcbiAgY29uc3QgZTJlVGVzdEZpbGVzID0gdXRpbHMudHJhbnNsYXRlUGF0aHMoW29wdHMuZTJlVGVzdC5maWxlcyB8fCBvcHRzLmUyZVRlc3RGaWxlc10sIGVudi5maWxlQWxpYXNlcyk7XG4gIGd1bHAudGFzaygnZTJlLXRlc3Q6cnVuJywgYXN5bmMgZnVuY3Rpb24gZTJlVGVzdFJ1biAoKSB7XG4gICAgY29uc3QgbW9jaGFPcHRzID0ge1xuICAgICAgcmVwb3J0ZXI6IHV0aWxzLmdldFRlc3RSZXBvcnRlcihvcHRzKSxcbiAgICAgIHRpbWVvdXQ6IG9wdHMudGVzdFRpbWVvdXQsXG4gICAgICAncmVxdWlyZSc6IG9wdHMudGVzdFJlcXVpcmUgfHwgW10sXG4gICAgICBleGl0OiB0cnVlLFxuICAgICAgY29sb3I6IHRydWUsXG4gICAgICB0cmFjZVdhcm5pbmdzOiBvcHRzLmUyZVRlc3QudHJhY2VXYXJuaW5ncyxcbiAgICAgIHRyYWNlRGVwcmVjYXRpb246IG9wdHMuZTJlVGVzdC50cmFjZVdhcm5pbmdzLFxuICAgIH07XG4gICAgLy8gc2V0IGVudiBzbyBvdXIgY29kZSBrbm93cyB3aGVuIGl0J3MgYmVpbmcgcnVuIGluIGEgdGVzdCBlbnZcbiAgICBwcm9jZXNzLmVudi5fVEVTVElORyA9IDE7XG5cbiAgICBjb25zdCBtb2NoYUNtZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgQihmdW5jdGlvbiBydW5DbWQgKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBndWxwXG4gICAgICAgICAgLnNyYyhlMmVUZXN0RmlsZXMsIHtyZWFkOiB0cnVlLCBhbGxvd0VtcHR5OiB0cnVlfSlcbiAgICAgICAgICAucGlwZShndWxwSWYoaXNWZXJib3NlKCksIGRlYnVnKCkpKVxuICAgICAgICAgIC5waXBlKG1vY2hhKG1vY2hhT3B0cykpXG4gICAgICAgICAgLm9uKCdlcnJvcicsIGZ1bmN0aW9uIG9uRXJyb3IgKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub25jZSgnX3Jlc3VsdCcsIGZ1bmN0aW9uIG9uUmVzdWx0ICguLi5hcmdzKSB7XG4gICAgICAgICAgICByZXNvbHZlKC4uLmFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGdsb2JieShlMmVUZXN0RmlsZXMpO1xuICAgICAgLy8gZ3VscC1tb2NoYSBoYXMgYW4gaXNzdWUgd2hlcmUsIGlmIHRoZXJlIGFyZSBubyBmaWxlcyBwYXNzZWQgZnJvbSBndWxwLnNyYyxcbiAgICAgIC8vIGl0IHdpbGwganVzdCBydW4gZXZlcnl0aGluZyBpdCBmaW5kc1xuICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgbG9nKGBObyBlMmUgdGVzdCBmaWxlcyBmb3VuZCB1c2luZyAnJHtlMmVUZXN0RmlsZXN9J2ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhd2FpdCBtb2NoYUNtZCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAob3B0cy5lMmVUZXN0LmZvcmNlRXhpdCkge1xuICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgZ3VscC50YXNrKCdlMmUtdGVzdCcsIGd1bHAuc2VyaWVzKGVudi50ZXN0RGVwcywgJ2UyZS10ZXN0OnJ1bicpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb25maWd1cmUsXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTUMsQ0FBQyxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFq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
