'use strict';

require("source-map-support/register");

const log = require('fancy-log');

const red = require('ansi-red');

const notifier = require('node-notifier');

const moment = require('moment');

const COLOR_CODE_REGEXP = /\u001b\[(\d+(;\d+)*)?m/g;
module.exports = {
  use(gulp, opts = {}) {
    this.gulp = gulp;
    this.title = opts.build || 'Appium';
    this.exitOnError = true;
    this.errored = false;
    return this;
  },

  notify(subtitle, message) {
    if (process.argv.includes('--no-notif')) {
      return;
    }

    try {
      notifier.notify({
        title: this.title,
        subtitle: `${subtitle} ${moment().format('h:mm:ss')}`,
        message
      });
    } catch (ign) {
      log(`Notifier: [${this.title}] ${message}`);
    }
  },

  notifyOK() {
    this.notify('Build success!', 'All Good!');
  },

  handleError(err) {
    this.errored = true;
    const strErr = `${err}`;

    for (const line of strErr.split('\n')) {
      log.error(red(line));
    }

    const notifyErr = strErr.replace(COLOR_CODE_REGEXP, '');
    this.notify('Build failure!', notifyErr);

    if (this.exitOnError) {
      process.exit(1);
    }
  },

  configure(taskName, filePattern, sequence) {
    const notifyWatch = done => {
      if (!this.errored) {
        this.notifyOK();
      }

      this.errored = false;
      done();
    };

    this.gulp.task(taskName, () => {
      this.exitOnError = false;
      return this.gulp.watch(filePattern, {
        ignoreInitial: false,
        ignored: '**/gulpfile.js'
      }, this.gulp.series(sequence, notifyWatch));
    });
  }

};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3NwYXduLXdhdGNoZXIuanMiLCJuYW1lcyI6WyJsb2ciLCJyZXF1aXJlIiwicmVkIiwibm90aWZpZXIiLCJtb21lbnQiLCJDT0xPUl9DT0RFX1JFR0VYUCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1c2UiLCJndWxwIiwib3B0cyIsInRpdGxlIiwiYnVpbGQiLCJleGl0T25FcnJvciIsImVycm9yZWQiLCJub3RpZnkiLCJzdWJ0aXRsZSIsIm1lc3NhZ2UiLCJwcm9jZXNzIiwiYXJndiIsImluY2x1ZGVzIiwiZm9ybWF0IiwiaWduIiwibm90aWZ5T0siLCJoYW5kbGVFcnJvciIsImVyciIsInN0ckVyciIsImxpbmUiLCJzcGxpdCIsImVycm9yIiwibm90aWZ5RXJyIiwicmVwbGFjZSIsImV4aXQiLCJjb25maWd1cmUiLCJ0YXNrTmFtZSIsImZpbGVQYXR0ZXJuIiwic2VxdWVuY2UiLCJub3RpZnlXYXRjaCIsImRvbmUiLCJ0YXNrIiwid2F0Y2giLCJpZ25vcmVJbml0aWFsIiwiaWdub3JlZCIsInNlcmllcyJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9zcGF3bi13YXRjaGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbG9nID0gcmVxdWlyZSgnZmFuY3ktbG9nJyk7XG5jb25zdCByZWQgPSByZXF1aXJlKCdhbnNpLXJlZCcpO1xuY29uc3Qgbm90aWZpZXIgPSByZXF1aXJlKCdub2RlLW5vdGlmaWVyJyk7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxuXG5jb25zdCBDT0xPUl9DT0RFX1JFR0VYUCA9IC9cXHUwMDFiXFxbKFxcZCsoO1xcZCspKik/bS9nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHVzZSAoZ3VscCwgb3B0cyA9IHt9KSB7XG4gICAgdGhpcy5ndWxwID0gZ3VscDtcbiAgICB0aGlzLnRpdGxlID0gb3B0cy5idWlsZCB8fCAnQXBwaXVtJztcblxuICAgIHRoaXMuZXhpdE9uRXJyb3IgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3JlZCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgbm90aWZ5IChzdWJ0aXRsZSwgbWVzc2FnZSkge1xuICAgIGlmIChwcm9jZXNzLmFyZ3YuaW5jbHVkZXMoJy0tbm8tbm90aWYnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBub3RpZmllci5ub3RpZnkoe1xuICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgc3VidGl0bGU6IGAke3N1YnRpdGxlfSAke21vbWVudCgpLmZvcm1hdCgnaDptbTpzcycpfWAsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgIGxvZyhgTm90aWZpZXI6IFske3RoaXMudGl0bGV9XSAke21lc3NhZ2V9YCk7XG4gICAgfVxuICB9LFxuXG4gIG5vdGlmeU9LICgpIHtcbiAgICB0aGlzLm5vdGlmeSgnQnVpbGQgc3VjY2VzcyEnLCAnQWxsIEdvb2QhJyk7XG4gIH0sXG5cbiAgaGFuZGxlRXJyb3IgKGVycikge1xuICAgIHRoaXMuZXJyb3JlZCA9IHRydWU7XG5cbiAgICAvLyBsb2cgdGhlIGVycm9yXG4gICAgY29uc3Qgc3RyRXJyID0gYCR7ZXJyfWA7XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIHN0ckVyci5zcGxpdCgnXFxuJykpIHtcbiAgICAgIGxvZy5lcnJvcihyZWQobGluZSkpO1xuICAgIH1cblxuICAgIC8vIHVzZSB0aGUgc3lzdGVtIG5vdGlmaWVyXG4gICAgY29uc3Qgbm90aWZ5RXJyID0gc3RyRXJyLnJlcGxhY2UoQ09MT1JfQ09ERV9SRUdFWFAsICcnKTtcbiAgICB0aGlzLm5vdGlmeSgnQnVpbGQgZmFpbHVyZSEnLCBub3RpZnlFcnIpO1xuICAgIGlmICh0aGlzLmV4aXRPbkVycm9yKSB7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICB9LFxuXG4gIGNvbmZpZ3VyZSAodGFza05hbWUsIGZpbGVQYXR0ZXJuLCBzZXF1ZW5jZSkge1xuICAgIGNvbnN0IG5vdGlmeVdhdGNoID0gKGRvbmUpID0+IHtcbiAgICAgIGlmICghdGhpcy5lcnJvcmVkKSB7XG4gICAgICAgIHRoaXMubm90aWZ5T0soKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgZG9uZSgpO1xuICAgIH07XG4gICAgdGhpcy5ndWxwLnRhc2sodGFza05hbWUsICgpID0+IHtcbiAgICAgIHRoaXMuZXhpdE9uRXJyb3IgPSBmYWxzZTtcblxuICAgICAgcmV0dXJuIHRoaXMuZ3VscC53YXRjaChmaWxlUGF0dGVybiwge1xuICAgICAgICBpZ25vcmVJbml0aWFsOiBmYWxzZSxcbiAgICAgICAgaWdub3JlZDogJyoqL2d1bHBmaWxlLmpzJ1xuICAgICAgfSwgdGhpcy5ndWxwLnNlcmllcyhzZXF1ZW5jZSwgbm90aWZ5V2F0Y2gpKTtcbiAgICB9KTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQW5COztBQUNBLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBQ0EsTUFBTUUsUUFBUSxHQUFHRixPQUFPLENBQUMsZUFBRCxDQUF4Qjs7QUFDQSxNQUFNRyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUdBLE1BQU1JLGlCQUFpQixHQUFHLHlCQUExQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7RUFDZkMsR0FBRyxDQUFFQyxJQUFGLEVBQVFDLElBQUksR0FBRyxFQUFmLEVBQW1CO0lBQ3BCLEtBQUtELElBQUwsR0FBWUEsSUFBWjtJQUNBLEtBQUtFLEtBQUwsR0FBYUQsSUFBSSxDQUFDRSxLQUFMLElBQWMsUUFBM0I7SUFFQSxLQUFLQyxXQUFMLEdBQW1CLElBQW5CO0lBQ0EsS0FBS0MsT0FBTCxHQUFlLEtBQWY7SUFFQSxPQUFPLElBQVA7RUFDRCxDQVRjOztFQVdmQyxNQUFNLENBQUVDLFFBQUYsRUFBWUMsT0FBWixFQUFxQjtJQUN6QixJQUFJQyxPQUFPLENBQUNDLElBQVIsQ0FBYUMsUUFBYixDQUFzQixZQUF0QixDQUFKLEVBQXlDO01BQ3ZDO0lBQ0Q7O0lBRUQsSUFBSTtNQUNGakIsUUFBUSxDQUFDWSxNQUFULENBQWdCO1FBQ2RKLEtBQUssRUFBRSxLQUFLQSxLQURFO1FBRWRLLFFBQVEsRUFBRyxHQUFFQSxRQUFTLElBQUdaLE1BQU0sR0FBR2lCLE1BQVQsQ0FBZ0IsU0FBaEIsQ0FBMkIsRUFGdEM7UUFHZEo7TUFIYyxDQUFoQjtJQUtELENBTkQsQ0FNRSxPQUFPSyxHQUFQLEVBQVk7TUFDWnRCLEdBQUcsQ0FBRSxjQUFhLEtBQUtXLEtBQU0sS0FBSU0sT0FBUSxFQUF0QyxDQUFIO0lBQ0Q7RUFDRixDQXpCYzs7RUEyQmZNLFFBQVEsR0FBSTtJQUNWLEtBQUtSLE1BQUwsQ0FBWSxnQkFBWixFQUE4QixXQUE5QjtFQUNELENBN0JjOztFQStCZlMsV0FBVyxDQUFFQyxHQUFGLEVBQU87SUFDaEIsS0FBS1gsT0FBTCxHQUFlLElBQWY7SUFHQSxNQUFNWSxNQUFNLEdBQUksR0FBRUQsR0FBSSxFQUF0Qjs7SUFDQSxLQUFLLE1BQU1FLElBQVgsSUFBbUJELE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLElBQWIsQ0FBbkIsRUFBdUM7TUFDckM1QixHQUFHLENBQUM2QixLQUFKLENBQVUzQixHQUFHLENBQUN5QixJQUFELENBQWI7SUFDRDs7SUFHRCxNQUFNRyxTQUFTLEdBQUdKLE1BQU0sQ0FBQ0ssT0FBUCxDQUFlMUIsaUJBQWYsRUFBa0MsRUFBbEMsQ0FBbEI7SUFDQSxLQUFLVSxNQUFMLENBQVksZ0JBQVosRUFBOEJlLFNBQTlCOztJQUNBLElBQUksS0FBS2pCLFdBQVQsRUFBc0I7TUFDcEJLLE9BQU8sQ0FBQ2MsSUFBUixDQUFhLENBQWI7SUFDRDtFQUNGLENBOUNjOztFQWdEZkMsU0FBUyxDQUFFQyxRQUFGLEVBQVlDLFdBQVosRUFBeUJDLFFBQXpCLEVBQW1DO0lBQzFDLE1BQU1DLFdBQVcsR0FBSUMsSUFBRCxJQUFVO01BQzVCLElBQUksQ0FBQyxLQUFLeEIsT0FBVixFQUFtQjtRQUNqQixLQUFLUyxRQUFMO01BQ0Q7O01BQ0QsS0FBS1QsT0FBTCxHQUFlLEtBQWY7TUFDQXdCLElBQUk7SUFDTCxDQU5EOztJQU9BLEtBQUs3QixJQUFMLENBQVU4QixJQUFWLENBQWVMLFFBQWYsRUFBeUIsTUFBTTtNQUM3QixLQUFLckIsV0FBTCxHQUFtQixLQUFuQjtNQUVBLE9BQU8sS0FBS0osSUFBTCxDQUFVK0IsS0FBVixDQUFnQkwsV0FBaEIsRUFBNkI7UUFDbENNLGFBQWEsRUFBRSxLQURtQjtRQUVsQ0MsT0FBTyxFQUFFO01BRnlCLENBQTdCLEVBR0osS0FBS2pDLElBQUwsQ0FBVWtDLE1BQVYsQ0FBaUJQLFFBQWpCLEVBQTJCQyxXQUEzQixDQUhJLENBQVA7SUFJRCxDQVBEO0VBUUQ7O0FBaEVjLENBQWpCIn0=
