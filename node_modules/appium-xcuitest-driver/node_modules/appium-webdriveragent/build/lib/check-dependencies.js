"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bundleWDASim = bundleWDASim;
exports.checkForDependencies = checkForDependencies;

require("source-map-support/register");

var _support = require("@appium/support");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));

var _constants = require("./constants");

var _logger = _interopRequireDefault(require("./logger"));

async function buildWDASim() {
  const args = ['-project', _constants.WDA_PROJECT, '-scheme', _constants.WDA_SCHEME, '-sdk', _constants.SDK_SIMULATOR, 'CODE_SIGN_IDENTITY=""', 'CODE_SIGNING_REQUIRED="NO"', 'GCC_TREAT_WARNINGS_AS_ERRORS=0'];
  await (0, _teen_process.exec)('xcodebuild', args);
}

async function checkForDependencies() {
  _logger.default.debug('Dependencies are up to date');

  return false;
}

async function bundleWDASim(xcodebuild, opts = {}) {
  if (xcodebuild && !_lodash.default.isFunction(xcodebuild.retrieveDerivedDataPath)) {
    xcodebuild = new _xcodebuild.default();
    opts = xcodebuild;
  }

  const derivedDataPath = await xcodebuild.retrieveDerivedDataPath();

  const wdaBundlePath = _path.default.join(derivedDataPath, 'Build', 'Products', 'Debug-iphonesimulator', _constants.WDA_RUNNER_APP);

  if (await _support.fs.exists(wdaBundlePath)) {
    return wdaBundlePath;
  }

  await checkForDependencies(opts);
  await buildWDASim(xcodebuild, opts);
  return wdaBundlePath;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NoZWNrLWRlcGVuZGVuY2llcy5qcyIsIm5hbWVzIjpbImJ1aWxkV0RBU2ltIiwiYXJncyIsIldEQV9QUk9KRUNUIiwiV0RBX1NDSEVNRSIsIlNES19TSU1VTEFUT1IiLCJjaGVja0ZvckRlcGVuZGVuY2llcyIsImxvZyIsImRlYnVnIiwiYnVuZGxlV0RBU2ltIiwieGNvZGVidWlsZCIsIm9wdHMiLCJfIiwiaXNGdW5jdGlvbiIsInJldHJpZXZlRGVyaXZlZERhdGFQYXRoIiwiWGNvZGVCdWlsZCIsImRlcml2ZWREYXRhUGF0aCIsIndkYUJ1bmRsZVBhdGgiLCJwYXRoIiwiam9pbiIsIldEQV9SVU5ORVJfQVBQIiwiZnMiLCJleGlzdHMiXSwic291cmNlUm9vdCI6Ii4uLy4uIiwic291cmNlcyI6WyJsaWIvY2hlY2stZGVwZW5kZW5jaWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IFhjb2RlQnVpbGQgZnJvbSAnLi94Y29kZWJ1aWxkJztcbmltcG9ydCB7XG4gIFdEQV9QUk9KRUNULCBXREFfU0NIRU1FLCBTREtfU0lNVUxBVE9SLCBXREFfUlVOTkVSX0FQUFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuYXN5bmMgZnVuY3Rpb24gYnVpbGRXREFTaW0gKCkge1xuICBjb25zdCBhcmdzID0gW1xuICAgICctcHJvamVjdCcsIFdEQV9QUk9KRUNULFxuICAgICctc2NoZW1lJywgV0RBX1NDSEVNRSxcbiAgICAnLXNkaycsIFNES19TSU1VTEFUT1IsXG4gICAgJ0NPREVfU0lHTl9JREVOVElUWT1cIlwiJyxcbiAgICAnQ09ERV9TSUdOSU5HX1JFUVVJUkVEPVwiTk9cIicsXG4gICAgJ0dDQ19UUkVBVF9XQVJOSU5HU19BU19FUlJPUlM9MCcsXG4gIF07XG4gIGF3YWl0IGV4ZWMoJ3hjb2RlYnVpbGQnLCBhcmdzKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtYXdhaXRcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrRm9yRGVwZW5kZW5jaWVzICgpIHtcbiAgbG9nLmRlYnVnKCdEZXBlbmRlbmNpZXMgYXJlIHVwIHRvIGRhdGUnKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBidW5kbGVXREFTaW0gKHhjb2RlYnVpbGQsIG9wdHMgPSB7fSkge1xuICBpZiAoeGNvZGVidWlsZCAmJiAhXy5pc0Z1bmN0aW9uKHhjb2RlYnVpbGQucmV0cmlldmVEZXJpdmVkRGF0YVBhdGgpKSB7XG4gICAgeGNvZGVidWlsZCA9IG5ldyBYY29kZUJ1aWxkKCk7XG4gICAgb3B0cyA9IHhjb2RlYnVpbGQ7XG4gIH1cblxuICBjb25zdCBkZXJpdmVkRGF0YVBhdGggPSBhd2FpdCB4Y29kZWJ1aWxkLnJldHJpZXZlRGVyaXZlZERhdGFQYXRoKCk7XG4gIGNvbnN0IHdkYUJ1bmRsZVBhdGggPSBwYXRoLmpvaW4oZGVyaXZlZERhdGFQYXRoLCAnQnVpbGQnLCAnUHJvZHVjdHMnLCAnRGVidWctaXBob25lc2ltdWxhdG9yJywgV0RBX1JVTk5FUl9BUFApO1xuICBpZiAoYXdhaXQgZnMuZXhpc3RzKHdkYUJ1bmRsZVBhdGgpKSB7XG4gICAgcmV0dXJuIHdkYUJ1bmRsZVBhdGg7XG4gIH1cbiAgYXdhaXQgY2hlY2tGb3JEZXBlbmRlbmNpZXMob3B0cyk7XG4gIGF3YWl0IGJ1aWxkV0RBU2ltKHhjb2RlYnVpbGQsIG9wdHMpO1xuICByZXR1cm4gd2RhQnVuZGxlUGF0aDtcbn1cblxuZXhwb3J0IHsgY2hlY2tGb3JEZXBlbmRlbmNpZXMsIGJ1bmRsZVdEQVNpbSB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFFQSxlQUFlQSxXQUFmLEdBQThCO0VBQzVCLE1BQU1DLElBQUksR0FBRyxDQUNYLFVBRFcsRUFDQ0Msc0JBREQsRUFFWCxTQUZXLEVBRUFDLHFCQUZBLEVBR1gsTUFIVyxFQUdIQyx3QkFIRyxFQUlYLHVCQUpXLEVBS1gsNEJBTFcsRUFNWCxnQ0FOVyxDQUFiO0VBUUEsTUFBTSx3QkFBSyxZQUFMLEVBQW1CSCxJQUFuQixDQUFOO0FBQ0Q7O0FBR0QsZUFBZUksb0JBQWYsR0FBdUM7RUFDckNDLGdCQUFJQyxLQUFKLENBQVUsNkJBQVY7O0VBQ0EsT0FBTyxLQUFQO0FBQ0Q7O0FBRUQsZUFBZUMsWUFBZixDQUE2QkMsVUFBN0IsRUFBeUNDLElBQUksR0FBRyxFQUFoRCxFQUFvRDtFQUNsRCxJQUFJRCxVQUFVLElBQUksQ0FBQ0UsZ0JBQUVDLFVBQUYsQ0FBYUgsVUFBVSxDQUFDSSx1QkFBeEIsQ0FBbkIsRUFBcUU7SUFDbkVKLFVBQVUsR0FBRyxJQUFJSyxtQkFBSixFQUFiO0lBQ0FKLElBQUksR0FBR0QsVUFBUDtFQUNEOztFQUVELE1BQU1NLGVBQWUsR0FBRyxNQUFNTixVQUFVLENBQUNJLHVCQUFYLEVBQTlCOztFQUNBLE1BQU1HLGFBQWEsR0FBR0MsY0FBS0MsSUFBTCxDQUFVSCxlQUFWLEVBQTJCLE9BQTNCLEVBQW9DLFVBQXBDLEVBQWdELHVCQUFoRCxFQUF5RUkseUJBQXpFLENBQXRCOztFQUNBLElBQUksTUFBTUMsWUFBR0MsTUFBSCxDQUFVTCxhQUFWLENBQVYsRUFBb0M7SUFDbEMsT0FBT0EsYUFBUDtFQUNEOztFQUNELE1BQU1YLG9CQUFvQixDQUFDSyxJQUFELENBQTFCO0VBQ0EsTUFBTVYsV0FBVyxDQUFDUyxVQUFELEVBQWFDLElBQWIsQ0FBakI7RUFDQSxPQUFPTSxhQUFQO0FBQ0QifQ==
