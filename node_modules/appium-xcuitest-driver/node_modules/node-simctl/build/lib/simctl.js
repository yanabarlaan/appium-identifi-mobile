"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Simctl = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _index = _interopRequireDefault(require("./subcommands/index.js"));

var _which = _interopRequireDefault(require("which"));

var _logger = _interopRequireWildcard(require("./logger"));

var _helpers = require("./helpers");

var _teen_process = require("teen_process");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SIMCTL_ENV_PREFIX = 'SIMCTL_CHILD_';
const DEFAULT_OPTS = {
  xcrun: {
    path: null
  },
  execTimeout: _helpers.DEFAULT_EXEC_TIMEOUT,
  logErrors: true
};

class Simctl {
  constructor(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaultsDeep(opts, DEFAULT_OPTS);

    for (const key of _lodash.default.keys(DEFAULT_OPTS)) {
      this[key] = opts[key];
    }

    this._udid = _lodash.default.isNil(opts.udid) ? null : opts.udid;
    this._devicesSetPath = _lodash.default.isNil(opts.devicesSetPath) ? null : opts.devicesSetPath;
  }

  set udid(value) {
    this._udid = value;
  }

  get udid() {
    return this._udid;
  }

  set devicesSetPath(value) {
    this._devicesSetPath = value;
  }

  get devicesSetPath() {
    return this._devicesSetPath;
  }

  requireUdid(commandName = null) {
    if (!this.udid) {
      throw new Error(`udid is required to be set for ` + (commandName ? `the '${commandName}' command` : 'this simctl command'));
    }

    return this.udid;
  }

  async requireXcrun() {
    const xcrunBinary = (0, _helpers.getXcrunBinary)();

    if (!this.xcrun.path) {
      try {
        this.xcrun.path = await (0, _which.default)(xcrunBinary);
      } catch (e) {
        throw new Error(`${xcrunBinary} tool has not been found in PATH. ` + `Are Xcode developers tools installed?`);
      }
    }

    return this.xcrun.path;
  }

  async exec(subcommand, opts = {}) {
    let {
      args = [],
      env = {},
      asynchronous = false,
      encoding,
      logErrors = true
    } = opts;
    args = ['simctl', ...(this.devicesSetPath ? ['--set', this.devicesSetPath] : []), subcommand, ...args];
    env = _lodash.default.defaults(_lodash.default.mapKeys(env, (value, key) => _lodash.default.startsWith(key, SIMCTL_ENV_PREFIX) ? key : `${SIMCTL_ENV_PREFIX}${key}`), process.env);
    const execOpts = {
      env,
      encoding
    };

    if (!asynchronous) {
      execOpts.timeout = this.execTimeout;
    }

    const xcrun = await this.requireXcrun();

    try {
      return asynchronous ? new _teen_process.SubProcess(xcrun, args, execOpts) : await (0, _teen_process.exec)(xcrun, args, execOpts);
    } catch (e) {
      if (!this.logErrors || !logErrors) {} else if (e.stderr) {
        const msg = `Error running '${subcommand}': ${e.stderr.trim()}`;

        _logger.default.debug(_logger.LOG_PREFIX, msg);

        e.message = msg;
      } else {
        _logger.default.debug(_logger.LOG_PREFIX, e.message);
      }

      throw e;
    }
  }

}

exports.Simctl = Simctl;

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  Simctl.prototype[fnName] = fn;
}

var _default = Simctl;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3NpbWN0bC5qcyIsIm5hbWVzIjpbIlNJTUNUTF9FTlZfUFJFRklYIiwiREVGQVVMVF9PUFRTIiwieGNydW4iLCJwYXRoIiwiZXhlY1RpbWVvdXQiLCJERUZBVUxUX0VYRUNfVElNRU9VVCIsImxvZ0Vycm9ycyIsIlNpbWN0bCIsImNvbnN0cnVjdG9yIiwib3B0cyIsIl8iLCJjbG9uZURlZXAiLCJkZWZhdWx0c0RlZXAiLCJrZXkiLCJrZXlzIiwiX3VkaWQiLCJpc05pbCIsInVkaWQiLCJfZGV2aWNlc1NldFBhdGgiLCJkZXZpY2VzU2V0UGF0aCIsInZhbHVlIiwicmVxdWlyZVVkaWQiLCJjb21tYW5kTmFtZSIsIkVycm9yIiwicmVxdWlyZVhjcnVuIiwieGNydW5CaW5hcnkiLCJlIiwiZXhlYyIsInN1YmNvbW1hbmQiLCJhcmdzIiwiZW52IiwiYXN5bmNocm9ub3VzIiwiZW5jb2RpbmciLCJkZWZhdWx0cyIsIm1hcEtleXMiLCJzdGFydHNXaXRoIiwicHJvY2VzcyIsImV4ZWNPcHRzIiwidGltZW91dCIsIlN1YlByb2Nlc3MiLCJzdGRlcnIiLCJtc2ciLCJ0cmltIiwibG9nIiwiZGVidWciLCJMT0dfUFJFRklYIiwibWVzc2FnZSIsImZuTmFtZSIsImZuIiwidG9QYWlycyIsInN1YmNvbW1hbmRzIiwicHJvdG90eXBlIl0sInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXMiOlsibGliL3NpbWN0bC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHN1YmNvbW1hbmRzIGZyb20gJy4vc3ViY29tbWFuZHMvaW5kZXguanMnO1xuaW1wb3J0IHdoaWNoIGZyb20gJ3doaWNoJztcbmltcG9ydCBsb2csIHsgTE9HX1BSRUZJWCB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7XG4gIERFRkFVTFRfRVhFQ19USU1FT1VULCBnZXRYY3J1bkJpbmFyeSxcbn0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IGV4ZWMgYXMgdHBFeGVjLCBTdWJQcm9jZXNzIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcblxuY29uc3QgU0lNQ1RMX0VOVl9QUkVGSVggPSAnU0lNQ1RMX0NISUxEXyc7XG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIHhjcnVuOiB7XG4gICAgcGF0aDogbnVsbCxcbiAgfSxcbiAgZXhlY1RpbWVvdXQ6IERFRkFVTFRfRVhFQ19USU1FT1VULFxuICBsb2dFcnJvcnM6IHRydWUsXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEV4ZWNPcHRzXG4gKiBAcHJvcGVydHkge0FycmF5LjxzdHJpbmc+fSBhcmdzIFtbXV0gLSBUaGUgbGlzdCBvZiBhZGRpdGlvbmFsIHN1YmNvbW1hbmQgYXJndW1lbnRzLlxuICogSXQncyBlbXB0eSBieSBkZWZhdWx0LlxuICogQHByb3BlcnR5IHtPYmplY3R9IGVudiBbe31dIC0gRW52aXJvbm1lbnQgdmFyaWFibGVzIG1hcHBpbmcuIEFsbCB0aGVzZSB2YXJpYWJsZXNcbiAqIHdpbGwgYmUgcGFzc2VkIFNpbXVsYXRvciBhbmQgdXNlZCBpbiB0aGUgZXhlY3V0aW5nIGZ1bmN0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSBsb2dFcnJvcnMgW3RydWVdIC0gU2V0IGl0IHRvIF9mYWxzZV8gdG8gdGhyb3cgZXhlY3V0aW9uIGVycm9yc1xuICogaW1tZWRpYXRlbHkgd2l0aG91dCBsb2dnaW5nIGFueSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSBhc3luY2hyb25vdXMgW2ZhbHNlXSAtIFdoZXRoZXIgdG8gZXhlY3V0ZSB0aGUgZ2l2ZW4gY29tbWFuZFxuICogJ3N5bmNocm9ub3VzbHknIG9yICdhc3luY2hyb25vdXNseScuIEFmZmVjdHMgdGhlIHJldHVybmVkIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGVuY29kaW5nIC0gRXhwbGljaXRseSBzZXRzIHN0cmVhbXMgZW5jb2RpbmcgZm9yIHRoZSBleGVjdXRlZFxuICogY29tbWFuZCBpbnB1dCBhbmQgb3V0cHV0cy5cbiAqL1xuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2ltY3RsT3B0c1xuICogQHByb3BlcnR5IHs/T2JqZWN0fSB4Y3J1biAtIFRoZSB4Y3J1biBwcm9wZXJ0aWVzLiBDdXJyZW50bHkgb25seSBvbmUgcHJvcGVydHlcbiAqIGlzIHN1cHBvcnRlZCwgd2hpY2ggaXMgYHBhdGhgIGFuZCBpdCBieSBkZWZhdWx0IGNvbnRhaW5zIGBudWxsYCwgd2hpY2ggZW5mb3JjZXNcbiAqIHRoZSBpbnN0YW5jZSB0byBhdXRvbWF0aWNhbGx5IGRldGVjdCB0aGUgZnVsbCBwYXRoIHRvIGB4Y3J1bmAgdG9vbCBhbmQgdG8gdGhyb3dcbiAqIGFuIGV4Y2VwdGlvbiBpZiBpdCBjYW5ub3QgYmUgZGV0ZWN0ZWQuIElmIHRoZSBwYXRoIGlzIHNldCB1cG9uIGluc3RhbmNlIGNyZWF0aW9uXG4gKiB0aGVuIGl0IGlzIGdvaW5nIHRvIGJlIHVzZWQgYnkgYGV4ZWNgIGFuZCBubyBhdXRvZGV0ZWN0aW9uIHdpbGwgaGFwcGVuLlxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBleGVjVGltZW91dCBbNjAwMDAwXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqIHRvIHdhaXQgZm9yIHNpbmdsZSBzeW5jaHJvbm91cyB4Y3J1biBjb21tYW5kLlxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gbG9nRXJyb3JzIFt0cnVlXSAtIFdoZXRoZXIgdG8gd2lyZSB4Y3J1biBlcnJvciBtZXNzYWdlc1xuICogaW50byBkZWJ1ZyBsb2cgYmVmb3JlIHRocm93aW5nIHRoZW0uXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVkaWQgW251bGxdIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjdXJyZW50IGRldmljZSwgd2hpY2ggaXNcbiAqIGdvaW5nIHRvIGJlIGltcGxpY2l0bHkgcGFzc2VkIHRvIGFsbCBtZXRob2RzLCB3aGljaCByZXF1aXJlIGl0LiBJdCBjYW4gZWl0aGVyIGJlIHNldFxuICogdXBvbiBpbnN0YW5jZSBjcmVhdGlvbiBpZiBpdCBpcyBhbHJlYWR5IGtub3duIGluIGFkdmFuY2Ugb3IgbGF0ZXIgd2hlbi9pZiBuZWVkZWQgdmlhIHRoZVxuICogY29ycmVzcG9uZGluZyBpbnN0YW5jZSBzZXR0ZXIuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGRldmljZXNTZXRQYXRoIC0gRnVsbCBwYXRoIHRvIHRoZSBzZXQgb2YgZGV2aWNlcyB0aGF0IHlvdSB3YW50IHRvIG1hbmFnZS5cbiAqIEJ5IGRlZmF1bHQgdGhpcyBwYXRoIHVzdWFsbHkgZXF1YWxzIHRvIH4vTGlicmFyeS9EZXZlbG9wZXIvQ29yZVNpbXVsYXRvci9EZXZpY2VzXG4gKi9cblxuXG5jbGFzcyBTaW1jdGwge1xuICAvKipcbiAgICogQHBhcmFtIHs/U2ltY3RsT3B0c30gb3B0c1xuICAgKi9cbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIG9wdHMgPSBfLmNsb25lRGVlcChvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcChvcHRzLCBERUZBVUxUX09QVFMpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIF8ua2V5cyhERUZBVUxUX09QVFMpKSB7XG4gICAgICB0aGlzW2tleV0gPSBvcHRzW2tleV07XG4gICAgfVxuICAgIHRoaXMuX3VkaWQgPSBfLmlzTmlsKG9wdHMudWRpZCkgPyBudWxsIDogb3B0cy51ZGlkO1xuICAgIHRoaXMuX2RldmljZXNTZXRQYXRoID0gXy5pc05pbChvcHRzLmRldmljZXNTZXRQYXRoKSA/IG51bGwgOiBvcHRzLmRldmljZXNTZXRQYXRoO1xuICB9XG5cbiAgc2V0IHVkaWQgKHZhbHVlKSB7XG4gICAgdGhpcy5fdWRpZCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHVkaWQgKCkge1xuICAgIHJldHVybiB0aGlzLl91ZGlkO1xuICB9XG5cbiAgc2V0IGRldmljZXNTZXRQYXRoICh2YWx1ZSkge1xuICAgIHRoaXMuX2RldmljZXNTZXRQYXRoID0gdmFsdWU7XG4gIH1cblxuICBnZXQgZGV2aWNlc1NldFBhdGggKCkge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VzU2V0UGF0aDtcbiAgfVxuXG4gIHJlcXVpcmVVZGlkIChjb21tYW5kTmFtZSA9IG51bGwpIHtcbiAgICBpZiAoIXRoaXMudWRpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1ZGlkIGlzIHJlcXVpcmVkIHRvIGJlIHNldCBmb3IgYCArXG4gICAgICAgIChjb21tYW5kTmFtZSA/IGB0aGUgJyR7Y29tbWFuZE5hbWV9JyBjb21tYW5kYCA6ICd0aGlzIHNpbWN0bCBjb21tYW5kJykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51ZGlkO1xuICB9XG5cbiAgYXN5bmMgcmVxdWlyZVhjcnVuICgpIHtcbiAgICBjb25zdCB4Y3J1bkJpbmFyeSA9IGdldFhjcnVuQmluYXJ5KCk7XG5cbiAgICBpZiAoIXRoaXMueGNydW4ucGF0aCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy54Y3J1bi5wYXRoID0gYXdhaXQgd2hpY2goeGNydW5CaW5hcnkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7eGNydW5CaW5hcnl9IHRvb2wgaGFzIG5vdCBiZWVuIGZvdW5kIGluIFBBVEguIGAgK1xuICAgICAgICAgIGBBcmUgWGNvZGUgZGV2ZWxvcGVycyB0b29scyBpbnN0YWxsZWQ/YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnhjcnVuLnBhdGg7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgcGFydGljdWxhciBzaW1jdGwgY29tbWFuZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1YmNvbW1hbmQgLSBPbmUgb2YgYXZhaWxhYmxlIHNpbWN0bCBzdWJjb21tYW5kcy5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBFeGVjdXRlIGB4Y3J1biBzaW1jdGxgIGluIFRlcm1pbmFsIHRvIHNlZSB0aGUgZnVsbCBsaXN0XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgYXZhaWxhYmxlIHN1YmNvbW1hbmRzLlxuICAgKiBAcGFyYW0gez9FeGVjT3B0c30gb3B0c1xuICAgKiBAcmV0dXJuIHtFeGVjUmVzdWx0fFN1YlByb2Nlc3N9IEVpdGhlciB0aGUgcmVzdWx0IG9mIHRlZW4gcHJvY2VzcydzIGBleGVjYCBvclxuICAgKiBgU3ViUHJvY2Vzc2AgaW5zdGFuY2UgZGVwZW5kaW5nIG9mIGBvcHRzLmFzeW5jaHJvbm91c2AgdmFsdWUuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgc2ltY3RsIHN1YmNvbW1hbmQgY29tbWFuZCByZXR1cm5zIG5vbi16ZXJvIHJldHVybiBjb2RlLlxuICAgKi9cbiAgYXN5bmMgZXhlYyAoc3ViY29tbWFuZCwgb3B0cyA9IHt9KSB7XG4gICAgbGV0IHtcbiAgICAgIGFyZ3MgPSBbXSxcbiAgICAgIGVudiA9IHt9LFxuICAgICAgYXN5bmNocm9ub3VzID0gZmFsc2UsXG4gICAgICBlbmNvZGluZyxcbiAgICAgIGxvZ0Vycm9ycyA9IHRydWUsXG4gICAgfSA9IG9wdHM7XG4gICAgLy8gcnVuIGEgcGFydGljdWxhciBzaW1jdGwgY29tbWFuZFxuICAgIGFyZ3MgPSBbJ3NpbWN0bCcsXG4gICAgICAuLi4odGhpcy5kZXZpY2VzU2V0UGF0aCA/IFsnLS1zZXQnLCB0aGlzLmRldmljZXNTZXRQYXRoXSA6IFtdKSxcbiAgICAgIHN1YmNvbW1hbmQsXG4gICAgICAuLi5hcmdzXG4gICAgXTtcbiAgICAvLyBQcmVmaXggYWxsIHBhc3NlZCBpbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMgd2l0aCAnU0lNQ1RMX0NISUxEXycsIHNpbWN0bFxuICAgIC8vIHdpbGwgdGhlbiBwYXNzIHRoZXNlIHRvIHRoZSBjaGlsZCAoc3Bhd25lZCkgcHJvY2Vzcy5cbiAgICBlbnYgPSBfLmRlZmF1bHRzKFxuICAgICAgXy5tYXBLZXlzKGVudixcbiAgICAgICAgKHZhbHVlLCBrZXkpID0+IF8uc3RhcnRzV2l0aChrZXksIFNJTUNUTF9FTlZfUFJFRklYKSA/IGtleSA6IGAke1NJTUNUTF9FTlZfUFJFRklYfSR7a2V5fWApLFxuICAgICAgcHJvY2Vzcy5lbnYpO1xuXG4gICAgY29uc3QgZXhlY09wdHMgPSB7XG4gICAgICBlbnYsXG4gICAgICBlbmNvZGluZyxcbiAgICB9O1xuICAgIGlmICghYXN5bmNocm9ub3VzKSB7XG4gICAgICBleGVjT3B0cy50aW1lb3V0ID0gdGhpcy5leGVjVGltZW91dDtcbiAgICB9XG4gICAgY29uc3QgeGNydW4gPSBhd2FpdCB0aGlzLnJlcXVpcmVYY3J1bigpO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXN5bmNocm9ub3VzID8gbmV3IFN1YlByb2Nlc3MoeGNydW4sIGFyZ3MsIGV4ZWNPcHRzKSA6IGF3YWl0IHRwRXhlYyh4Y3J1biwgYXJncywgZXhlY09wdHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICghdGhpcy5sb2dFcnJvcnMgfHwgIWxvZ0Vycm9ycykge1xuICAgICAgICAvLyBpZiB3ZSBkb24ndCB3YW50IHRvIHNlZSB0aGUgZXJyb3JzLCBqdXN0IHRocm93IGFuZCBhbGxvdyB0aGUgY2FsbGluZ1xuICAgICAgICAvLyBjb2RlIGRvIHdoYXQgaXQgd2FudHNcbiAgICAgIH0gZWxzZSBpZiAoZS5zdGRlcnIpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYEVycm9yIHJ1bm5pbmcgJyR7c3ViY29tbWFuZH0nOiAke2Uuc3RkZXJyLnRyaW0oKX1gO1xuICAgICAgICBsb2cuZGVidWcoTE9HX1BSRUZJWCwgbXNnKTtcbiAgICAgICAgZS5tZXNzYWdlID0gbXNnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmRlYnVnKExPR19QUkVGSVgsIGUubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIGFkZCBhbGwgdGhlIHN1YmNvbW1hbmRzIHRvIHRoZSBTaW1jdGwgcHJvdG90eXBlXG5mb3IgKGNvbnN0IFtmbk5hbWUsIGZuXSBvZiBfLnRvUGFpcnMoc3ViY29tbWFuZHMpKSB7XG4gIFNpbWN0bC5wcm90b3R5cGVbZm5OYW1lXSA9IGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTaW1jdGw7XG5leHBvcnQgeyBTaW1jdGwgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7Ozs7O0FBRUEsTUFBTUEsaUJBQWlCLEdBQUcsZUFBMUI7QUFDQSxNQUFNQyxZQUFZLEdBQUc7RUFDbkJDLEtBQUssRUFBRTtJQUNMQyxJQUFJLEVBQUU7RUFERCxDQURZO0VBSW5CQyxXQUFXLEVBQUVDLDZCQUpNO0VBS25CQyxTQUFTLEVBQUU7QUFMUSxDQUFyQjs7QUEyQ0EsTUFBTUMsTUFBTixDQUFhO0VBSVhDLFdBQVcsQ0FBRUMsSUFBSSxHQUFHLEVBQVQsRUFBYTtJQUN0QkEsSUFBSSxHQUFHQyxnQkFBRUMsU0FBRixDQUFZRixJQUFaLENBQVA7O0lBQ0FDLGdCQUFFRSxZQUFGLENBQWVILElBQWYsRUFBcUJSLFlBQXJCOztJQUNBLEtBQUssTUFBTVksR0FBWCxJQUFrQkgsZ0JBQUVJLElBQUYsQ0FBT2IsWUFBUCxDQUFsQixFQUF3QztNQUN0QyxLQUFLWSxHQUFMLElBQVlKLElBQUksQ0FBQ0ksR0FBRCxDQUFoQjtJQUNEOztJQUNELEtBQUtFLEtBQUwsR0FBYUwsZ0JBQUVNLEtBQUYsQ0FBUVAsSUFBSSxDQUFDUSxJQUFiLElBQXFCLElBQXJCLEdBQTRCUixJQUFJLENBQUNRLElBQTlDO0lBQ0EsS0FBS0MsZUFBTCxHQUF1QlIsZ0JBQUVNLEtBQUYsQ0FBUVAsSUFBSSxDQUFDVSxjQUFiLElBQStCLElBQS9CLEdBQXNDVixJQUFJLENBQUNVLGNBQWxFO0VBQ0Q7O0VBRU8sSUFBSkYsSUFBSSxDQUFFRyxLQUFGLEVBQVM7SUFDZixLQUFLTCxLQUFMLEdBQWFLLEtBQWI7RUFDRDs7RUFFTyxJ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
