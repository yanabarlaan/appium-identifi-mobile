"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RemoteDebugger = exports.RPC_RESPONSE_TIMEOUT_MS = exports.REMOTE_DEBUGGER_PORT = void 0;

require("source-map-support/register");

var _events = require("events");

var _logger = _interopRequireDefault(require("./logger"));

var _rpc = require("./rpc");

var _utils = require("./utils");

var _mixins = require("./mixins");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

let VERSION;

try {
  VERSION = require(_path.default.resolve(__dirname, '..', '..', 'package.json')).version;
} catch (ign) {}

const REMOTE_DEBUGGER_PORT = 27753;
exports.REMOTE_DEBUGGER_PORT = REMOTE_DEBUGGER_PORT;
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const RPC_RESPONSE_TIMEOUT_MS = 5000;
exports.RPC_RESPONSE_TIMEOUT_MS = RPC_RESPONSE_TIMEOUT_MS;
const PAGE_READY_TIMEOUT = 5000;
const GARBAGE_COLLECT_TIMEOUT = 5000;

class RemoteDebugger extends _events.EventEmitter {
  constructor(opts = {}) {
    super();

    if (VERSION) {
      _logger.default.info(`Remote Debugger version ${VERSION}`);
    }

    const {
      bundleId,
      additionalBundleIds = [],
      platformVersion,
      isSafari = true,
      includeSafari = false,
      useNewSafari = false,
      pageLoadMs,
      host,
      port = REMOTE_DEBUGGER_PORT,
      socketPath,
      pageReadyTimeout = PAGE_READY_TIMEOUT,
      remoteDebugProxy,
      garbageCollectOnExecute = false,
      logFullResponse = false,
      logAllCommunication = false,
      logAllCommunicationHexDump = false,
      webInspectorMaxFrameLength,
      socketChunkSize,
      fullPageInitialization
    } = opts;
    this.bundleId = bundleId;
    this.additionalBundleIds = additionalBundleIds;
    this.platformVersion = platformVersion;
    this.isSafari = isSafari;
    this.includeSafari = includeSafari;
    this.useNewSafari = useNewSafari;
    this.pageLoadMs = pageLoadMs;

    _logger.default.debug(`useNewSafari --> ${this.useNewSafari}`);

    this.garbageCollectOnExecute = garbageCollectOnExecute;
    this.host = host;
    this.port = port;
    this.socketPath = socketPath;
    this.remoteDebugProxy = remoteDebugProxy;
    this.pageReadyTimeout = pageReadyTimeout;
    this.logAllCommunication = _lodash.default.isNil(logAllCommunication) ? !!logFullResponse : !!logAllCommunication;
    this.logAllCommunicationHexDump = logAllCommunicationHexDump;
    this.socketChunkSize = socketChunkSize;

    if (_lodash.default.isInteger(webInspectorMaxFrameLength)) {
      this.webInspectorMaxFrameLength = webInspectorMaxFrameLength;
    }

    this.fullPageInitialization = fullPageInitialization;
    this._lock = new _asyncLock.default();
  }

  setup() {
    this.appDict = {};
    this.appIdKey = null;
    this.pageIdKey = null;
    this.pageLoading = false;
    this._navigatingToPage = false;
    this.allowNavigationWithoutReload = false;
    this.rpcClient = null;
    this._clientEventListeners = {};
  }

  teardown() {
    _logger.default.debug('Cleaning up listeners');

    this.appDict = {};
    this.appIdKey = null;
    this.pageIdKey = null;
    this.pageLoading = false;
    this.rpcClient = null;
    this.removeAllListeners(RemoteDebugger.EVENT_PAGE_CHANGE);
    this.removeAllListeners(RemoteDebugger.EVENT_DISCONNECT);
  }

  initRpcClient() {
    this.rpcClient = new _rpc.RpcClientSimulator({
      bundleId: this.bundleId,
      platformVersion: this.platformVersion,
      isSafari: this.isSafari,
      host: this.host,
      port: this.port,
      socketPath: this.socketPath,
      messageProxy: this.remoteDebugProxy,
      logAllCommunication: this.logAllCommunication,
      logAllCommunicationHexDump: this.logAllCommunicationHexDump,
      fullPageInitialization: this.fullPageInitialization,
      webInspectorMaxFrameLength: this.webInspectorMaxFrameLength
    });
  }

  get isConnected() {
    var _this$rpcClient;

    return !!((_this$rpcClient = this.rpcClient) !== null && _this$rpcClient !== void 0 && _this$rpcClient.isConnected);
  }

  async launchSafari() {
    await this.rpcClient.send('launchApplication', {
      bundleId: SAFARI_BUNDLE_ID
    });
  }

  async startTimeline(fn) {
    _logger.default.debug('Starting to record the timeline');

    this.rpcClient.on('Timeline.eventRecorded', fn);
    return await this.rpcClient.send('startTimeline', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  }

  async stopTimeline() {
    _logger.default.debug('Stopping to record the timeline');

    await this.rpcClient.send('Timeline.stop', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  }

  addClientEventListener(eventName, listener) {
    this._clientEventListeners[eventName] = this._clientEventListeners[eventName] || [];

    this._clientEventListeners[eventName].push(listener);

    this.rpcClient.on(eventName, listener);
  }

  removeClientEventListener(eventName) {
    for (const listener of this._clientEventListeners[eventName] || []) {
      this.rpcClient.off(eventName, listener);
    }
  }

  startConsole(listener) {
    _logger.default.debug('Starting to listen for JavaScript console');

    this.addClientEventListener('Console.messageAdded', listener);
    this.addClientEventListener('Console.messageRepeatCountUpdated', listener);
  }

  stopConsole() {
    _logger.default.debug('Stopping to listen for JavaScript console');

    this.removeClientEventListener('Console.messageAdded');
    this.removeClientEventListener('Console.messageRepeatCountUpdated');
  }

  startNetwork(listener) {
    _logger.default.debug('Starting to listen for network events');

    this.addClientEventListener('NetworkEvent', listener);
  }

  stopNetwork() {
    _logger.default.debug('Stopping to listen for network events');

    this.removeClientEventListener('NetworkEvent');
  }

  set allowNavigationWithoutReload(allow) {
    this._allowNavigationWithoutReload = allow;
  }

  get allowNavigationWithoutReload() {
    return this._allowNavigationWithoutReload;
  }

  async getCookies(urls) {
    _logger.default.debug('Getting cookies');

    return await this.rpcClient.send('Page.getCookies', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      urls
    });
  }

  async deleteCookie(cookieName, url) {
    _logger.default.debug(`Deleting cookie '${cookieName}' on '${url}'`);

    return await this.rpcClient.send('Page.deleteCookie', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      cookieName,
      url
    });
  }

  async garbageCollect(timeoutMs = GARBAGE_COLLECT_TIMEOUT) {
    _logger.default.debug(`Garbage collecting with ${timeoutMs}ms timeout`);

    try {
      (0, _utils.checkParams)({
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey
      });
    } catch (err) {
      _logger.default.debug(`Unable to collect garbage at this time`);

      return;
    }

    await _bluebird.default.resolve(this.rpcClient.send('Heap.gc', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    })).timeout(timeoutMs).then(function gcSuccess() {
      _logger.default.debug(`Garbage collection successful`);
    }).catch(function gcError(err) {
      if (err instanceof _bluebird.default.TimeoutError) {
        _logger.default.debug(`Garbage collection timed out after ${timeoutMs}ms`);
      } else {
        _logger.default.debug(`Unable to collect garbage: ${err.message}`);
      }
    });
  }

  async useAppDictLock(fn) {
    return await this._lock.acquire('appDict', fn);
  }

  get skippedApps() {
    return this._skippedApps || [];
  }

}

exports.RemoteDebugger = RemoteDebugger;

for (const [name, fn] of _lodash.default.toPairs(_mixins.mixins)) {
  RemoteDebugger.prototype[name] = fn;
}

for (const [name, event] of _lodash.default.toPairs(_mixins.events)) {
  RemoteDebugger[name] = event;
}

var _default = RemoteDebugger;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
