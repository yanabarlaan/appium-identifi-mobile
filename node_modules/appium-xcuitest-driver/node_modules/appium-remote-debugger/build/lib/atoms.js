"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getAtom = getAtom;
exports.getScriptForAtom = getScriptForAtom;

require("source-map-support/register");

var _support = require("@appium/support");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

const atomsCache = {};

const inBuildDir = __filename.includes('build/lib/atoms');

function getAtomFileName(atomName) {
  return inBuildDir ? _path.default.resolve(__dirname, '..', '..', 'atoms', `${atomName}.js`) : _path.default.resolve(__dirname, '..', 'atoms', `${atomName}.js`);
}

async function getAtom(atomName) {
  if (!_lodash.default.has(atomsCache, atomName)) {
    const atomFileName = getAtomFileName(atomName);

    try {
      atomsCache[atomName] = await _support.fs.readFile(atomFileName);
    } catch (e) {
      throw new Error(`Unable to load Atom '${atomName}' from file '${atomFileName}'`);
    }
  }

  return atomsCache[atomName];
}

async function wrapScriptForFrame(script, frame) {
  _logger.default.debug(`Wrapping script for frame '${frame}'`);

  const elFromCache = await getAtom('get_element_from_cache');
  return `(function (window) { var document = window.document; ` + `return (${script}); })((${elFromCache.toString('utf8')})(${JSON.stringify(frame)}))`;
}

async function getScriptForAtom(atom, args, frames = [], asyncCallBack = null) {
  const atomSrc = await getAtom(atom);
  let script;

  if (frames.length > 0) {
    script = atomSrc;

    for (const frame of frames) {
      script = await wrapScriptForFrame(script, frame);
    }
  } else {
    _logger.default.debug(`Executing '${atom}' atom in default context`);

    script = `(${atomSrc})`;
  }

  args = args.map(JSON.stringify);

  if (asyncCallBack) {
    script += `(${args.join(',')}, ${asyncCallBack}, true)`;
  } else {
    script += `(${args.join(',')})`;
  }

  return script;
}

var _default = getAtom;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2F0b21zLmpzIiwibmFtZXMiOlsiYXRvbXNDYWNoZSIsImluQnVpbGREaXIiLCJfX2ZpbGVuYW1lIiwiaW5jbHVkZXMiLCJnZXRBdG9tRmlsZU5hbWUiLCJhdG9tTmFtZSIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiZ2V0QXRvbSIsIl8iLCJoYXMiLCJhdG9tRmlsZU5hbWUiLCJmcyIsInJlYWRGaWxlIiwiZSIsIkVycm9yIiwid3JhcFNjcmlwdEZvckZyYW1lIiwic2NyaXB0IiwiZnJhbWUiLCJsb2ciLCJkZWJ1ZyIsImVsRnJvbUNhY2hlIiwidG9TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0U2NyaXB0Rm9yQXRvbSIsImF0b20iLCJhcmdzIiwiZnJhbWVzIiwiYXN5bmNDYWxsQmFjayIsImF0b21TcmMiLCJsZW5ndGgiLCJtYXAiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXMiOlsibGliL2F0b21zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmNvbnN0IGF0b21zQ2FjaGUgPSB7fTtcblxuY29uc3QgaW5CdWlsZERpciA9IF9fZmlsZW5hbWUuaW5jbHVkZXMoJ2J1aWxkL2xpYi9hdG9tcycpO1xuXG5mdW5jdGlvbiBnZXRBdG9tRmlsZU5hbWUgKGF0b21OYW1lKSB7XG4gIHJldHVybiBpbkJ1aWxkRGlyXG4gICAgPyBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnYXRvbXMnLCBgJHthdG9tTmFtZX0uanNgKVxuICAgIDogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ2F0b21zJywgYCR7YXRvbU5hbWV9LmpzYCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEF0b20gKGF0b21OYW1lKSB7XG4gIC8vIGNoZWNrIGlmIHdlIGhhdmUgYWxyZWFkeSBsb2FkZWQgYW4gY2FjaGVkIHRoaXMgYXRvbVxuICBpZiAoIV8uaGFzKGF0b21zQ2FjaGUsIGF0b21OYW1lKSkge1xuICAgIGNvbnN0IGF0b21GaWxlTmFtZSA9IGdldEF0b21GaWxlTmFtZShhdG9tTmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgIGF0b21zQ2FjaGVbYXRvbU5hbWVdID0gYXdhaXQgZnMucmVhZEZpbGUoYXRvbUZpbGVOYW1lKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2FkIEF0b20gJyR7YXRvbU5hbWV9JyBmcm9tIGZpbGUgJyR7YXRvbUZpbGVOYW1lfSdgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXRvbXNDYWNoZVthdG9tTmFtZV07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdyYXBTY3JpcHRGb3JGcmFtZSAoc2NyaXB0LCBmcmFtZSkge1xuICBsb2cuZGVidWcoYFdyYXBwaW5nIHNjcmlwdCBmb3IgZnJhbWUgJyR7ZnJhbWV9J2ApO1xuICBjb25zdCBlbEZyb21DYWNoZSA9IGF3YWl0IGdldEF0b20oJ2dldF9lbGVtZW50X2Zyb21fY2FjaGUnKTtcbiAgcmV0dXJuIGAoZnVuY3Rpb24gKHdpbmRvdykgeyB2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7IGAgK1xuICAgICAgICAgYHJldHVybiAoJHtzY3JpcHR9KTsgfSkoKCR7ZWxGcm9tQ2FjaGUudG9TdHJpbmcoJ3V0ZjgnKX0pKCR7SlNPTi5zdHJpbmdpZnkoZnJhbWUpfSkpYDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U2NyaXB0Rm9yQXRvbSAoYXRvbSwgYXJncywgZnJhbWVzID0gW10sIGFzeW5jQ2FsbEJhY2sgPSBudWxsKSB7XG4gIGNvbnN0IGF0b21TcmMgPSBhd2FpdCBnZXRBdG9tKGF0b20pO1xuICBsZXQgc2NyaXB0O1xuICBpZiAoZnJhbWVzLmxlbmd0aCA+IDApIHtcbiAgICBzY3JpcHQgPSBhdG9tU3JjO1xuICAgIGZvciAoY29uc3QgZnJhbWUgb2YgZnJhbWVzKSB7XG4gICAgICBzY3JpcHQgPSBhd2FpdCB3cmFwU2NyaXB0Rm9yRnJhbWUoc2NyaXB0LCBmcmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZyhgRXhlY3V0aW5nICcke2F0b219JyBhdG9tIGluIGRlZmF1bHQgY29udGV4dGApO1xuICAgIHNjcmlwdCA9IGAoJHthdG9tU3JjfSlgO1xuICB9XG5cbiAgLy8gYWRkIHRoZSBhcmd1bWVudHMsIGFzIHN0cmluZ3NcbiAgYXJncyA9IGFyZ3MubWFwKEpTT04uc3RyaW5naWZ5KTtcbiAgaWYgKGFzeW5jQ2FsbEJhY2spIHtcbiAgICBzY3JpcHQgKz0gYCgke2FyZ3Muam9pbignLCcpfSwgJHthc3luY0NhbGxCYWNrfSwgdHJ1ZSlgO1xuICB9IGVsc2Uge1xuICAgIHNjcmlwdCArPSBgKCR7YXJncy5qb2luKCcsJyl9KWA7XG4gIH1cblxuICByZXR1cm4gc2NyaXB0O1xufVxuXG5leHBvcnQgeyBnZXRBdG9tLCBnZXRTY3JpcHRGb3JBdG9tIH07XG5leHBvcnQgZGVmYXVsdCBnZXRBdG9tO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsVUFBVSxHQUFHLEVBQW5COztBQUVBLE1BQU1DLFVBQVUsR0FBR0MsVUFBVSxDQUFDQyxRQUFYLENBQW9CLGlCQUFwQixDQUFuQjs7QUFFQSxTQUFTQyxlQUFULENBQTBCQyxRQUExQixFQUFvQztFQUNsQyxPQUFPSixVQUFVLEdBQ2JLLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxPQUFwQyxFQUE4QyxHQUFFSCxRQUFTLEtBQXpELENBRGEsR0FFYkMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLE9BQTlCLEVBQXdDLEdBQUVILFFBQVMsS0FBbkQsQ0FGSjtBQUdEOztBQUVELGVBQWVJLE9BQWYsQ0FBd0JKLFFBQXhCLEVBQWtDO0VBRWhDLElBQUksQ0FBQ0ssZ0JBQUVDLEdBQUYsQ0FBTVgsVUFBTixFQUFrQkssUUFBbEIsQ0FBTCxFQUFrQztJQUNoQyxNQUFNTyxZQUFZLEdBQUdSLGVBQWUsQ0FBQ0MsUUFBRCxDQUFwQzs7SUFDQSxJQUFJO01BQ0ZMLFVBQVUsQ0FBQ0ssUUFBRCxDQUFWLEdBQXVCLE1BQU1RLFlBQUdDLFFBQUgsQ0FBWUYsWUFBWixDQUE3QjtJQUNELENBRkQsQ0FFRSxPQUFPRyxDQUFQLEVBQVU7TUFDVixNQUFNLElBQUlDLEtBQUosQ0FBVyx3QkFBdUJYLFFBQVMsZ0JBQWVPLFlBQWEsR0FBdkUsQ0FBTjtJQUNEO0VBQ0Y7O0VBRUQsT0FBT1osVUFBVSxDQUFDSyxRQUFELENBQWpCO0FBQ0Q7O0FBRUQsZUFBZVksa0JBQWYsQ0FBbUNDLE1BQW5DLEVBQTJDQyxLQUEzQyxFQUFrRDtFQUNoREMsZ0JBQUlDLEtBQUosQ0FBVyw4QkFBNkJGLEtBQU0sR0FBOUM7O0VBQ0EsTUFBTUcsV0FBVyxHQUFHLE1BQU1iLE9BQU8sQ0FBQyx3QkFBRCxDQUFqQztFQUNBLE9BQVEsdURBQUQsR0FDQyxXQUFVUyxNQUFPLFVBQVNJLFdBQVcsQ0FBQ0MsUUFBWixDQUFxQixNQUFyQixDQUE2QixLQUFJQyxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sS0FBZixDQUFzQixJQUR6RjtBQUVEOztBQUVELGVBQWVPLGdCQUFmLENBQWlDQyxJQUFqQyxFQUF1Q0MsSUFBdkMsRUFBNkNDLE1BQU0sR0FBRyxFQUF0RCxFQUEwREMsYUFBYSxHQUFHLElBQTFFLEVBQWdGO0VBQzlFLE1BQU1DLE9BQU8sR0FBRyxNQUFNdEIsT0FBTyxDQUFDa0IsSUFBRCxDQUE3QjtFQUNBLElBQUlULE1BQUo7O0VBQ0EsSUFBSVcsTUFBTSxDQUFDRyxNQUFQLEdBQWdCLENBQXBCLEVBQXVCO0lBQ3JCZCxNQUFNLEdBQUdhLE9BQVQ7O0lBQ0EsS0FBSyxNQUFNWixLQUFYLElBQW9CVSxNQUFwQixFQUE0QjtNQUMxQlgsTUFBTSxHQUFHLE1BQU1ELGtCQUFrQixDQUFDQyxNQUFELEVBQVNDLEtBQVQsQ0FBakM7SUFDRDtFQUNGLENBTEQsTUFLTztJQUNMQyxnQkFBSUMsS0FBSixDQUFXLGNBQWFNLElBQUssMkJBQTdCOztJQUNBVCxNQUFNLEdBQUksSUFBR2EsT0FBUSxHQUFyQjtFQUNEOztFQUdESCxJQUFJLEdBQUdBLElBQUksQ0FBQ0ssR0FBTCxDQUFTVCxJQUFJLENBQUNDLFNBQWQsQ0FBUDs7RUFDQSxJQUFJSyxhQUFKLEVBQW1CO0lBQ2pCWixNQUFNLElBQUssSUFBR1UsSUFBSSxDQUFDTSxJQUFMLENBQVUsR0FBVixDQUFlLEtBQUlKLGFBQWMsU0FBL0M7RUFDRCxDQUZELE1BRU87SUFDTFosTUFBTSxJQUFLLElBQUdVLElBQUksQ0FBQ00sSUFBTCxDQUFVLEdBQVYsQ0FBZSxHQUE3QjtFQUNEOztFQUVELE9BQU9oQixNQUFQO0FBQ0Q7O2VBR2NULE8ifQ==
