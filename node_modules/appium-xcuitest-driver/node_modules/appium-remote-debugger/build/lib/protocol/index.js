"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getProtocolCommand = getProtocolCommand;

require("source-map-support/register");

const OBJECT_GROUP = 'console';
const COMMANDS = {
  'ApplicationCache.enable': [],
  'ApplicationCache.getFramesWithManifests': [],
  'Canvas.enable': [],
  'Console.disable': [],
  'Console.enable': [],
  'Console.getLoggingChannels': [],
  'Console.setLoggingChannelLevel': ['source', 'level'],
  'CSS.enable': [],
  'Database.enable': [],
  'Debugger.enable': [],
  'Debugger.setAsyncStackTraceDepth': ['depth'],
  'Debugger.setBreakpointsActive': ['active'],
  'Debugger.setPauseForInternalScripts': ['shouldPause'],
  'Debugger.setPauseOnAssertions': ['enabled'],
  'Debugger.setPauseOnExceptions': ['state'],
  'DOM.getDocument': [],
  'DOMStorage.enable': [],
  'Heap.enable': [],
  'Heap.gc': [],
  'IndexedDB.enable': [],
  'Inspector.enable': [],
  'Inspector.initialized': [],
  'LayerTree.enable': [],
  'Memory.enable': [],
  'Network.disable': [],
  'Network.enable': [],
  'Network.setResourceCachingDisabled': ['disabled'],
  'Page.deleteCookie': ['cookieName', 'url'],
  'Page.enable': [],
  'Page.getCookies': ['urls'],
  'Page.getResourceTree': [],
  'Page.navigate': ['url'],
  'Runtime.awaitPromise': ['promiseObjectId', 'returnByValue', 'generatePreview', 'saveResult'],
  'Runtime.callFunctionOn': ['objectId', 'functionDeclaration', 'arguments', 'returnByValue'],
  'Runtime.enable': [],
  'Runtime.evaluate': ['expression', 'returnByValue', 'contextId'],
  'Target.exists': [],
  'Timeline.setAutoCaptureEnabled': ['enabled'],
  'Timeline.setInstruments': ['instruments'],
  'Timeline.start': [],
  'Timeline.stop': [],
  'Worker.enable': []
};

function getCommand(id, method, params = {}) {
  return {
    id,
    method,
    params: Object.assign({
      objectGroup: OBJECT_GROUP,
      includeCommandLineAPI: true,
      doNotPauseOnExceptionsAndMuteConsole: false,
      emulateUserGesture: false,
      generatePreview: false,
      saveResult: false
    }, params)
  };
}

function getProtocolCommand(id, method, opts = {}) {
  const paramNames = COMMANDS[method];

  if (!paramNames) {
    throw new Error(`Unknown command: '${method}'`);
  }

  const params = paramNames.reduce(function (params, name) {
    params[name] = opts[name];
    return params;
  }, {});
  return getCommand(id, method, params);
}

var _default = getProtocolCommand;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Byb3RvY29sL2luZGV4LmpzIiwibmFtZXMiOlsiT0JKRUNUX0dST1VQIiwiQ09NTUFORFMiLCJnZXRDb21tYW5kIiwiaWQiLCJtZXRob2QiLCJwYXJhbXMiLCJPYmplY3QiLCJhc3NpZ24iLCJvYmplY3RHcm91cCIsImluY2x1ZGVDb21tYW5kTGluZUFQSSIsImRvTm90UGF1c2VPbkV4Y2VwdGlvbnNBbmRNdXRlQ29uc29sZSIsImVtdWxhdGVVc2VyR2VzdHVyZSIsImdlbmVyYXRlUHJldmlldyIsInNhdmVSZXN1bHQiLCJnZXRQcm90b2NvbENvbW1hbmQiLCJvcHRzIiwicGFyYW1OYW1lcyIsIkVycm9yIiwicmVkdWNlIiwibmFtZSJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBPQkpFQ1RfR1JPVVAgPSAnY29uc29sZSc7XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L3dlYmtpdC90cmVlL21hc3Rlci9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sXG5jb25zdCBDT01NQU5EUyA9IHtcbiAgLy8jcmVnaW9uIEFQUExJQ0FUSU9OQ0FDSEUgRE9NQUlOXG4gICdBcHBsaWNhdGlvbkNhY2hlLmVuYWJsZSc6IFtdLFxuICAnQXBwbGljYXRpb25DYWNoZS5nZXRGcmFtZXNXaXRoTWFuaWZlc3RzJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBDQU5WQVMgRE9NQUlOXG4gICdDYW52YXMuZW5hYmxlJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBDT05TT0xFIERPTUFJTlxuICAnQ29uc29sZS5kaXNhYmxlJzogW10sXG4gICdDb25zb2xlLmVuYWJsZSc6IFtdLFxuICAnQ29uc29sZS5nZXRMb2dnaW5nQ2hhbm5lbHMnOiBbXSxcbiAgJ0NvbnNvbGUuc2V0TG9nZ2luZ0NoYW5uZWxMZXZlbCc6IFsnc291cmNlJywgJ2xldmVsJ10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBDU1MgRE9NQUlOXG4gICdDU1MuZW5hYmxlJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBEQVRBQkFTRSBET01BSU5cbiAgJ0RhdGFiYXNlLmVuYWJsZSc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gREVCVUdHRVIgRE9NQUlOXG4gICdEZWJ1Z2dlci5lbmFibGUnOiBbXSxcbiAgJ0RlYnVnZ2VyLnNldEFzeW5jU3RhY2tUcmFjZURlcHRoJzogWydkZXB0aCddLFxuICAnRGVidWdnZXIuc2V0QnJlYWtwb2ludHNBY3RpdmUnOiBbJ2FjdGl2ZSddLFxuICAnRGVidWdnZXIuc2V0UGF1c2VGb3JJbnRlcm5hbFNjcmlwdHMnOiBbJ3Nob3VsZFBhdXNlJ10sXG4gICdEZWJ1Z2dlci5zZXRQYXVzZU9uQXNzZXJ0aW9ucyc6IFsnZW5hYmxlZCddLFxuICAnRGVidWdnZXIuc2V0UGF1c2VPbkV4Y2VwdGlvbnMnOiBbJ3N0YXRlJ10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBET00gRE9NQUlOXG4gICdET00uZ2V0RG9jdW1lbnQnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIERPTVNUT1JBR0UgRE9NQUlOXG4gICdET01TdG9yYWdlLmVuYWJsZSc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gSEVBUCBET01BSU5cbiAgJ0hlYXAuZW5hYmxlJzogW10sXG4gICdIZWFwLmdjJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBJTkRFWEVEREIgRE9NQUlOXG4gICdJbmRleGVkREIuZW5hYmxlJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBJTlNQRUNUT1IgRE9NQUlOXG4gICdJbnNwZWN0b3IuZW5hYmxlJzogW10sXG4gICdJbnNwZWN0b3IuaW5pdGlhbGl6ZWQnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIExBWUVSVFJFRSBET01BSU5cbiAgJ0xheWVyVHJlZS5lbmFibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIE1FTU9SWSBET01BSU5cbiAgJ01lbW9yeS5lbmFibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIE5FVFdPUksgRE9NQUlOXG4gICdOZXR3b3JrLmRpc2FibGUnOiBbXSxcbiAgJ05ldHdvcmsuZW5hYmxlJzogW10sXG4gICdOZXR3b3JrLnNldFJlc291cmNlQ2FjaGluZ0Rpc2FibGVkJzogWydkaXNhYmxlZCddLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gUEFHRSBET01BSU5cbiAgJ1BhZ2UuZGVsZXRlQ29va2llJzogWydjb29raWVOYW1lJywgJ3VybCddLFxuICAnUGFnZS5lbmFibGUnOiBbXSxcbiAgJ1BhZ2UuZ2V0Q29va2llcyc6IFsndXJscyddLFxuICAnUGFnZS5nZXRSZXNvdXJjZVRyZWUnOiBbXSxcbiAgJ1BhZ2UubmF2aWdhdGUnOiBbJ3VybCddLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gUlVOVElNRSBET01BSU5cbiAgJ1J1bnRpbWUuYXdhaXRQcm9taXNlJzogWydwcm9taXNlT2JqZWN0SWQnLCAncmV0dXJuQnlWYWx1ZScsICdnZW5lcmF0ZVByZXZpZXcnLCAnc2F2ZVJlc3VsdCddLFxuICAnUnVudGltZS5jYWxsRnVuY3Rpb25Pbic6IFsnb2JqZWN0SWQnLCAnZnVuY3Rpb25EZWNsYXJhdGlvbicsICdhcmd1bWVudHMnLCAncmV0dXJuQnlWYWx1ZSddLFxuICAnUnVudGltZS5lbmFibGUnOiBbXSxcbiAgJ1J1bnRpbWUuZXZhbHVhdGUnOiBbJ2V4cHJlc3Npb24nLCAncmV0dXJuQnlWYWx1ZScsICdjb250ZXh0SWQnXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIFRBUkdFVCBET01BSU5cbiAgJ1RhcmdldC5leGlzdHMnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIFRJTUVMSU5FIERPTUFJTlxuICAnVGltZWxpbmUuc2V0QXV0b0NhcHR1cmVFbmFibGVkJzogWydlbmFibGVkJ10sXG4gICdUaW1lbGluZS5zZXRJbnN0cnVtZW50cyc6IFsnaW5zdHJ1bWVudHMnXSxcbiAgJ1RpbWVsaW5lLnN0YXJ0JzogW10sXG4gICdUaW1lbGluZS5zdG9wJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBXT1JLRVIgRE9NQUlOXG4gICdXb3JrZXIuZW5hYmxlJzogW10sXG4gIC8vI2VuZHJlZ2lvblxufTtcblxuZnVuY3Rpb24gZ2V0Q29tbWFuZCAoaWQsIG1ldGhvZCwgcGFyYW1zID0ge30pIHtcbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBtZXRob2QsXG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHtcbiAgICAgIG9iamVjdEdyb3VwOiBPQkpFQ1RfR1JPVVAsXG4gICAgICBpbmNsdWRlQ29tbWFuZExpbmVBUEk6IHRydWUsXG4gICAgICBkb05vdFBhdXNlT25FeGNlcHRpb25zQW5kTXV0ZUNvbnNvbGU6IGZhbHNlLFxuICAgICAgZW11bGF0ZVVzZXJHZXN0dXJlOiBmYWxzZSxcbiAgICAgIGdlbmVyYXRlUHJldmlldzogZmFsc2UsXG4gICAgICBzYXZlUmVzdWx0OiBmYWxzZSxcbiAgICB9LCBwYXJhbXMpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQcm90b2NvbENvbW1hbmQgKGlkLCBtZXRob2QsIG9wdHMgPSB7fSkge1xuICBjb25zdCBwYXJhbU5hbWVzID0gQ09NTUFORFNbbWV0aG9kXTtcbiAgaWYgKCFwYXJhbU5hbWVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGNvbW1hbmQ6ICcke21ldGhvZH0nYCk7XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZShmdW5jdGlvbiAocGFyYW1zLCBuYW1lKSB7XG4gICAgcGFyYW1zW25hbWVdID0gb3B0c1tuYW1lXTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9LCB7fSk7XG4gIHJldHVybiBnZXRDb21tYW5kKGlkLCBtZXRob2QsIHBhcmFtcyk7XG59XG5cbmV4cG9ydCB7IGdldFByb3RvY29sQ29tbWFuZCB9O1xuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG9jb2xDb21tYW5kO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsTUFBTUEsWUFBWSxHQUFHLFNBQXJCO0FBR0EsTUFBTUMsUUFBUSxHQUFHO0VBRWYsMkJBQTJCLEVBRlo7RUFHZiwyQ0FBMkMsRUFINUI7RUFPZixpQkFBaUIsRUFQRjtFQVdmLG1CQUFtQixFQVhKO0VBWWYsa0JBQWtCLEVBWkg7RUFhZiw4QkFBOEIsRUFiZjtFQWNmLGtDQUFrQyxDQUFDLFFBQUQsRUFBVyxPQUFYLENBZG5CO0VBa0JmLGNBQWMsRUFsQkM7RUFzQmYsbUJBQW1CLEVBdEJKO0VBMEJmLG1CQUFtQixFQTFCSjtFQTJCZixvQ0FBb0MsQ0FBQyxPQUFELENBM0JyQjtFQTRCZixpQ0FBaUMsQ0FBQyxRQUFELENBNUJsQjtFQTZCZix1Q0FBdUMsQ0FBQyxhQUFELENBN0J4QjtFQThCZixpQ0FBaUMsQ0FBQyxTQUFELENBOUJsQjtFQStCZixpQ0FBaUMsQ0FBQyxPQUFELENBL0JsQjtFQW1DZixtQkFBbUIsRUFuQ0o7RUF1Q2YscUJBQXFCLEVBdkNOO0VBMkNmLGVBQWUsRUEzQ0E7RUE0Q2YsV0FBVyxFQTVDSTtFQWdEZixvQkFBb0IsRUFoREw7RUFvRGYsb0JBQW9CLEVBcERMO0VBcURmLHlCQUF5QixFQXJEVjtFQXlEZixvQkFBb0IsRUF6REw7RUE2RGYsaUJBQWlCLEVBN0RGO0VBaUVmLG1CQUFtQixFQWpFSjtFQWtFZixrQkFBa0IsRUFsRUg7RUFtRWYsc0NBQXNDLENBQUMsVUFBRCxDQW5FdkI7RUF1RWYscUJBQXFCLENBQUMsWUFBRCxFQUFlLEtBQWYsQ0F2RU47RUF3RWYsZUFBZSxFQXhFQTtFQXlFZixtQkFBbUIsQ0FBQyxNQUFELENBekVKO0VBMEVmLHdCQUF3QixFQTFFVDtFQTJFZixpQkFBaUIsQ0FBQyxLQUFELENBM0VGO0VBK0VmLHdCQUF3QixDQUFDLGlCQUFELEVBQW9CLGVBQXBCLEVBQXFDLGlCQUFyQyxFQUF3RCxZQUF4RCxDQS9FVDtFQWdGZiwwQkFBMEIsQ0FBQyxVQUFELEVBQWEscUJBQWIsRUFBb0MsV0FBcEMsRUFBaUQsZUFBakQsQ0FoRlg7RUFpRmYsa0JBQWtCLEVBakZIO0VBa0ZmLG9CQUFvQixDQUFDLFlBQUQsRUFBZSxlQUFmLEVBQWdDLFdBQWhDLENBbEZMO0VBc0ZmLGlCQUFpQixFQXRGRjtFQTBGZixrQ0FBa0MsQ0FBQyxTQUFELENBMUZuQjtFQTJGZiwyQkFBMkIsQ0FBQyxhQUFELENBM0ZaO0VBNEZmLGtCQUFrQixFQTVGSDtFQTZGZixpQkFBaUIsRUE3RkY7RUFpR2YsaUJBQWlCO0FBakdGLENBQWpCOztBQXFHQSxTQUFTQyxVQUFULENBQXFCQyxFQUFyQixFQUF5QkMsTUFBekIsRUFBaUNDLE1BQU0sR0FBRyxFQUExQyxFQUE4QztFQUM1QyxPQUFPO0lBQ0xGLEVBREs7SUFFTEMsTUFGSztJQUdMQyxNQUFNLEVBQUVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO01BQ3BCQyxXQUFXLEVBQUVSLFlBRE87TUFFcEJTLHFCQUFxQixFQUFFLElBRkg7TUFHcEJDLG9DQUFvQyxFQUFFLEtBSGxCO01BSXBCQyxrQkFBa0IsRUFBRSxLQUpBO01BS3BCQyxlQUFlLEVBQUUsS0FMRztNQU1wQkMsVUFBVSxFQUFFO0lBTlEsQ0FBZCxFQU9MUixNQVBLO0VBSEgsQ0FBUDtBQVlEOztBQUVELFNBQVNTLGtCQUFULENBQTZCWCxFQUE3QixFQUFpQ0MsTUFBakMsRUFBeUNXLElBQUksR0FBRyxFQUFoRCxFQUFvRDtFQUNsRCxNQUFNQyxVQUFVLEdBQUdmLFFBQVEsQ0FBQ0csTUFBRCxDQUEzQjs7RUFDQSxJQUFJLENBQUNZLFVBQUwsRUFBaUI7SUFDZixNQUFNLElBQUlDLEtBQUosQ0FBVyxxQkFBb0JiLE1BQU8sR0FBdEMsQ0FBTjtFQUNEOztFQUVELE1BQU1DLE1BQU0sR0FBR1csVUFBVSxDQUFDRSxNQUFYLENBQWtCLFVBQVViLE1BQVYsRUFBa0JjLElBQWxCLEVBQXdCO0lBQ3ZEZCxNQUFNLENBQUNjLElBQUQsQ0FBTixHQUFlSixJQUFJLENBQUNJLElBQUQsQ0FBbkI7SUFDQSxPQUFPZCxNQUFQO0VBQ0QsQ0FIYyxFQUdaLEVBSFksQ0FBZjtFQUlBLE9BQU9ILFVBQVUsQ0FBQ0MsRUFBRCxFQUFLQyxNQUFMLEVBQWFDLE1BQWIsQ0FBakI7QUFDRDs7ZUFHY1Msa0IifQ==
