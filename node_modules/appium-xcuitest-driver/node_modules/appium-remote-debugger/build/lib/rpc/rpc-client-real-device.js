"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

var _appiumIosDevice = require("appium-ios-device");

class RpcClientRealDevice extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      udid
    } = opts;
    this.udid = udid;
  }

  async connect() {
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      osVersion: this.platformVersion,
      isSimulator: false,
      verbose: this.logAllCommunication,
      verboseHexDump: this.logAllCommunicationHexDump,
      socketChunkSize: this.socketChunkSize,
      maxFrameLength: this.webInspectorMaxFrameLength
    });
    this.service.listenMessage(this.receive.bind(this));
    this.isConnected = true;
  }

  async disconnect() {
    if (!this.isConnected) {
      return;
    }

    _logger.default.debug('Disconnecting from remote debugger');

    await super.disconnect();
    this.service.close();
    this.isConnected = false;
  }

  async sendMessage(cmd) {
    this.service.sendMessage(cmd);
  }

  async receive(data) {
    if (!this.isConnected) {
      return;
    }

    await this.messageHandler.handleMessage(data);
  }

}

exports.default = RpcClientRealDevice;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3JwYy9ycGMtY2xpZW50LXJlYWwtZGV2aWNlLmpzIiwibmFtZXMiOlsiUnBjQ2xpZW50UmVhbERldmljZSIsIlJwY0NsaWVudCIsImNvbnN0cnVjdG9yIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsInNob3VsZENoZWNrRm9yVGFyZ2V0IiwidWRpZCIsImNvbm5lY3QiLCJzZXJ2aWNlIiwic2VydmljZXMiLCJzdGFydFdlYkluc3BlY3RvclNlcnZpY2UiLCJvc1ZlcnNpb24iLCJwbGF0Zm9ybVZlcnNpb24iLCJpc1NpbXVsYXRvciIsInZlcmJvc2UiLCJsb2dBbGxDb21tdW5pY2F0aW9uIiwidmVyYm9zZUhleER1bXAiLCJsb2dBbGxDb21tdW5pY2F0aW9uSGV4RHVtcCIsInNvY2tldENodW5rU2l6ZSIsIm1heEZyYW1lTGVuZ3RoIiwid2ViSW5zcGVjdG9yTWF4RnJhbWVMZW5ndGgiLCJsaXN0ZW5NZXNzYWdlIiwicmVjZWl2ZSIsImJpbmQiLCJpc0Nvbm5lY3RlZCIsImRpc2Nvbm5lY3QiLCJsb2ciLCJkZWJ1ZyIsImNsb3NlIiwic2VuZE1lc3NhZ2UiLCJjbWQiLCJkYXRhIiwibWVzc2FnZUhhbmRsZXIiLCJoYW5kbGVNZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL3JwYy9ycGMtY2xpZW50LXJlYWwtZGV2aWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBScGNDbGllbnQgZnJvbSAnLi9ycGMtY2xpZW50JztcbmltcG9ydCB7IHNlcnZpY2VzIH0gZnJvbSAnYXBwaXVtLWlvcy1kZXZpY2UnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJwY0NsaWVudFJlYWxEZXZpY2UgZXh0ZW5kcyBScGNDbGllbnQge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7XG4gICAgICBzaG91bGRDaGVja0ZvclRhcmdldDogZmFsc2UsXG4gICAgfSwgb3B0cykpO1xuXG4gICAgY29uc3Qge1xuICAgICAgdWRpZCxcbiAgICB9ID0gb3B0cztcblxuICAgIHRoaXMudWRpZCA9IHVkaWQ7XG4gIH1cblxuICBhc3luYyBjb25uZWN0ICgpIHtcbiAgICB0aGlzLnNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydFdlYkluc3BlY3RvclNlcnZpY2UodGhpcy51ZGlkLCB7XG4gICAgICBvc1ZlcnNpb246IHRoaXMucGxhdGZvcm1WZXJzaW9uLFxuICAgICAgaXNTaW11bGF0b3I6IGZhbHNlLFxuICAgICAgdmVyYm9zZTogdGhpcy5sb2dBbGxDb21tdW5pY2F0aW9uLFxuICAgICAgdmVyYm9zZUhleER1bXA6IHRoaXMubG9nQWxsQ29tbXVuaWNhdGlvbkhleER1bXAsXG4gICAgICBzb2NrZXRDaHVua1NpemU6IHRoaXMuc29ja2V0Q2h1bmtTaXplLFxuICAgICAgbWF4RnJhbWVMZW5ndGg6IHRoaXMud2ViSW5zcGVjdG9yTWF4RnJhbWVMZW5ndGgsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNlcnZpY2UubGlzdGVuTWVzc2FnZSh0aGlzLnJlY2VpdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gIH1cblxuICBhc3luYyBkaXNjb25uZWN0ICgpIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2cuZGVidWcoJ0Rpc2Nvbm5lY3RpbmcgZnJvbSByZW1vdGUgZGVidWdnZXInKTtcbiAgICBhd2FpdCBzdXBlci5kaXNjb25uZWN0KCk7XG4gICAgdGhpcy5zZXJ2aWNlLmNsb3NlKCk7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgc2VuZE1lc3NhZ2UgKGNtZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICB0aGlzLnNlcnZpY2Uuc2VuZE1lc3NhZ2UoY21kKTtcbiAgfVxuXG4gIGFzeW5jIHJlY2VpdmUgKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5tZXNzYWdlSGFuZGxlci5oYW5kbGVNZXNzYWdlKGRhdGEpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR2UsTUFBTUEsbUJBQU4sU0FBa0NDLGtCQUFsQyxDQUE0QztFQUN6REMsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhO0lBQ3RCLE1BQU1DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO01BQ2xCQyxvQkFBb0IsRUFBRTtJQURKLENBQWQsRUFFSEgsSUFGRyxDQUFOO0lBSUEsTUFBTTtNQUNKSTtJQURJLElBRUZKLElBRko7SUFJQSxLQUFLSSxJQUFMLEdBQVlBLElBQVo7RUFDRDs7RUFFWSxNQUFQQyxPQUFPLEdBQUk7SUFDZixLQUFLQyxPQUFMLEdBQWUsTUFBTUMsMEJBQVNDLHdCQUFULENBQWtDLEtBQUtKLElBQXZDLEVBQTZDO01BQ2hFSyxTQUFTLEVBQUUsS0FBS0MsZUFEZ0Q7TUFFaEVDLFdBQVcsRUFBRSxLQUZtRDtNQUdoRUMsT0FBTyxFQUFFLEtBQUtDLG1CQUhrRDtNQUloRUMsY0FBYyxFQUFFLEtBQUtDLDBCQUoyQztNQUtoRUMsZUFBZSxFQUFFLEtBQUtBLGVBTDBDO01BTWhFQyxjQUFjLEVBQUUsS0FBS0M7SUFOMkMsQ0FBN0MsQ0FBckI7SUFTQSxLQUFLWixPQUFMLENBQWFhLGFBQWIsQ0FBMkIsS0FBS0MsT0FBTCxDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQTNCO0lBQ0EsS0FBS0MsV0FBTCxHQUFtQixJQUFuQjtFQUNEOztFQUVlLE1BQVZDLFVBQVUsR0FBSTtJQUNsQixJQUFJLENBQUMsS0FBS0QsV0FBVixFQUF1QjtNQUNyQjtJQUNEOztJQUVERSxnQkFBSUMsS0FBSixDQUFVLG9DQUFWOztJQUNBLE1BQU0sTUFBTUYsVUFBTixFQUFOO0lBQ0EsS0FBS2pCLE9BQUwsQ0FBYW9CLEtBQWI7SUFDQSxLQUFLSixXQUFMLEdBQW1CLEtBQW5CO0VBQ0Q7O0VBRWdCLE1BQVhLLFdBQVcsQ0FBRUMsR0FBRixFQUFPO0lBQ3RCLEtBQUt0QixPQUFMLENBQWFxQixXQUFiLENBQXlCQyxHQUF6QjtFQUNEOztFQUVZLE1BQVBSLE9BQU8sQ0FBRVMsSUFBRixFQUFRO0lBQ25CLElBQUksQ0FBQyxLQUFLUCxXQUFWLEVBQXVCO01BQ3JCO0lBQ0Q7O0lBQ0QsTUFBTSxLQUFLUSxjQUFMLENBQW9CQyxhQUFwQixDQUFrQ0YsSUFBbEMsQ0FBTjtFQUNEOztBQS9Dd0QifQ==
