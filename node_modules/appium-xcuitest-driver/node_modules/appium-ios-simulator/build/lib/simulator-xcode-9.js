"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-8"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _support = require("@appium/support");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _utils = require("./utils.js");

var _defaultsUtils = require("./defaults-utils");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _events = require("events");

var _appiumXcode = require("appium-xcode");

var _teen_process = require("teen_process");

const SIMULATOR_SHUTDOWN_TIMEOUT = 15 * 1000;
const startupLock = new _asyncLock.default();
const preferencesPlistGuard = new _asyncLock.default();
const ENROLLMENT_NOTIFICATION_RECEIVER = 'com.apple.BiometricKit.enrollmentChanged';
const DOMAIN_KEYBOARD_PREFERENCES = 'com.apple.keyboard.preferences';

function compileSimulatorPreferences(opts = {}) {
  const {
    connectHardwareKeyboard,
    tracePointer,
    pasteboardAutomaticSync,
    scaleFactor
  } = opts;
  const commonPreferences = {
    RotateWindowWhenSignaledByGuest: true,
    StartLastDeviceOnLaunch: false,
    DetachOnWindowClose: false,
    AttachBootedOnStart: true
  };
  const devicePreferences = opts.devicePreferences ? _lodash.default.cloneDeep(opts.devicePreferences) : {};

  if (scaleFactor) {
    devicePreferences.SimulatorWindowLastScale = parseFloat(scaleFactor);
  }

  if (_lodash.default.isBoolean(connectHardwareKeyboard) || _lodash.default.isNil(connectHardwareKeyboard)) {
    devicePreferences.ConnectHardwareKeyboard = connectHardwareKeyboard !== null && connectHardwareKeyboard !== void 0 ? connectHardwareKeyboard : false;
    commonPreferences.ConnectHardwareKeyboard = connectHardwareKeyboard !== null && connectHardwareKeyboard !== void 0 ? connectHardwareKeyboard : false;
  }

  if (_lodash.default.isBoolean(tracePointer)) {
    commonPreferences.ShowSingleTouches = tracePointer;
    commonPreferences.ShowPinches = tracePointer;
    commonPreferences.ShowPinchPivotPoint = tracePointer;
    commonPreferences.HighlightEdgeGestures = tracePointer;
  }

  switch (_lodash.default.lowerCase(pasteboardAutomaticSync)) {
    case 'on':
      commonPreferences.PasteboardAutomaticSync = true;
      break;

    case 'off':
      commonPreferences.PasteboardAutomaticSync = false;
      break;

    case 'system':
      break;

    default:
      _logger.default.info(`['on', 'off' or 'system'] are available as the pasteboard automatic sync option. Defaulting to 'off'`);

      commonPreferences.PasteboardAutomaticSync = false;
  }

  return [devicePreferences, commonPreferences];
}

class SimulatorXcode9 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async run(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaultsDeep(opts, {
      isHeadless: false,
      startupTimeout: this.startupTimeout
    });

    const [devicePreferences, commonPreferences] = compileSimulatorPreferences(opts);
    await this.updatePreferences(devicePreferences, commonPreferences);
    const timer = new _support.timing.Timer().start();
    const shouldWaitForBoot = await startupLock.acquire(this.uiClientBundleId, async () => {
      const isServerRunning = await this.isRunning();
      const uiClientPid = await this.getUIClientPid();

      if (opts.isHeadless) {
        if (isServerRunning && !uiClientPid) {
          _logger.default.info(`Simulator with UDID '${this.udid}' is already booted in headless mode.`);

          return false;
        }

        if (await this.killUIClient({
          pid: uiClientPid
        })) {
          _logger.default.info(`Detected the Simulator UI client was running and killed it. Verifying the current Simulator state`);
        }

        try {
          await (0, _asyncbox.waitForCondition)(async () => await this.isShutdown(), {
            waitMs: 5000,
            intervalMs: 100
          });
        } catch (e) {
          if (!(await this.isRunning())) {
            throw new Error(`Simulator with UDID '${this.udid}' cannot be transitioned to headless mode`);
          }

          return false;
        }

        _logger.default.info(`Booting Simulator with UDID '${this.udid}' in headless mode. ` + `All UI-related capabilities are going to be ignored`);

        await this.boot();
      } else {
        if (isServerRunning && uiClientPid) {
          _logger.default.info(`Both Simulator with UDID '${this.udid}' and the UI client are currently running`);

          return false;
        }

        if (isServerRunning) {
          _logger.default.info(`Simulator '${this.udid}' is booted while its UI is not visible. ` + `Trying to restart it with the Simulator window visible`);

          await this.shutdown({
            timeout: SIMULATOR_SHUTDOWN_TIMEOUT
          });
        }

        await this.launchWindow(uiClientPid, opts);
      }

      return true;
    });

    if (shouldWaitForBoot) {
      await this.waitForBoot(opts.startupTimeout);

      _logger.default.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);
    }

    (async () => {
      try {
        await this.disableKeyboardIntroduction();
      } catch (e) {
        _logger.default.info(`Cannot disable Simulator keyboard introduction. Original error: ${e.message}`);
      }
    })();
  }

  async startUIClient(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaultsDeep(opts, {
      startupTimeout: this.startupTimeout
    });

    const simulatorApp = _path.default.resolve(await (0, _appiumXcode.getPath)(), 'Applications', this.simulatorApp);

    const args = ['-Fn', simulatorApp];

    _logger.default.info(`Starting Simulator UI: ${_support.util.quote(['open', ...args])}`);

    try {
      await (0, _teen_process.exec)('open', args, {
        timeout: opts.startupTimeout
      });
    } catch (err) {
      throw new Error(`Got an unexpected error while opening Simulator UI: ` + err.stderr || err.stdout || err.message);
    }
  }

  async disableKeyboardIntroduction() {
    const argChunks = (0, _defaultsUtils.generateDefaultsCommandArgs)({
      DidShowContinuousPathIntroduction: 1
    }, true);
    await _bluebird.default.all(argChunks.map(args => this.simctl.spawnProcess(['defaults', 'write', DOMAIN_KEYBOARD_PREFERENCES, ...args])));
  }

  async launchWindow(isUiClientRunning, opts = {}) {
    await this.boot();

    if (!isUiClientRunning) {
      await this.startUIClient(opts);
    }
  }

  async boot() {
    const bootEventsEmitter = new _events.EventEmitter();
    await this.simctl.startBootMonitor({
      onError: err => bootEventsEmitter.emit('failure', err),
      onFinished: () => bootEventsEmitter.emit('finish'),
      shouldPreboot: true
    });

    try {
      await new _bluebird.default((resolve, reject) => {
        setTimeout(resolve, 3000);
        bootEventsEmitter.once('failure', err => {
          if (_lodash.default.includes(err === null || err === void 0 ? void 0 : err.message, 'state: Booted')) {
            resolve();
          } else {
            reject(err);
          }
        });
        bootEventsEmitter.once('finish', resolve);
      });
    } finally {
      bootEventsEmitter.removeAllListeners();
    }
  }

  verifyDevicePreferences(prefs = {}) {
    if (_lodash.default.isEmpty(prefs)) {
      return;
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowLastScale)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowLastScale) || prefs.SimulatorWindowLastScale <= 0) {
        _logger.default.errorAndThrow(`SimulatorWindowLastScale is expected to be a positive float value. ` + `'${prefs.SimulatorWindowLastScale}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowCenter)) {
      const verificationPattern = /{-?\d+(\.\d+)?,-?\d+(\.\d+)?}/;

      if (!_lodash.default.isString(prefs.SimulatorWindowCenter) || !verificationPattern.test(prefs.SimulatorWindowCenter)) {
        _logger.default.errorAndThrow(`SimulatorWindowCenter is expected to match "{floatXPosition,floatYPosition}" format (without spaces). ` + `'${prefs.SimulatorWindowCenter}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowOrientation)) {
      const acceptableValues = ['Portrait', 'LandscapeLeft', 'PortraitUpsideDown', 'LandscapeRight'];

      if (acceptableValues.indexOf(prefs.SimulatorWindowOrientation) === -1) {
        _logger.default.errorAndThrow(`SimulatorWindowOrientation is expected to be one of ${acceptableValues}. ` + `'${prefs.SimulatorWindowOrientation}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowRotationAngle)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowRotationAngle)) {
        _logger.default.errorAndThrow(`SimulatorWindowRotationAngle is expected to be a valid number. ` + `'${prefs.SimulatorWindowRotationAngle}' is assigned instead.`);
      }
    }
  }

  async updatePreferences(devicePrefs = {}, commonPrefs = {}) {
    if (!_lodash.default.isEmpty(devicePrefs)) {
      _logger.default.debug(`Setting preferences of ${this.udid} Simulator to ${JSON.stringify(devicePrefs)}`);
    }

    if (!_lodash.default.isEmpty(commonPrefs)) {
      _logger.default.debug(`Setting common Simulator preferences to ${JSON.stringify(commonPrefs)}`);
    }

    const homeFolderPath = process.env.HOME;

    if (!homeFolderPath) {
      _logger.default.warn(`Cannot get the path to HOME folder from the process environment. ` + `Ignoring Simulator preferences update.`);

      return false;
    }

    this.verifyDevicePreferences(devicePrefs);

    const plistPath = _path.default.resolve(homeFolderPath, 'Library', 'Preferences', 'com.apple.iphonesimulator.plist');

    return await preferencesPlistGuard.acquire(SimulatorXcode9.name, async () => {
      const defaults = new _defaultsUtils.NSUserDefaults(plistPath);

      const prefsToUpdate = _lodash.default.clone(commonPrefs);

      try {
        if (!_lodash.default.isEmpty(devicePrefs)) {
          let existingDevicePrefs;
          const udidKey = this.udid.toUpperCase();

          if (await _support.fs.exists(plistPath)) {
            const currentPlistContent = await defaults.asJson();

            if (_lodash.default.isPlainObject(currentPlistContent.DevicePreferences) && _lodash.default.isPlainObject(currentPlistContent.DevicePreferences[udidKey])) {
              existingDevicePrefs = currentPlistContent.DevicePreferences[udidKey];
            }
          }

          Object.assign(prefsToUpdate, {
            DevicePreferences: {
              [udidKey]: Object.assign({}, existingDevicePrefs || {}, devicePrefs)
            }
          });
        }

        await defaults.update(prefsToUpdate);

        _logger.default.debug(`Updated ${this.udid} Simulator preferences at '${plistPath}' with ` + JSON.stringify(prefsToUpdate));

        return true;
      } catch (e) {
        _logger.default.warn(`Cannot update ${this.udid} Simulator preferences at '${plistPath}'. ` + `Try to delete the file manually in order to reset it. Original error: ${e.message}`);

        return false;
      }
    });
  }

  async clean() {
    _logger.default.info(`Cleaning simulator ${this.udid}`);

    await this.simctl.eraseDevice(10000);
  }

  async _activateWindow() {
    let selfName;
    let selfSdk;
    let bootedDevicesCount = 0;

    for (const [sdk, deviceArr] of _lodash.default.toPairs(await this.simctl.getDevices())) {
      for (const {
        state,
        udid,
        name
      } of deviceArr) {
        if (state === 'Booted') {
          bootedDevicesCount++;
        }

        if (!selfName && udid === this.udid) {
          selfSdk = sdk;
          selfName = name;
        }
      }
    }

    if (bootedDevicesCount < 2) {
      return await super._activateWindow();
    }

    return `
      tell application "System Events"
        tell process "Simulator"
          set frontmost to false
          set frontmost to true
          click (menu item 1 where (its name contains "${selfName} " and its name contains "${selfSdk}")) of menu 1 of menu bar item "Window" of menu bar 1
        end tell
      end tell
    `;
  }

  async isBiometricEnrolled() {
    const {
      stdout
    } = await this.simctl.spawnProcess(['notifyutil', '-g', ENROLLMENT_NOTIFICATION_RECEIVER]);
    const match = new RegExp(`${_lodash.default.escapeRegExp(ENROLLMENT_NOTIFICATION_RECEIVER)}\\s+([01])`).exec(stdout);

    if (!match) {
      throw new Error(`Cannot parse biometric enrollment state from '${stdout}'`);
    }

    _logger.default.info(`Current biometric enrolled state for ${this.udid} Simulator: ${match[1]}`);

    return match[1] === '1';
  }

  async enrollBiometric(isEnabled = true) {
    _logger.default.debug(`Setting biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);

    await this.simctl.spawnProcess(['notifyutil', '-s', ENROLLMENT_NOTIFICATION_RECEIVER, isEnabled ? '1' : '0']);
    await this.simctl.spawnProcess(['notifyutil', '-p', ENROLLMENT_NOTIFICATION_RECEIVER]);

    if ((await this.isBiometricEnrolled()) !== isEnabled) {
      throw new Error(`Cannot set biometric enrolled state for ${this.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);
    }
  }

  async sendBiometricMatch(shouldMatch = true, biometricName = 'touchId') {
    const domainComponent = (0, _utils.toBiometricDomainComponent)(biometricName);
    const domain = `com.apple.BiometricKit_Sim.${domainComponent}.${shouldMatch ? '' : 'no'}match`;
    await this.simctl.spawnProcess(['notifyutil', '-p', domain]);

    _logger.default.info(`Sent notification ${domain} to ${shouldMatch ? 'match' : 'not match'} ${biometricName} biometric ` + `for ${this.udid} Simulator`);
  }

  async getLaunchDaemonsRoot() {
    const devRoot = await (0, _utils.getDeveloperRoot)();
    return _path.default.resolve(devRoot, 'Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/LaunchDaemons');
  }

  async configureLocalization(opts = {}) {
    if (_lodash.default.isEmpty(opts)) {
      return false;
    }

    const {
      language,
      locale,
      keyboard
    } = opts;
    const globalPrefs = {};
    let keyboardId = null;

    if (_lodash.default.isPlainObject(keyboard)) {
      const {
        name,
        layout,
        hardware
      } = keyboard;

      if (!name) {
        throw new Error(`The 'keyboard' field must have a valid name set`);
      }

      if (!layout) {
        throw new Error(`The 'keyboard' field must have a valid layout set`);
      }

      keyboardId = `${name}@sw=${layout}`;

      if (hardware) {
        keyboardId += `;@hw=${hardware}`;
      }

      globalPrefs.AppleKeyboards = [keyboardId];
    }

    if (_lodash.default.isPlainObject(language)) {
      const {
        name
      } = language;

      if (!name) {
        throw new Error(`The 'language' field must have a valid name set`);
      }

      globalPrefs.AppleLanguages = [name];
    }

    if (_lodash.default.isPlainObject(locale)) {
      const {
        name,
        calendar
      } = locale;

      if (!name) {
        throw new Error(`The 'locale' field must have a valid name set`);
      }

      let localeId = name;

      if (calendar) {
        localeId += `@calendar=${calendar}`;
      }

      globalPrefs.AppleLocale = localeId;
    }

    if (_lodash.default.isEmpty(globalPrefs)) {
      return false;
    }

    const argChunks = (0, _defaultsUtils.generateDefaultsCommandArgs)(globalPrefs, true);
    await _bluebird.default.all(argChunks.map(args => this.simctl.spawnProcess(['defaults', 'write', '.GlobalPreferences.plist', ...args])));

    if (keyboardId) {
      const argChunks = (0, _defaultsUtils.generateDefaultsCommandArgs)({
        KeyboardsCurrentAndNext: [keyboardId],
        KeyboardLastUsed: keyboardId,
        KeyboardLastUsedForLanguage: {
          [keyboard.name]: keyboardId
        }
      }, true);
      await _bluebird.default.all(argChunks.map(args => this.simctl.spawnProcess(['defaults', 'write', 'com.apple.Preferences', ...args])));
    }

    return true;
  }

}

var _default = SimulatorXcode9;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
