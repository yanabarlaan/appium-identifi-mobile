"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9.3"));

var _support = require("@appium/support");

var _asyncbox = require("asyncbox");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

class SimulatorXcode10 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);

      if (!appContainer.endsWith('.app')) {
        return false;
      }

      return await _support.fs.exists(appContainer);
    } catch (err) {
      try {
        const info = await this.simctl.appInfo(bundleId);
        return info.includes('ApplicationType');
      } catch (ign) {}
    }

    return false;
  }

  async openUrl(url) {
    if (!(await this.isRunning())) {
      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
    }

    const timer = new _support.timing.Timer().start();
    await this.simctl.openUrl(url);
    let psError;

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        let procList = [];

        try {
          procList = await this.ps();
          psError = null;
        } catch (e) {
          _logger.default.debug(e.message);

          psError = e;
        }

        return procList.some(({
          name
        }) => name === _utils.MOBILE_SAFARI_BUNDLE_ID);
      }, {
        waitMs: _utils.SAFARI_STARTUP_TIMEOUT,
        intervalMs: 500
      });
    } catch (err) {
      const secondsElapsed = timer.getDuration().asSeconds;

      if (psError) {
        _logger.default.warn(`Mobile Safari process existence cannot be verified after ${secondsElapsed.toFixed(3)}s. ` + `Original error: ${psError.message}`);

        _logger.default.warn('Continuing anyway');
      } else {
        throw new Error(`Mobile Safari cannot open '${url}' after ${secondsElapsed.toFixed(3)}s. ` + `Its process ${_utils.MOBILE_SAFARI_BUNDLE_ID} does not exist in the list of Simulator processes`);
      }
    }

    _logger.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }

}

var _default = SimulatorXcode10;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3NpbXVsYXRvci14Y29kZS0xMC5qcyIsIm5hbWVzIjpbIlNpbXVsYXRvclhjb2RlMTAiLCJTaW11bGF0b3JYY29kZTkzIiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwieGNvZGVWZXJzaW9uIiwiaXNBcHBJbnN0YWxsZWQiLCJidW5kbGVJZCIsImFwcENvbnRhaW5lciIsInNpbWN0bCIsImdldEFwcENvbnRhaW5lciIsImVuZHNXaXRoIiwiZnMiLCJleGlzdHMiLCJlcnIiLCJpbmZvIiwiYXBwSW5mbyIsImluY2x1ZGVzIiwiaWduIiwib3BlblVybCIsInVybCIsImlzUnVubmluZyIsIkVycm9yIiwidGltZXIiLCJ0aW1pbmciLCJUaW1lciIsInN0YXJ0IiwicHNFcnJvciIsIndhaXRGb3JDb25kaXRpb24iLCJwcm9jTGlzdCIsInBzIiwiZSIsImxvZyIsImRlYnVnIiwibWVzc2FnZSIsInNvbWUiLCJuYW1lIiwiTU9CSUxFX1NBRkFSSV9CVU5ETEVfSUQiLCJ3YWl0TXMiLCJTQUZBUklfU1RBUlRVUF9USU1FT1VUIiwiaW50ZXJ2YWxNcyIsInNlY29uZHNFbGFwc2VkIiwiZ2V0RHVyYXRpb24iLCJhc1NlY29uZHMiLCJ3YXJuIiwidG9GaXhlZCJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtMTAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlOTMgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOS4zJztcbmltcG9ydCB7IGZzLCB0aW1pbmcgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IE1PQklMRV9TQUZBUklfQlVORExFX0lELCBTQUZBUklfU1RBUlRVUF9USU1FT1VUIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5jbGFzcyBTaW11bGF0b3JYY29kZTEwIGV4dGVuZHMgU2ltdWxhdG9yWGNvZGU5MyB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCB4Y29kZVZlcnNpb24pIHtcbiAgICBzdXBlcih1ZGlkLCB4Y29kZVZlcnNpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmeSB3aGV0aGVyIHRoZSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uIGlzIGluc3RhbGxlZCBvbiBTaW11bGF0b3IuXG4gICAqIEBvdmVycmlkZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBiZSBjaGVja2VkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiBhcHBsaWNhdGlvbiBpcyBpbnN0YWxsZWQuXG4gICAqL1xuICBhc3luYyBpc0FwcEluc3RhbGxlZCAoYnVuZGxlSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYXBwQ29udGFpbmVyID0gYXdhaXQgdGhpcy5zaW1jdGwuZ2V0QXBwQ29udGFpbmVyKGJ1bmRsZUlkKTtcbiAgICAgIGlmICghYXBwQ29udGFpbmVyLmVuZHNXaXRoKCcuYXBwJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhhcHBDb250YWluZXIpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gZ2V0X2FwcF9jb250YWluZXIgc3ViY29tbWFuZCBmYWlscyBmb3Igc3lzdGVtIGFwcGxpY2F0aW9ucyxcbiAgICAgIC8vIHNvIHdlIHRyeSB0aGUgaGlkZGVuIGFwcGluZm8gc3ViY29tbWFuZCwgd2hpY2ggcHJpbnRzIGNvcnJlY3QgaW5mbyBmb3JcbiAgICAgIC8vIHN5c3RlbS9oaWRkZW4gYXBwc1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHRoaXMuc2ltY3RsLmFwcEluZm8oYnVuZGxlSWQpO1xuICAgICAgICByZXR1cm4gaW5mby5pbmNsdWRlcygnQXBwbGljYXRpb25UeXBlJyk7XG4gICAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIG9wZW5VcmwgKHVybCkge1xuICAgIGlmICghYXdhaXQgdGhpcy5pc1J1bm5pbmcoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcmllZCB0byBvcGVuICcke3VybH0nLCBidXQgU2ltdWxhdG9yIGlzIG5vdCBpbiBCb290ZWQgc3RhdGVgKTtcbiAgICB9XG4gICAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5vcGVuVXJsKHVybCk7XG4gICAgbGV0IHBzRXJyb3I7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgcHJvY0xpc3QgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwcm9jTGlzdCA9IGF3YWl0IHRoaXMucHMoKTtcbiAgICAgICAgICBwc0Vycm9yID0gbnVsbDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhlLm1lc3NhZ2UpO1xuICAgICAgICAgIHBzRXJyb3IgPSBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9jTGlzdC5zb21lKCh7bmFtZX0pID0+IG5hbWUgPT09IE1PQklMRV9TQUZBUklfQlVORExFX0lEKTtcbiAgICAgIH0sIHtcbiAgICAgICAgd2FpdE1zOiBTQUZBUklfU1RBUlRVUF9USU1FT1VULFxuICAgICAgICBpbnRlcnZhbE1zOiA1MDAsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IHNlY29uZHNFbGFwc2VkID0gdGltZXIuZ2V0RHVyYXRpb24oKS5hc1NlY29uZHM7XG4gICAgICBpZiAocHNFcnJvcikge1xuICAgICAgICBsb2cud2FybihgTW9iaWxlIFNhZmFyaSBwcm9jZXNzIGV4aXN0ZW5jZSBjYW5ub3QgYmUgdmVyaWZpZWQgYWZ0ZXIgJHtzZWNvbmRzRWxhcHNlZC50b0ZpeGVkKDMpfXMuIGAgK1xuICAgICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtwc0Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIGxvZy53YXJuKCdDb250aW51aW5nIGFueXdheScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNb2JpbGUgU2FmYXJpIGNhbm5vdCBvcGVuICcke3VybH0nIGFmdGVyICR7c2Vjb25kc0VsYXBzZWQudG9GaXhlZCgzKX1zLiBgICtcbiAgICAgICAgICBgSXRzIHByb2Nlc3MgJHtNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRH0gZG9lcyBub3QgZXhpc3QgaW4gdGhlIGxpc3Qgb2YgU2ltdWxhdG9yIHByb2Nlc3Nlc2ApO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2cuZGVidWcoYFNhZmFyaSBzdWNjZXNzZnVsbHkgb3BlbmVkICcke3VybH0nIGluICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc1NlY29uZHMudG9GaXhlZCgzKX1zYCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdG9yWGNvZGUxMDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxnQkFBTixTQUErQkMsdUJBQS9CLENBQWdEO0VBQzlDQyxXQUFXLENBQUVDLElBQUYsRUFBUUMsWUFBUixFQUFzQjtJQUMvQixNQUFNRCxJQUFOLEVBQVlDLFlBQVo7RUFDRDs7RUFTbUIsTUFBZEMsY0FBYyxDQUFFQyxRQUFGLEVBQVk7SUFDOUIsSUFBSTtNQUNGLE1BQU1DLFlBQVksR0FBRyxNQUFNLEtBQUtDLE1BQUwsQ0FBWUMsZUFBWixDQUE0QkgsUUFBNUIsQ0FBM0I7O01BQ0EsSUFBSSxDQUFDQyxZ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
