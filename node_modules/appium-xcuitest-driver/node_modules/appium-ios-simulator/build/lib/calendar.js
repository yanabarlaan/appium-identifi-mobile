"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _tccDb = _interopRequireDefault(require("./tcc-db"));

class Calendar {
  constructor(xcodeVersion, sharedResourcesDir) {
    this.xcodeVersion = xcodeVersion;
    this.tccDb = new _tccDb.default(xcodeVersion, sharedResourcesDir);
  }

  async getCalendarRowCount(bundleID) {
    const count = await this.tccDb.execQuery(`SELECT count(*) FROM access WHERE client='?' AND service='kTCCServiceCalendar';`, bundleID);
    return parseInt(count.split('=')[1], 10);
  }

  async hasCalendarAccess(bundleID) {
    const count = await this.tccDb.execQuery(`SELECT count(*) FROM access WHERE client='?' AND allowed=1 AND service='kTCCServiceCalendar';`, bundleID);
    return parseInt(count.split('=')[1], 10) > 0;
  }

  async enableCalendarAccess(bundleID) {
    let query;

    if ((await this.getCalendarRowCount(bundleID)) > 0) {
      query = `UPDATE 'access' SET
        service='kTCCServiceCalendar',
        client_type=0,
        allowed=1,
        prompt_count=1,
        csreq=0
      WHERE client='?' AND service='kTCCServiceCalendar'`;
    } else {
      let count = this.columnCount;

      if (!_lodash.default.isNumber(this.columnCount)) {
        try {
          const stdout = await this.tccDb.execQuery(`pragma table_info('access')`);
          count = this.columnCount = stdout.trim().split('cid').filter(record => !_lodash.default.isEmpty(record)).length;
        } catch (err) {
          count = this.xcodeVersion.major < 10 ? 7 : 11;

          _logger.default.warn(`Unable to find Calendar access column count: ${err.message}`);
        }
      }

      query = `INSERT INTO 'access' VALUES ('kTCCServiceCalendar', '?', 0, 1, 1, ${_lodash.default.range(0, count - 5, 0).join(', ')});`;
    }

    await this.tccDb.execQuery(query, bundleID);
  }

  async disableCalendarAccess(bundleID) {
    if ((await this.getCalendarRowCount(bundleID)) > 0) {
      await this.tccDb.execQuery(`DELETE FROM 'access' WHERE client='?' AND service='kTCCServiceCalendar'`, bundleID);
    }
  }

}

var _default = Calendar;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2NhbGVuZGFyLmpzIiwibmFtZXMiOlsiQ2FsZW5kYXIiLCJjb25zdHJ1Y3RvciIsInhjb2RlVmVyc2lvbiIsInNoYXJlZFJlc291cmNlc0RpciIsInRjY0RiIiwiVENDREIiLCJnZXRDYWxlbmRhclJvd0NvdW50IiwiYnVuZGxlSUQiLCJjb3VudCIsImV4ZWNRdWVyeSIsInBhcnNlSW50Iiwic3BsaXQiLCJoYXNDYWxlbmRhckFjY2VzcyIsImVuYWJsZUNhbGVuZGFyQWNjZXNzIiwicXVlcnkiLCJjb2x1bW5Db3VudCIsIl8iLCJpc051bWJlciIsInN0ZG91dCIsInRyaW0iLCJmaWx0ZXIiLCJyZWNvcmQiLCJpc0VtcHR5IiwibGVuZ3RoIiwiZXJyIiwibWFqb3IiLCJsb2ciLCJ3YXJuIiwibWVzc2FnZSIsInJhbmdlIiwiam9pbiIsImRpc2FibGVDYWxlbmRhckFjY2VzcyJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9jYWxlbmRhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgVENDREIgZnJvbSAnLi90Y2MtZGInO1xuXG5cbmNsYXNzIENhbGVuZGFyIHtcblxuICBjb25zdHJ1Y3RvciAoeGNvZGVWZXJzaW9uLCBzaGFyZWRSZXNvdXJjZXNEaXIpIHtcbiAgICB0aGlzLnhjb2RlVmVyc2lvbiA9IHhjb2RlVmVyc2lvbjtcbiAgICB0aGlzLnRjY0RiID0gbmV3IFRDQ0RCKHhjb2RlVmVyc2lvbiwgc2hhcmVkUmVzb3VyY2VzRGlyKTtcbiAgfVxuXG4gIGFzeW5jIGdldENhbGVuZGFyUm93Q291bnQgKGJ1bmRsZUlEKSB7XG4gICAgY29uc3QgY291bnQgPSBhd2FpdCB0aGlzLnRjY0RiLmV4ZWNRdWVyeShgU0VMRUNUIGNvdW50KCopIEZST00gYWNjZXNzIFdIRVJFIGNsaWVudD0nPycgQU5EIHNlcnZpY2U9J2tUQ0NTZXJ2aWNlQ2FsZW5kYXInO2AsIGJ1bmRsZUlEKTtcbiAgICByZXR1cm4gcGFyc2VJbnQoY291bnQuc3BsaXQoJz0nKVsxXSwgMTApO1xuICB9XG5cbiAgYXN5bmMgaGFzQ2FsZW5kYXJBY2Nlc3MgKGJ1bmRsZUlEKSB7XG4gICAgY29uc3QgY291bnQgPSBhd2FpdCB0aGlzLnRjY0RiLmV4ZWNRdWVyeShgU0VMRUNUIGNvdW50KCopIEZST00gYWNjZXNzIFdIRVJFIGNsaWVudD0nPycgQU5EIGFsbG93ZWQ9MSBBTkQgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcic7YCwgYnVuZGxlSUQpO1xuICAgIHJldHVybiBwYXJzZUludChjb3VudC5zcGxpdCgnPScpWzFdLCAxMCkgPiAwO1xuICB9XG5cbiAgYXN5bmMgZW5hYmxlQ2FsZW5kYXJBY2Nlc3MgKGJ1bmRsZUlEKSB7XG4gICAgbGV0IHF1ZXJ5O1xuICAgIGlmICgoYXdhaXQgdGhpcy5nZXRDYWxlbmRhclJvd0NvdW50KGJ1bmRsZUlEKSkgPiAwKSB7XG4gICAgICBxdWVyeSA9IGBVUERBVEUgJ2FjY2VzcycgU0VUXG4gICAgICAgIHNlcnZpY2U9J2tUQ0NTZXJ2aWNlQ2FsZW5kYXInLFxuICAgICAgICBjbGllbnRfdHlwZT0wLFxuICAgICAgICBhbGxvd2VkPTEsXG4gICAgICAgIHByb21wdF9jb3VudD0xLFxuICAgICAgICBjc3JlcT0wXG4gICAgICBXSEVSRSBjbGllbnQ9Jz8nIEFORCBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJ2A7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjb3VudCA9IHRoaXMuY29sdW1uQ291bnQ7XG4gICAgICBpZiAoIV8uaXNOdW1iZXIodGhpcy5jb2x1bW5Db3VudCkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBzdGRvdXQgPSBhd2FpdCB0aGlzLnRjY0RiLmV4ZWNRdWVyeShgcHJhZ21hIHRhYmxlX2luZm8oJ2FjY2VzcycpYCk7XG4gICAgICAgICAgLy8gc3Rkb3V0IGhhcyBhIG51bWJlciBvZiByZWNvcmRzLCBlYWNoIHN0YXJ0aW5nIHdpdGggYGNpZGBcbiAgICAgICAgICAvLyAgICAgICBjaWQgPSAwXG4gICAgICAgICAgLy8gICAgICAgbmFtZSA9IHNlcnZpY2VcbiAgICAgICAgICAvLyAgICAgICB0eXBlID0gVEVYVFxuICAgICAgICAgIC8vICAgICAgIG5vdG51bGwgPSAxXG4gICAgICAgICAgLy8gICAgICAgZGZsdF92YWx1ZSA9XG4gICAgICAgICAgLy8gICAgICAgcGsgPSAxXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyAgICAgICBjaWQgPSAxXG4gICAgICAgICAgLy8gICAgICAgbmFtZSA9IGNsaWVudFxuICAgICAgICAgIC8vICAgICAgIHR5cGUgPSBURVhUXG4gICAgICAgICAgLy8gICAgICAgbm90bnVsbCA9IDFcbiAgICAgICAgICAvLyAgICAgICBkZmx0X3ZhbHVlID1cbiAgICAgICAgICAvLyAgICAgICBwayA9IDJcbiAgICAgICAgICBjb3VudCA9IHRoaXMuY29sdW1uQ291bnQgPVxuICAgICAgICAgICAgc3Rkb3V0XG4gICAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgICAgLy8gZ2V0IGVhY2ggcmVjb3JkJ3MgYmVnaW5uaW5nXG4gICAgICAgICAgICAgIC5zcGxpdCgnY2lkJylcbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBlbXB0eSByb3cgKHVzdWFsbHksIHRoZSBmaXJzdClcbiAgICAgICAgICAgICAgLmZpbHRlcigocmVjb3JkKSA9PiAhXy5pc0VtcHR5KHJlY29yZCkpXG4gICAgICAgICAgICAgIC5sZW5ndGg7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8vIHVzZSBkZWZhdWx0cywgYnV0IGRvIG5vdCBzYXZlXG4gICAgICAgICAgY291bnQgPSB0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA8IDEwID8gNyA6IDExO1xuICAgICAgICAgIGxvZy53YXJuKGBVbmFibGUgdG8gZmluZCBDYWxlbmRhciBhY2Nlc3MgY29sdW1uIGNvdW50OiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbGwgaW4gdGhlIHF1ZXJ5IHdpdGggMCdzIGZvciBjb2x1bW5zIGFmdGVyIHRoZSA1IHdlIGNhcmUgYWJvdXRcbiAgICAgIHF1ZXJ5ID0gYElOU0VSVCBJTlRPICdhY2Nlc3MnIFZBTFVFUyAoJ2tUQ0NTZXJ2aWNlQ2FsZW5kYXInLCAnPycsIDAsIDEsIDEsICR7Xy5yYW5nZSgwLCBjb3VudCAtIDUsIDApLmpvaW4oJywgJyl9KTtgO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLnRjY0RiLmV4ZWNRdWVyeShxdWVyeSwgYnVuZGxlSUQpO1xuICB9XG5cbiAgYXN5bmMgZGlzYWJsZUNhbGVuZGFyQWNjZXNzIChidW5kbGVJRCkge1xuICAgIGlmICgoYXdhaXQgdGhpcy5nZXRDYWxlbmRhclJvd0NvdW50KGJ1bmRsZUlEKSkgPiAwKSB7XG4gICAgICBhd2FpdCB0aGlzLnRjY0RiLmV4ZWNRdWVyeShgREVMRVRFIEZST00gJ2FjY2VzcycgV0hFUkUgY2xpZW50PSc/JyBBTkQgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcidgLCBidW5kbGVJRCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFOLENBQWU7RUFFYkMsV0FBVyxDQUFFQyxZQUFGLEVBQWdCQyxrQkFBaEIsRUFBb0M7SUFDN0MsS0FBS0QsWUFBTCxHQUFvQkEsWUFBcEI7SUFDQSxLQUFLRSxLQUFMLEdBQWEsSUFBSUMsY0FBSixDQUFVSCxZQUFWLEVBQXdCQyxrQkFBeEIsQ0FBYjtFQUNEOztFQUV3QixNQUFuQkcsbUJBQW1CLENBQUVDLFFBQUYsRUFBWTtJQUNuQyxNQUFNQyxLQUFLLEdBQUcsTUFBTSxLQUFLSixLQUFMLENBQVdLLFNBQVgsQ0FBc0IsaUZBQXRCLEVBQXdHRixRQUF4RyxDQUFwQjtJQUNBLE9BQU9HLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDRyxLQUFOLENBQVksR0FBWixFQUFpQixDQUFqQixDQUFELEVBQXNCLEVBQXRCLENBQWY7RUFDRDs7RUFFc0IsTUFBakJDLGlCQUFpQixDQUFFTCxRQUFGLEVBQVk7SUFDakMsTUFBTUMsS0FBSyxHQUFHLE1BQU0sS0FBS0osS0FBTCxDQUFXSyxTQUFYLENBQXNCLCtGQUF0QixFQUFzSEYsUUFBdEgsQ0FBcEI7SUFDQSxPQUFPRyxRQUFRLENBQUNGLEtBQUssQ0FBQ0csS0FBTixDQUFZLEdBQVosRUFBaUIsQ0FBakIsQ0FBRCxFQUFzQixFQUF0QixDQUFSLEdBQW9DLENBQTNDO0VBQ0Q7O0VBRXlCLE1BQXBCRSxvQkFBb0IsQ0FBRU4sUUFBRixFQUFZO0lBQ3BDLElBQUlPLEtBQUo7O0lBQ0EsSUFBSSxDQUFDLE1BQU0sS0FBS1IsbUJBQUwsQ0FBeUJDLFFBQXpCLENBQVAsSUFBNkMsQ0FBakQsRUFBb0Q7TUFDbERPLEtBQUssR0FBSTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFOTTtJQU9ELENBUkQsTUFRTztNQUNMLElBQUlOLEtBQUssR0FBRyxLQUFLTyxXQUFqQjs7TUFDQSxJQUFJLENBQUNDLGVBQUEsQ0FBRUMsUUFBRixDQUFXLEtBQUtGLFdBQWhCLENBQUwsRUFBbUM7UUFDakMsSUFBSTtVQUNGLE1BQU1HLE1BQU0sR0FBRyxNQUFNLEtBQUtkLEtBQUwsQ0FBV0ssU0FBWCxDQUFzQiw2QkFBdEIsQ0FBckI7VUFlQUQsS0FBSyxHQUFHLEtBQUtPLFdBQUwsR0FDTkcsTUFBTSxDQUNIQyxJQURILEdBR0dSLEtBSEgsQ0FHUyxLQUhULEVBS0dTLE1BTEgsQ0FLV0MsTUFBRCxJQUFZLENBQUNMLGVBQUEsQ0FBRU0sT0FBRixDQUFVRCxNQUFWLENBTHZCLEVBTUdFLE1BUEw7UUFRRCxDQXhCRCxDQXdCRSxPQUFPQyxHQUFQLEVBQVk7VUFFWmhCLEtBQUssR0FBRyxLQUFLTixZQUFMLENBQWtCdUIsS0FBbEIsR0FBMEIsRUFBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsRUFBM0M7O1VBQ0FDLGVBQUEsQ0FBSUMsSUFBSixDQUFVLGdEQUErQ0gsR0FBRyxDQUFDSSxPQUFRLEVBQXJFO1FBQ0Q7TUFDRjs7TUFHRGQsS0FBSyxHQUFJLHFFQUFvRUUsZUFBQSxDQUFFYSxLQUFGLENBQVEsQ0FBUixFQUFXckIsS0FBSyxHQUFHLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCc0IsSUFBekIsQ0FBOEIsSUFBOUIsQ0FBb0MsSUFBakg7SUFDRDs7SUFDRCxNQUFNLEtBQUsxQixLQUFMLENBQVdLLFNBQVgsQ0FBcUJLLEtBQXJCLEVBQTRCUCxRQUE1QixDQUFOO0VBQ0Q7O0VBRTBCLE1BQXJCd0IscUJBQXFCLENBQUV4QixRQUFGLEVBQVk7SUFDckMsSUFBSSxDQUFDLE1BQU0sS0FBS0QsbUJBQUwsQ0FBeUJDLFFBQXpCLENBQVAsSUFBNkMsQ0FBakQsRUFBb0Q7TUFDbEQsTUFBTSxLQUFLSCxLQUFMLENBQVdLLFNBQVgsQ0FBc0IseUVBQXRCLEVBQWdHRixRQUFoRyxDQUFOO0lBQ0Q7RUFDRjs7QUF2RVk7O2VBMEVBUCxRIn0=
