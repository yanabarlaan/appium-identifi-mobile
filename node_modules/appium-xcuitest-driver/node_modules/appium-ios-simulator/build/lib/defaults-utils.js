"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NSUserDefaults = void 0;
exports.generateDefaultsCommandArgs = generateDefaultsCommandArgs;
exports.toXmlArg = toXmlArg;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _xmldom = require("@xmldom/xmldom");

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("./logger"));

function toXmlArg(value, serialize = true) {
  let xmlDoc = null;

  if (_lodash.default.isPlainObject(value)) {
    xmlDoc = new _xmldom.DOMParser().parseFromString('<dict></dict>', 'text/xml');

    for (const [subKey, subValue] of _lodash.default.toPairs(value)) {
      const keyEl = xmlDoc.createElement('key');
      const keyTextEl = xmlDoc.createTextNode(subKey);
      keyEl.appendChild(keyTextEl);
      xmlDoc.documentElement.appendChild(keyEl);
      const subValueEl = xmlDoc.importNode(toXmlArg(subValue, false), true);
      xmlDoc.documentElement.appendChild(subValueEl);
    }
  } else if (_lodash.default.isArray(value)) {
    xmlDoc = new _xmldom.DOMParser().parseFromString('<array></array>', 'text/xml');

    for (const subValue of value) {
      const subValueEl = xmlDoc.importNode(toXmlArg(subValue, false), true);
      xmlDoc.documentElement.appendChild(subValueEl);
    }
  } else if (_lodash.default.isBoolean(value)) {
    xmlDoc = new _xmldom.DOMParser().parseFromString(value ? '<true/>' : '<false/>', 'text/xml');
  } else if (_lodash.default.isInteger(value)) {
    xmlDoc = new _xmldom.DOMParser().parseFromString(`<integer>${value}</integer>`, 'text/xml');
  } else if (_lodash.default.isNumber(value)) {
    xmlDoc = new _xmldom.DOMParser().parseFromString(`<real>${value}</real>`, 'text/xml');
  } else if (_lodash.default.isString(value)) {
    xmlDoc = new _xmldom.DOMParser().parseFromString(`<string></string>`, 'text/xml');
    const valueTextEl = xmlDoc.createTextNode(value);
    xmlDoc.documentElement.appendChild(valueTextEl);
  }

  if (!xmlDoc) {
    throw new TypeError(`The defaults value ${JSON.stringify(value)} cannot be written, ` + `because it is not known how to handle its type`);
  }

  return serialize ? new _xmldom.XMLSerializer().serializeToString(xmlDoc.documentElement) : xmlDoc.documentElement;
}

function generateDefaultsCommandArgs(valuesMap, replace = false) {
  const resultArgs = [];

  for (const [key, value] of _lodash.default.toPairs(valuesMap)) {
    try {
      if (!replace && _lodash.default.isPlainObject(value)) {
        const dictArgs = [key, '-dict-add'];

        for (const [subKey, subValue] of _lodash.default.toPairs(value)) {
          dictArgs.push(subKey, toXmlArg(subValue));
        }

        resultArgs.push(dictArgs);
      } else if (!replace && _lodash.default.isArray(value)) {
        const arrayArgs = [key, '-array-add'];

        for (const subValue of value) {
          arrayArgs.push(toXmlArg(subValue));
        }

        resultArgs.push(arrayArgs);
      } else {
        resultArgs.push([key, toXmlArg(value)]);
      }
    } catch (e) {
      if (e instanceof TypeError) {
        _logger.default.warn(e.message);
      } else {
        throw e;
      }
    }
  }

  return resultArgs;
}

class NSUserDefaults {
  constructor(plist) {
    this.plist = plist;
  }

  async asJson() {
    try {
      const {
        stdout
      } = await (0, _teen_process.exec)('plutil', ['-convert', 'json', '-o', '-', this.plist]);
      return JSON.parse(stdout);
    } catch (e) {
      throw new Error(`'${this.plist}' cannot be converted to JSON. Original error: ${e.stderr || e.message}`);
    }
  }

  async update(valuesMap) {
    if (!_lodash.default.isPlainObject(valuesMap)) {
      throw new TypeError(`plist values must be a map. '${valuesMap}' is given instead`);
    }

    if (_lodash.default.isEmpty(valuesMap)) {
      return;
    }

    const commandArgs = generateDefaultsCommandArgs(valuesMap);

    try {
      await _bluebird.default.all(commandArgs.map(args => (0, _teen_process.exec)('defaults', ['write', this.plist, ...args])));
    } catch (e) {
      throw new Error(`Could not write defaults into '${this.plist}'. Original error: ${e.stderr || e.message}`);
    }
  }

}

exports.NSUserDefaults = NSUserDefaults;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
