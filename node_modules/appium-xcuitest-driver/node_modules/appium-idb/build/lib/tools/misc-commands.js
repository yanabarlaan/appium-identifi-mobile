"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../helpers");

const miscCommands = {};

miscCommands.describeDevice = async function describeDevice() {
  _logger.default.debug(`Describing the device '${this.udid}'`);

  const output = await this.exec(['describe'], ['--json']);
  return (0, _helpers.fixOutputToObject)(output);
};

miscCommands.focusSimulator = async function focusSimulator() {
  _logger.default.debug(`Focusing Simulator '${this.udid}'`);

  await this.exec(['focus']);
};

miscCommands.openUrl = async function openUrl(url) {
  _logger.default.debug(`Opening URL '${url}' on the device '${this.udid}'`);

  await this.exec(['open'], [url]);
};

miscCommands.clearKeychain = async function clearKeychain() {
  _logger.default.debug(`Clearing keychain on the device '${this.udid}'`);

  await this.exec(['clear-keychain']);
};

miscCommands.setLocation = async function setLocation(latitude, longitude) {
  _logger.default.debug(`Setting location (${latitude}, ${longitude}) on the device '${this.udid}'`);

  await this.exec(['set-location'], [latitude, longitude]);
};

miscCommands.approve = async function approve(bundleId, permissions) {
  _logger.default.debug(`Approving permissions (${JSON.stringify(permissions)}) for '${bundleId}' ` + `on the device '${this.udid}'`);

  const command = ['approve'];
  const args = [];

  if (_lodash.default.isArray(permissions)) {
    args.push(...permissions);
  } else {
    args.push(permissions);
  }

  args.push(bundleId);
  await this.exec(command, args);
};

miscCommands.addContacts = async function addContacts(dbPath) {
  _logger.default.debug(`Adding contacts from (${dbPath}) to the device '${this.udid}'`);

  await this.exec(['contacts', 'update'], [dbPath]);
};

var _default = miscCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Rvb2xzL21pc2MtY29tbWFuZHMuanMiLCJuYW1lcyI6WyJtaXNjQ29tbWFuZHMiLCJkZXNjcmliZURldmljZSIsImxvZyIsImRlYnVnIiwidWRpZCIsIm91dHB1dCIsImV4ZWMiLCJmb2N1c1NpbXVsYXRvciIsIm9wZW5VcmwiLCJ1cmwiLCJjbGVhcktleWNoYWluIiwic2V0TG9jYXRpb24iLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImFwcHJvdmUiLCJidW5kbGVJZCIsInBlcm1pc3Npb25zIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbW1hbmQiLCJhcmdzIiwiXyIsImlzQXJyYXkiLCJwdXNoIiwiYWRkQ29udGFjdHMiLCJkYlBhdGgiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvdG9vbHMvbWlzYy1jb21tYW5kcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlci5qcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZml4T3V0cHV0VG9PYmplY3QgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuXG5jb25zdCBtaXNjQ29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBSZXR1cm5zIG1ldGFkYXRhIGFib3V0IHRoZSBzcGVjaWZpZWQgdGFyZ2V0LlxuICogT3V0cHV0IGV4YW1wbGU6XG4gKiB0YXJnZXRfZGVzY3JpcHRpb24ge1xuICogICB1ZGlkOiBcIjE0RUJERURFLTBDOUUtNDZCNC1CMUZGLTA4ODFGMTFEMEU3NVwiXG4gKiAgIG5hbWU6IFwiaVBob25lIFhcXDMxMlxcMjAwXCJcbiAqICAgc2NyZWVuX2RpbWVuc2lvbnMge1xuICogICAgIHdpZHRoOiA4MjhcbiAqICAgICBoZWlnaHQ6IDE3OTJcbiAqICAgICBkZW5zaXR5OiAyLjBcbiAqICAgICB3aWR0aF9wb2ludHM6IDQxNFxuICogICAgIGhlaWdodF9wb2ludHM6IDg5NlxuICogICB9XG4gKiAgIHN0YXRlOiBcImJvb3RlZFwiXG4gKiAgIHRhcmdldF90eXBlOiBcInNpbXVsYXRvclwiXG4gKiAgIG9zX3ZlcnNpb246IFwiaU9TIDEyLjJcIlxuICogICBhcmNoaXRlY3R1cmU6IFwieDg2XzY0XCJcbiAqIH1cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgY29tbWFuZCBvdXRwdXQgcGFyc2VkIHRvIGFuIG9iamVjdFxuICovXG5taXNjQ29tbWFuZHMuZGVzY3JpYmVEZXZpY2UgPSBhc3luYyBmdW5jdGlvbiBkZXNjcmliZURldmljZSAoKSB7XG4gIGxvZy5kZWJ1ZyhgRGVzY3JpYmluZyB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ2Rlc2NyaWJlJ10sIFsnLS1qc29uJ10pO1xuICByZXR1cm4gZml4T3V0cHV0VG9PYmplY3Qob3V0cHV0KTtcbn07XG5cbi8qKlxuICogQnJpbmdzIGEgc2ltdWxhdG9ycyB3aW5kb3cgdG8gdGhlIGZvcmVncm91bmQuXG4gKi9cbm1pc2NDb21tYW5kcy5mb2N1c1NpbXVsYXRvciA9IGFzeW5jIGZ1bmN0aW9uIGZvY3VzU2ltdWxhdG9yICgpIHtcbiAgbG9nLmRlYnVnKGBGb2N1c2luZyBTaW11bGF0b3IgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnZm9jdXMnXSk7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSBzcGVjaWZpZWQgVVJMIG9uIHRoZSB0YXJnZXQuXG4gKiBUaGlzIHdvcmtzIGJvdGggd2l0aCB3ZWIgYWRkcmVzc2VzIGFuZCBVUkwgc2NoZW1lcyBwcmVzZW50IG9uIHRoZSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsIHRvIG9wZW5cbiAqL1xubWlzY0NvbW1hbmRzLm9wZW5VcmwgPSBhc3luYyBmdW5jdGlvbiBvcGVuVXJsICh1cmwpIHtcbiAgbG9nLmRlYnVnKGBPcGVuaW5nIFVSTCAnJHt1cmx9JyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ29wZW4nXSwgW3VybF0pO1xufTtcblxuLyoqXG4gKiBDbGVhciB0aGUgZW50aXJlIGtleWNoYWluIG9uIFNpbXVsYXRvci5cbiAqL1xubWlzY0NvbW1hbmRzLmNsZWFyS2V5Y2hhaW4gPSBhc3luYyBmdW5jdGlvbiBjbGVhcktleWNoYWluICgpIHtcbiAgbG9nLmRlYnVnKGBDbGVhcmluZyBrZXljaGFpbiBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2NsZWFyLWtleWNoYWluJ10pO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZXMgYSBzaW11bGF0b3JzIGxvY2F0aW9uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsYXRpdHVkZSBUaGUgbGF0aXR1ZGUgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGUgdmFsdWVcbiAqL1xubWlzY0NvbW1hbmRzLnNldExvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gc2V0TG9jYXRpb24gKGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcbiAgbG9nLmRlYnVnKGBTZXR0aW5nIGxvY2F0aW9uICgke2xhdGl0dWRlfSwgJHtsb25naXR1ZGV9KSBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3NldC1sb2NhdGlvbiddLCBbbGF0aXR1ZGUsIGxvbmdpdHVkZV0pO1xufTtcblxuLyoqXG4gKiBQcm9ncmFtbWF0aWNhbGx5IGFwcHJvdmUgcGVybWlzc2lvbiBmb3IgYW4gYXBwIG9uIFNpbXVsYXRvclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBBcHBsaWNhdGlvbiBpZGVudGlmaWVyIHRvIHNldCB0aGUgcGVybWlzc2lvbnMgZm9yXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fSBwZXJtaXNzaW9ucyBUaGUgcGVybWlzc2lvbihzKSB0byBhcHBseS4gQ2FuIGJlXG4gKiBvbmUgb2Yge3Bob3RvcyxjYW1lcmEsY2FtZXJhfVxuICovXG5taXNjQ29tbWFuZHMuYXBwcm92ZSA9IGFzeW5jIGZ1bmN0aW9uIGFwcHJvdmUgKGJ1bmRsZUlkLCBwZXJtaXNzaW9ucykge1xuICBsb2cuZGVidWcoYEFwcHJvdmluZyBwZXJtaXNzaW9ucyAoJHtKU09OLnN0cmluZ2lmeShwZXJtaXNzaW9ucyl9KSBmb3IgJyR7YnVuZGxlSWR9JyBgICtcbiAgICBgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBjb21tYW5kID0gWydhcHByb3ZlJ107XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgaWYgKF8uaXNBcnJheShwZXJtaXNzaW9ucykpIHtcbiAgICBhcmdzLnB1c2goLi4ucGVybWlzc2lvbnMpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MucHVzaChwZXJtaXNzaW9ucyk7XG4gIH1cbiAgYXJncy5wdXNoKGJ1bmRsZUlkKTtcbiAgYXdhaXQgdGhpcy5leGVjKGNvbW1hbmQsIGFyZ3MpO1xufTtcblxuLyoqXG4gKiBPdmVyd3JpdGUgdGhlIHNpbXVsYXRvcnMgY29udGFjdHMgZGJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGJQYXRoIEZ1bGwgcGF0aCB0byB0aGUgU1FMaXRlIGRiIGNvbnRhaW5pbmcgdGhlIGNvbnRhY3RzXG4gKi9cbm1pc2NDb21tYW5kcy5hZGRDb250YWN0cyA9IGFzeW5jIGZ1bmN0aW9uIGFkZENvbnRhY3RzIChkYlBhdGgpIHtcbiAgbG9nLmRlYnVnKGBBZGRpbmcgY29udGFjdHMgZnJvbSAoJHtkYlBhdGh9KSB0byB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2NvbnRhY3RzJywgJ3VwZGF0ZSddLCBbZGJQYXRoXSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaXNjQ29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7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
