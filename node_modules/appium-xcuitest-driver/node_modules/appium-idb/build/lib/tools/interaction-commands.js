"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

const interactionCommands = {};

interactionCommands.tap = async function tap(x, y) {
  _logger.default.debug(`Performing tap at (${x}, ${y}) on the device '${this.udid}'`);

  await this.exec(['ui', 'tap'], [x, y]);
};

interactionCommands.pressButton = async function pressButton(name) {
  _logger.default.debug(`Performing button press of '${name}' on the device '${this.udid}'`);

  await this.exec(['ui', 'button'], [name]);
};

interactionCommands.typeText = async function typeText(text) {
  _logger.default.debug(`Typing '${text}' on the device '${this.udid}'`);

  await this.exec(['ui', 'text'], [text]);
};

interactionCommands.pressKeycode = async function pressKeycode(codeOrCodes, opts = {}) {
  const {
    duration
  } = opts;

  _logger.default.debug(`Performing key code(s) ${JSON.stringify(codeOrCodes)} press ` + `on the device '${this.udid}'`);

  const command = ['ui', _lodash.default.isArray(codeOrCodes) ? 'key-sequence' : 'key'];
  const args = [];

  if (_lodash.default.isArray(codeOrCodes)) {
    args.push(...codeOrCodes);
  } else {
    if (_support.util.hasValue(duration)) {
      args.push('--duration', duration);
    }

    args.push(codeOrCodes);
  }

  await this.exec(command, args);
};

var _default = interactionCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Rvb2xzL2ludGVyYWN0aW9uLWNvbW1hbmRzLmpzIiwibmFtZXMiOlsiaW50ZXJhY3Rpb25Db21tYW5kcyIsInRhcCIsIngiLCJ5IiwibG9nIiwiZGVidWciLCJ1ZGlkIiwiZXhlYyIsInByZXNzQnV0dG9uIiwibmFtZSIsInR5cGVUZXh0IiwidGV4dCIsInByZXNzS2V5Y29kZSIsImNvZGVPckNvZGVzIiwib3B0cyIsImR1cmF0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbW1hbmQiLCJfIiwiaXNBcnJheSIsImFyZ3MiLCJwdXNoIiwidXRpbCIsImhhc1ZhbHVlIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL3Rvb2xzL2ludGVyYWN0aW9uLWNvbW1hbmRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcblxuXG5jb25zdCBpbnRlcmFjdGlvbkNvbW1hbmRzID0ge307XG5cbi8qKlxuICogVGFwcyBhdCBnaXZlbiBjb29yZGluYXRlc1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30geCBUYXAgWCBjb29yZGluYXRlXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHkgVGFwIFkgY29vcmRpbmF0ZVxuICovXG5pbnRlcmFjdGlvbkNvbW1hbmRzLnRhcCA9IGFzeW5jIGZ1bmN0aW9uIHRhcCAoeCwgeSkge1xuICBsb2cuZGVidWcoYFBlcmZvcm1pbmcgdGFwIGF0ICgke3h9LCAke3l9KSBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3VpJywgJ3RhcCddLCBbeCwgeV0pO1xufTtcblxuLyoqXG4gKiBQcmVzc2VzIGEgaGFyZHdhcmUgYnV0dG9uIG9uIGRldmljZSB1bmRlciB0ZXN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT25lIG9mIHtBUFBMRV9QQVksSE9NRSxMT0NLLFNJREVfQlVUVE9OLFNJUkl9XG4gKi9cbmludGVyYWN0aW9uQ29tbWFuZHMucHJlc3NCdXR0b24gPSBhc3luYyBmdW5jdGlvbiBwcmVzc0J1dHRvbiAobmFtZSkge1xuICBsb2cuZGVidWcoYFBlcmZvcm1pbmcgYnV0dG9uIHByZXNzIG9mICcke25hbWV9JyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3VpJywgJ2J1dHRvbiddLCBbbmFtZV0pO1xufTtcblxuLyoqXG4gKiBUeXBlcyB0aGUgZ2l2ZW4gdGV4dCBvbiB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byB0eXBlXG4gKi9cbmludGVyYWN0aW9uQ29tbWFuZHMudHlwZVRleHQgPSBhc3luYyBmdW5jdGlvbiB0eXBlVGV4dCAodGV4dCkge1xuICBsb2cuZGVidWcoYFR5cGluZyAnJHt0ZXh0fScgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWyd1aScsICd0ZXh0J10sIFt0ZXh0XSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEtleWNvZGVPcHRzXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ8c3RyaW5nfSBkdXJhdGlvbiAtIFRoZSBrZXkgcHJlc3MgZHVyYXRpb24gaW4gZmxvYXQgc2Vjb25kcy5cbiAqIFRoZSBvcHRpb24gaXMgaWdub3JlZCBpZiBtdWx0aXBsZSBrZXkgY29kZXMgYXJlIHNldC5cbiAqL1xuXG4vKipcbiAqIFNlbmQgYSBrZXljb2RlIG9yIGtleSBjb2RlcyBzZXF1ZW5jZSB0byB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8QXJyYXk8c3RyaW5nPnxBcnJheTxudW1iZXI+fSBjb2RlT3JDb2RlcyBTaW5nbGUga2V5IGNvZGVcbiAqIG9yIGFycmF5IG9mIGNvZGVzXG4gKiBAcGFyYW0ge0tleWNvZGVPcHRzfSBvcHRzXG4gKi9cbmludGVyYWN0aW9uQ29tbWFuZHMucHJlc3NLZXljb2RlID0gYXN5bmMgZnVuY3Rpb24gcHJlc3NLZXljb2RlIChjb2RlT3JDb2Rlcywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBkdXJhdGlvbixcbiAgfSA9IG9wdHM7XG4gIGxvZy5kZWJ1ZyhgUGVyZm9ybWluZyBrZXkgY29kZShzKSAke0pTT04uc3RyaW5naWZ5KGNvZGVPckNvZGVzKX0gcHJlc3MgYCArXG4gICAgYG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3QgY29tbWFuZCA9IFsndWknLCBfLmlzQXJyYXkoY29kZU9yQ29kZXMpID8gJ2tleS1zZXF1ZW5jZScgOiAna2V5J107XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgaWYgKF8uaXNBcnJheShjb2RlT3JDb2RlcykpIHtcbiAgICBhcmdzLnB1c2goLi4uY29kZU9yQ29kZXMpO1xuICB9IGVsc2Uge1xuICAgIGlmICh1dGlsLmhhc1ZhbHVlKGR1cmF0aW9uKSkge1xuICAgICAgYXJncy5wdXNoKCctLWR1cmF0aW9uJywgZHVyYXRpb24pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goY29kZU9yQ29kZXMpO1xuICB9XG4gIGF3YWl0IHRoaXMuZXhlYyhjb21tYW5kLCBhcmdzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGludGVyYWN0aW9uQ29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsbUJBQW1CLEdBQUcsRUFBNUI7O0FBUUFBLG1CQUFtQixDQUFDQyxHQUFwQixHQUEwQixlQUFlQSxHQUFmLENBQW9CQyxDQUFwQixFQUF1QkMsQ0FBdkIsRUFBMEI7RUFDbERDLGdCQUFJQyxLQUFKLENBQVcsc0JBQXFCSCxDQUFFLEtBQUlDLENBQUUsb0JBQW1CLEtBQUtHLElBQUssR0FBckU7O0VBQ0EsTUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxJQUFELEVBQU8sS0FBUCxDQUFWLEVBQXlCLENBQUNMLENBQUQsRUFBSUMsQ0FBSixDQUF6QixDQUFOO0FBQ0QsQ0FIRDs7QUFVQUgsbUJBQW1CLENBQUNRLFdBQXBCLEdBQWtDLGVBQWVBLFdBQWYsQ0FBNEJDLElBQTVCLEVBQWtDO0VBQ2xFTCxnQkFBSUMsS0FBSixDQUFXLCtCQUE4QkksSUFBSyxvQkFBbUIsS0FBS0gsSUFBSyxHQUEzRTs7RUFDQSxNQUFNLEtBQUtDLElBQUwsQ0FBVSxDQUFDLElBQUQsRUFBTyxRQUFQLENBQVYsRUFBNEIsQ0FBQ0UsSUFBRCxDQUE1QixDQUFOO0FBQ0QsQ0FIRDs7QUFVQVQsbUJBQW1CLENBQUNVLFFBQXBCLEdBQStCLGVBQWVBLFFBQWYsQ0FBeUJDLElBQXpCLEVBQStCO0VBQzVEUCxnQkFBSUMsS0FBSixDQUFXLFdBQVVNLElBQUssb0JBQW1CLEtBQUtMLElBQUssR0FBdkQ7O0VBQ0EsTUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxJQUFELEVBQU8sTUFBUCxDQUFWLEVBQTBCLENBQUNJLElBQUQsQ0FBMUIsQ0FBTjtBQUNELENBSEQ7O0FBbUJBWCxtQkFBbUIsQ0FBQ1ksWUFBcEIsR0FBbUMsZUFBZUEsWUFBZixDQUE2QkMsV0FBN0IsRUFBMENDLElBQUksR0FBRyxFQUFqRCxFQUFxRDtFQUN0RixNQUFNO0lBQ0pDO0VBREksSUFFRkQsSUFGSjs7RUFHQVYsZ0JBQUlDLEtBQUosQ0FBVywwQkFBeUJXLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixXQUFmLENBQTRCLFNBQXRELEdBQ1Asa0JBQWlCLEtBQUtQLElBQUssR0FEOUI7O0VBRUEsTUFBTVksT0FBTyxHQUFHLENBQUMsSUFBRCxFQUFPQyxnQkFBRUMsT0FBRixDQUFVUCxXQUFWLElBQXlCLGNBQXpCLEdBQTBDLEtBQWpELENBQWhCO0VBQ0EsTUFBTVEsSUFBSSxHQUFHLEVBQWI7O0VBQ0EsSUFBSUYsZ0JBQUVDLE9BQUYsQ0FBVVAsV0FBVixDQUFKLEVBQTRCO0lBQzFCUSxJQUFJLENBQUNDLElBQUwsQ0FBVSxHQUFHVCxXQUFiO0VBQ0QsQ0FGRCxNQUVPO0lBQ0wsSUFBSVUsY0FBS0MsUUFBTCxDQUFjVCxRQUFkLENBQUosRUFBNkI7TUFDM0JNLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFlBQVYsRUFBd0JQLFFBQXhCO0lBQ0Q7O0lBQ0RNLElBQUksQ0FBQ0MsSUFBTCxDQUFVVCxXQUFWO0VBQ0Q7O0VBQ0QsTUFBTSxLQUFLTixJQUFMLENBQVVXLE9BQVYsRUFBbUJHLElBQW5CLENBQU47QUFDRCxDQWpCRDs7ZUFtQmVyQixtQiJ9
