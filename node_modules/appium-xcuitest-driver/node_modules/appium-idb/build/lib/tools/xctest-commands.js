"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _helpers = require("../helpers");

const xctestCommands = {};

xctestCommands.runXCUITest = async function runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, opts = {}) {
  const uiTestProcess = this.createSubProcess(['xctest', 'run', opts.testType || 'ui'], [...(opts.args || []), xctestBundleId, appUnderTestBundleId, testRunnerBundleId], {
    env: (0, _helpers.convertToIDBEnv)(opts.env)
  });
  await uiTestProcess.start(0);
  return uiTestProcess;
};

xctestCommands.installXCTestBundle = async function installXCTestBundle(xctestBundlePath) {
  const output = await this.exec(['xctest', 'install'], ['--json', xctestBundlePath]);

  try {
    const object = JSON.parse(output);
    return object.installedTestBundleId;
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};

xctestCommands.listXCTestBundles = async function listXCTestBundles() {
  const output = await this.exec(['xctest', 'list'], ['--json']);
  const bundles = (0, _helpers.fixOutputToArray)(output);
  return bundles.map(bundle => bundle.bundle_id);
};

xctestCommands.listXCTestsInTestBundle = async function listXCTestBundles(xctestBundleId) {
  const output = await this.exec(['xctest', 'list-bundle'], ['--json', xctestBundleId]);

  try {
    return JSON.parse(output);
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};

var _default = xctestCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Rvb2xzL3hjdGVzdC1jb21tYW5kcy5qcyIsIm5hbWVzIjpbInhjdGVzdENvbW1hbmRzIiwicnVuWENVSVRlc3QiLCJ0ZXN0UnVubmVyQnVuZGxlSWQiLCJhcHBVbmRlclRlc3RCdW5kbGVJZCIsInhjdGVzdEJ1bmRsZUlkIiwib3B0cyIsInVpVGVzdFByb2Nlc3MiLCJjcmVhdGVTdWJQcm9jZXNzIiwidGVzdFR5cGUiLCJhcmdzIiwiZW52Iiwic3RhcnQiLCJpbnN0YWxsWENUZXN0QnVuZGxlIiwieGN0ZXN0QnVuZGxlUGF0aCIsIm91dHB1dCIsImV4ZWMiLCJvYmplY3QiLCJKU09OIiwicGFyc2UiLCJpbnN0YWxsZWRUZXN0QnVuZGxlSWQiLCJlIiwiRXJyb3IiLCJtZXNzYWdlIiwibGlzdFhDVGVzdEJ1bmRsZXMiLCJidW5kbGVzIiwibWFwIiwiYnVuZGxlIiwiYnVuZGxlX2lkIiwibGlzdFhDVGVzdHNJblRlc3RCdW5kbGUiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvdG9vbHMveGN0ZXN0LWNvbW1hbmRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRUb0lEQkVudiwgZml4T3V0cHV0VG9BcnJheSB9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5jb25zdCB4Y3Rlc3RDb21tYW5kcyA9IHt9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJ1bk9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gZW52IEVudmlyb25tZW50IHZhcmlhYmxlcyBtYXAgdG8gYmUgcGFzc2VkIHRvIHRoZSB0ZXN0IHJ1bm5lclxuICogQHByb3BlcnR5IHtBcnJheX0gYXJncyBBcmd1bWVudHMgYXJyYXkgdG8gYmUgcGFzc2VkIHRvIHRoZSB0ZXN0IHJ1bm5lclxuICovXG5cbi8qKlxuICogUnVucyBhbiB4Y3VpdGVzdCBvbiB0aGUgZGV2aWNlIG9yIHNpbXVsYXRvclxuICogQHBhcmFtIHtzdHJpbmd9IHRlc3RSdW5uZXJCdW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSB0ZXN0IHJ1bm5lclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcFVuZGVyVGVzdEJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcCB1bmRlciB0ZXN0XG4gKiBAcGFyYW0ge3N0cmluZ30geGN0ZXN0QnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgeGN0ZXN0IHBhY2thZ2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIFRoZSBlbnZzIGFuZCBhcmdzIHRvIGJlIHBhc3NlZCB0byB0aGUgeGN1aXRlc3QgcnVubmVyXG4gKlxuICogQHJldHVybnMge1N1YlByb2Nlc3N9XG4gKi9cbnhjdGVzdENvbW1hbmRzLnJ1blhDVUlUZXN0ID0gYXN5bmMgZnVuY3Rpb24gcnVuWENVSVRlc3QgKFxuICB0ZXN0UnVubmVyQnVuZGxlSWQsIGFwcFVuZGVyVGVzdEJ1bmRsZUlkLCB4Y3Rlc3RCdW5kbGVJZCwgb3B0cyA9IHt9XG4pIHtcbiAgY29uc3QgdWlUZXN0UHJvY2VzcyA9IHRoaXMuY3JlYXRlU3ViUHJvY2VzcyhcbiAgICBbJ3hjdGVzdCcsICdydW4nLCBvcHRzLnRlc3RUeXBlIHx8ICd1aSddLFxuICAgIFtcbiAgICAgIC4uLihvcHRzLmFyZ3MgfHwgW10pLFxuICAgICAgeGN0ZXN0QnVuZGxlSWQsXG4gICAgICBhcHBVbmRlclRlc3RCdW5kbGVJZCxcbiAgICAgIHRlc3RSdW5uZXJCdW5kbGVJZCxcbiAgICBdLFxuICAgIHtlbnY6IGNvbnZlcnRUb0lEQkVudihvcHRzLmVudilcbiAgICB9KTtcbiAgYXdhaXQgdWlUZXN0UHJvY2Vzcy5zdGFydCgwKTtcbiAgcmV0dXJuIHVpVGVzdFByb2Nlc3M7XG59O1xuXG4vKipcbiAqIEluc3RhbGxzIGEgeGN0ZXN0IGJ1bmRsZSBvbiB0aGUgZGV2aWNlIG9yIHNpbXVsYXRvclxuICogQHBhcmFtIHtzdHJpbmd9IHhjdGVzdEJ1bmRsZVBhdGggdGhlIHBhdGggb2YgdGhlIHhjdGVzdCBidW5kbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBidW5kbGUgaWQgb2YgeGN0ZXN0IGJ1bmRsZSB0aGF0IHdhcyBpbnN0YWxsZWRcbiAqL1xueGN0ZXN0Q29tbWFuZHMuaW5zdGFsbFhDVGVzdEJ1bmRsZSA9IGFzeW5jIGZ1bmN0aW9uIGluc3RhbGxYQ1Rlc3RCdW5kbGUgKHhjdGVzdEJ1bmRsZVBhdGgpIHtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjKFsneGN0ZXN0JywgJ2luc3RhbGwnXSwgWyctLWpzb24nLCB4Y3Rlc3RCdW5kbGVQYXRoXSk7XG4gIHRyeSB7XG4gICAgY29uc3Qgb2JqZWN0ID0gSlNPTi5wYXJzZShvdXRwdXQpO1xuICAgIHJldHVybiBvYmplY3QuaW5zdGFsbGVkVGVzdEJ1bmRsZUlkO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgJyR7b3V0cHV0fScgaW50byBqc29uIG9iamVjdDogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogTGlzdHMgYWxsIHRoZSB4Y3Rlc3QgYnVuZGxlcyBpbnN0YWxsZWQgb24gYSBkZXZpY2Ugb3IgYSBzaW11bGF0b3JcbiAqL1xueGN0ZXN0Q29tbWFuZHMubGlzdFhDVGVzdEJ1bmRsZXMgPSBhc3luYyBmdW5jdGlvbiBsaXN0WENUZXN0QnVuZGxlcyAoKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ3hjdGVzdCcsICdsaXN0J10sIFsnLS1qc29uJ10pO1xuICBjb25zdCBidW5kbGVzID0gZml4T3V0cHV0VG9BcnJheShvdXRwdXQpO1xuICByZXR1cm4gYnVuZGxlcy5tYXAoKGJ1bmRsZSkgPT4gYnVuZGxlLmJ1bmRsZV9pZCk7XG59O1xuXG4vKipcbiAqIExpc3RzIGFsbCB0aGUgeGN0ZXN0IGJ1bmRsZXMgaW5zdGFsbGVkIG9uIGEgZGV2aWNlIG9yIGEgc2ltdWxhdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30geGN0ZXN0QnVuZGxlSWQgdGhlIGJ1bmRsZSBpZCBvZiB0aGUgeGN0ZXN0XG4gKi9cbnhjdGVzdENvbW1hbmRzLmxpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlID0gYXN5bmMgZnVuY3Rpb24gbGlzdFhDVGVzdEJ1bmRsZXMgKHhjdGVzdEJ1bmRsZUlkKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ3hjdGVzdCcsICdsaXN0LWJ1bmRsZSddLCBbJy0tanNvbicsIHhjdGVzdEJ1bmRsZUlkXSk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uob3V0cHV0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlICcke291dHB1dH0nIGludG8ganNvbiBvYmplY3Q6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IHhjdGVzdENvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQSxNQUFNQSxjQUFjLEdBQUcsRUFBdkI7O0FBa0JBQSxjQUFjLENBQUNDLFdBQWYsR0FBNkIsZUFBZUEsV0FBZixDQUMzQkMsa0JBRDJCLEVBQ1BDLG9CQURPLEVBQ2VDLGNBRGYsRUFDK0JDLElBQUksR0FBRyxFQUR0QyxFQUUzQjtFQUNBLE1BQU1DLGFBQWEsR0FBRyxLQUFLQyxnQkFBTCxDQUNwQixDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCRixJQUFJLENBQUNHLFFBQUwsSUFBaUIsSUFBbkMsQ0FEb0IsRUFFcEIsQ0FDRSxJQUFJSCxJQUFJLENBQUNJLElBQUwsSUFBYSxFQUFqQixDQURGLEVBRUVMLGNBRkYsRUFHRUQsb0JBSEYsRUFJRUQsa0JBSkYsQ0FGb0IsRUFRcEI7SUFBQ1EsR0FBRyxFQUFFLDhCQUFnQkwsSUFBSSxDQUFDSyxHQUFyQjtFQUFOLENBUm9CLENBQXRCO0VBVUEsTUFBTUosYUFBYSxDQUFDSyxLQUFkLENBQW9CLENBQXBCLENBQU47RUFDQSxPQUFPTCxhQUFQO0FBQ0QsQ0FmRDs7QUFzQkFOLGNBQWMsQ0FBQ1ksbUJBQWYsR0FBcUMsZUFBZUEsbUJBQWYsQ0FBb0NDLGdCQUFwQyxFQUFzRDtFQUN6RixNQUFNQyxNQUFNLEdBQUcsTUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxRQUFELEVBQVcsU0FBWCxDQUFWLEVBQWlDLENBQUMsUUFBRCxFQUFXRixnQkFBWCxDQUFqQyxDQUFyQjs7RUFDQSxJQUFJO0lBQ0YsTUFBTUcsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osTUFBWCxDQUFmO0lBQ0EsT0FBT0UsTUFBTSxDQUFDRyxxQkFBZDtFQUNELENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7SUFDVixNQUFNLElBQUlDLEtBQUosQ0FBVyxvQkFBbUJQLE1BQU8sdUJBQXNCTSxDQUFDLENBQUNFLE9BQVEsRUFBckUsQ0FBTjtFQUNEO0FBQ0YsQ0FSRDs7QUFhQXRCLGNBQWMsQ0FBQ3VCLGlCQUFmLEdBQW1DLGVBQWVBLGlCQUFmLEdBQW9DO0VBQ3JFLE1BQU1ULE1BQU0sR0FBRyxNQUFNLEtBQUtDLElBQUwsQ0FBVSxDQUFDLFFBQUQsRUFBVyxNQUFYLENBQVYsRUFBOEIsQ0FBQyxRQUFELENBQTlCLENBQXJCO0VBQ0EsTUFBTVMsT0FBTyxHQUFHLCtCQUFpQlYsTUFBakIsQ0FBaEI7RUFDQSxPQUFPVSxPQUFPLENBQUNDLEdBQVIsQ0FBYUMsTUFBRCxJQUFZQSxNQUFNLENBQUNDLFNBQS9CLENBQVA7QUFDRCxDQUpEOztBQVVBM0IsY0FBYyxDQUFDNEIsdUJBQWYsR0FBeUMsZUFBZUwsaUJBQWYsQ0FBa0NuQixjQUFsQyxFQUFrRDtFQUN6RixNQUFNVSxNQUFNLEdBQUcsTUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxRQUFELEVBQVcsYUFBWCxDQUFWLEVBQXFDLENBQUMsUUFBRCxFQUFXWCxjQUFYLENBQXJDLENBQXJCOztFQUNBLElBQUk7SUFDRixPQUFPYSxJQUFJLENBQUNDLEtBQUwsQ0FBV0osTUFBWCxDQUFQO0VBQ0QsQ0FGRCxDQUVFLE9BQU9NLENBQVAsRUFBVTtJQUNWLE1BQU0sSUFBSUMsS0FBSixDQUFXLG9CQUFtQlAsTUFBTyx1QkFBc0JNLENBQUMsQ0FBQ0UsT0FBUSxFQUFyRSxDQUFOO0VBQ0Q7QUFDRixDQVBEOztlQVVldEIsYyJ9
