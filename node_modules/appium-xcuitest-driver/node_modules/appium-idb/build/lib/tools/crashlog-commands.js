"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers");

const logCommands = {};

logCommands.listCrashLogs = async function listCrashLogs(opts = {}) {
  const {
    bundleId,
    before,
    since
  } = opts;

  _logger.default.debug(`Listing crash logs on the device '${this.udid}'`);

  const command = ['crash', 'list'];
  const args = ['--json'];

  if (bundleId) {
    args.push('--bundle-id', bundleId);
  }

  if (before) {
    args.push('--before', before);
  }

  if (since) {
    args.push('--since', since);
  }

  return (0, _helpers.fixOutputToArray)(await this.exec(command, args));
};

logCommands.fetchCrashLog = async function fetchCrashLog(name) {
  _logger.default.debug(`Fetching the crash log '${name}' from the device '${this.udid}'`);

  return await this.exec(['crash', 'show'], [name]);
};

logCommands.deleteCrashLogs = async function deleteCrashLogs(opts = {}) {
  const {
    name,
    before,
    since,
    all
  } = opts;

  _logger.default.debug(`Deleting crash logs from the device '${this.udid}'`);

  const command = ['crash', 'delete'];
  const args = [];

  if (before) {
    args.push('--before', before);
  }

  if (since) {
    args.push('--since', since);
  }

  if (all) {
    args.push('--all');
  }

  if (name) {
    args.push(name);
  }

  await this.exec(command, args);
};

var _default = logCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Rvb2xzL2NyYXNobG9nLWNvbW1hbmRzLmpzIiwibmFtZXMiOlsibG9nQ29tbWFuZHMiLCJsaXN0Q3Jhc2hMb2dzIiwib3B0cyIsImJ1bmRsZUlkIiwiYmVmb3JlIiwic2luY2UiLCJsb2ciLCJkZWJ1ZyIsInVkaWQiLCJjb21tYW5kIiwiYXJncyIsInB1c2giLCJleGVjIiwiZmV0Y2hDcmFzaExvZyIsIm5hbWUiLCJkZWxldGVDcmFzaExvZ3MiLCJhbGwiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvdG9vbHMvY3Jhc2hsb2ctY29tbWFuZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZml4T3V0cHV0VG9BcnJheSB9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5cbmNvbnN0IGxvZ0NvbW1hbmRzID0ge307XG5cbi8qKlxuICogRmV0Y2hlcyBhIGxpc3Qgb2YgY3Jhc2ggbG9ncyBwcmVzZW50IG9uIHRoZSB0YXJnZXRcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8b2JqZWN0Pn0gVGhlIGxpc3Qgb2YgZmV0Y2hlZCBsb2dzIG9yIGFuIGVtcHR5IGFycmF5XG4gKi9cbmxvZ0NvbW1hbmRzLmxpc3RDcmFzaExvZ3MgPSBhc3luYyBmdW5jdGlvbiBsaXN0Q3Jhc2hMb2dzIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGJ1bmRsZUlkLFxuICAgIGJlZm9yZSxcbiAgICBzaW5jZSxcbiAgfSA9IG9wdHM7XG4gIGxvZy5kZWJ1ZyhgTGlzdGluZyBjcmFzaCBsb2dzIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3QgY29tbWFuZCA9IFsnY3Jhc2gnLCAnbGlzdCddO1xuICBjb25zdCBhcmdzID0gWyctLWpzb24nXTtcbiAgaWYgKGJ1bmRsZUlkKSB7XG4gICAgYXJncy5wdXNoKCctLWJ1bmRsZS1pZCcsIGJ1bmRsZUlkKTtcbiAgfVxuICBpZiAoYmVmb3JlKSB7XG4gICAgYXJncy5wdXNoKCctLWJlZm9yZScsIGJlZm9yZSk7XG4gIH1cbiAgaWYgKHNpbmNlKSB7XG4gICAgYXJncy5wdXNoKCctLXNpbmNlJywgc2luY2UpO1xuICB9XG4gIHJldHVybiBmaXhPdXRwdXRUb0FycmF5KGF3YWl0IHRoaXMuZXhlYyhjb21tYW5kLCBhcmdzKSk7XG59O1xuXG4vKipcbiAqIEZldGNoZXMgdGhlIGNyYXNoIGxvZyB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBsb2cgdG8gZmV0Y2hcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb250ZW50IG9mIHRoZSBsb2dcbiAqL1xubG9nQ29tbWFuZHMuZmV0Y2hDcmFzaExvZyA9IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ3Jhc2hMb2cgKG5hbWUpIHtcbiAgbG9nLmRlYnVnKGBGZXRjaGluZyB0aGUgY3Jhc2ggbG9nICcke25hbWV9JyBmcm9tIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlYyhbJ2NyYXNoJywgJ3Nob3cnXSwgW25hbWVdKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRGVsZXRlQ3Jhc2hMb2dPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgLSBJZiBwcmVzZW50IHRoZW4gb25seVxuICogdGhpcyBwYXJ0aWN1bGFyIGxvZyBpcyBnb2luZyB0byBiZSBkZWxldGVkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmVmb3JlIC0gSWYgc2V0IHRoZW4gb25seSBsb2dzXG4gKiBiZWZvcmUgdGhpcyBkYXRlIHdpbGwgYmUgZGVsZXRlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNpbmNlIC0gSWYgc2V0IHRoZW4gb25seSBsb2dzXG4gKiBhZnRlciB0aGlzIGRhdGUgd2lsbCBiZSBkZWxldGVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGFsbCAtIElmIHNldCB0aGVuIGFsbCBjcmFzaCBsb2dzXG4gKiBhcmUgZ29pbmcgdG8gYmUgZGVsZXRlZFxuICovXG5cbi8qKlxuICogRGVsZXRlcyBjcmFzaCBsb2dzXG4gKlxuICogQHBhcmFtIHtEZWxldGVDcmFzaExvZ09wdGlvbnN9IG9wdHNcbiAqL1xubG9nQ29tbWFuZHMuZGVsZXRlQ3Jhc2hMb2dzID0gYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ3Jhc2hMb2dzIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIG5hbWUsXG4gICAgYmVmb3JlLFxuICAgIHNpbmNlLFxuICAgIGFsbCxcbiAgfSA9IG9wdHM7XG4gIGxvZy5kZWJ1ZyhgRGVsZXRpbmcgY3Jhc2ggbG9ncyBmcm9tIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3QgY29tbWFuZCA9IFsnY3Jhc2gnLCAnZGVsZXRlJ107XG4gIGNvbnN0IGFyZ3MgPSBbXTtcbiAgaWYgKGJlZm9yZSkge1xuICAgIGFyZ3MucHVzaCgnLS1iZWZvcmUnLCBiZWZvcmUpO1xuICB9XG4gIGlmIChzaW5jZSkge1xuICAgIGFyZ3MucHVzaCgnLS1zaW5jZScsIHNpbmNlKTtcbiAgfVxuICBpZiAoYWxsKSB7XG4gICAgYXJncy5wdXNoKCctLWFsbCcpO1xuICB9XG4gIGlmIChuYW1lKSB7XG4gICAgYXJncy5wdXNoKG5hbWUpO1xuICB9XG4gIGF3YWl0IHRoaXMuZXhlYyhjb21tYW5kLCBhcmdzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ0NvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLE1BQU1BLFdBQVcsR0FBRyxFQUFwQjs7QUFPQUEsV0FBVyxDQUFDQyxhQUFaLEdBQTRCLGVBQWVBLGFBQWYsQ0FBOEJDLElBQUksR0FBRyxFQUFyQyxFQUF5QztFQUNuRSxNQUFNO0lBQ0pDLFFBREk7SUFFSkMsTUFGSTtJQUdKQztFQUhJLElBSUZILElBSko7O0VBS0FJLGdCQUFJQyxLQUFKLENBQVcscUNBQW9DLEtBQUtDLElBQUssR0FBekQ7O0VBQ0EsTUFBTUMsT0FBTyxHQUFHLENBQUMsT0FBRCxFQUFVLE1BQVYsQ0FBaEI7RUFDQSxNQUFNQyxJQUFJLEdBQUcsQ0FBQyxRQUFELENBQWI7O0VBQ0EsSUFBSVAsUUFBSixFQUFjO0lBQ1pPLElBQUksQ0FBQ0MsSUFBTCxDQUFVLGFBQVYsRUFBeUJSLFFBQXpCO0VBQ0Q7O0VBQ0QsSUFBSUMsTUFBSixFQUFZO0lBQ1ZNLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFVBQVYsRUFBc0JQLE1BQXRCO0VBQ0Q7O0VBQ0QsSUFBSUMsS0FBSixFQUFXO0lBQ1RLLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFNBQVYsRUFBcUJOLEtBQXJCO0VBQ0Q7O0VBQ0QsT0FBTywrQkFBaUIsTUFBTSxLQUFLTyxJQUFMLENBQVVILE9BQVYsRUFBbUJDLElBQW5CLENBQXZCLENBQVA7QUFDRCxDQW5CRDs7QUEyQkFWLFdBQVcsQ0FBQ2EsYUFBWixHQUE0QixlQUFlQSxhQUFmLENBQThCQyxJQUE5QixFQUFvQztFQUM5RFIsZ0JBQUlDLEtBQUosQ0FBVywyQkFBMEJPLElBQUssc0JBQXFCLEtBQUtOLElBQUssR0FBekU7O0VBQ0EsT0FBTyxNQUFNLEtBQUtJLElBQUwsQ0FBVSxDQUFDLE9BQUQsRUFBVSxNQUFWLENBQVYsRUFBNkIsQ0FBQ0UsSUFBRCxDQUE3QixDQUFiO0FBQ0QsQ0FIRDs7QUF1QkFkLFdBQVcsQ0FBQ2UsZUFBWixHQUE4QixlQUFlQSxlQUFmLENBQWdDYixJQUFJLEdBQUcsRUFBdkMsRUFBMkM7RUFDdkUsTUFBTTtJQUNKWSxJQURJO0lBRUpWLE1BRkk7SUFHSkMsS0FISTtJQUlKVztFQUpJLElBS0ZkLElBTEo7O0VBTUFJLGdCQUFJQyxLQUFKLENBQVcsd0NBQXVDLEtBQUtDLElBQUssR0FBNUQ7O0VBQ0EsTUFBTUMsT0FBTyxHQUFHLENBQUMsT0FBRCxFQUFVLFFBQVYsQ0FBaEI7RUFDQSxNQUFNQyxJQUFJLEdBQUcsRUFBYjs7RUFDQSxJQUFJTixNQUFKLEVBQVk7SUFDVk0sSUFBSSxDQUFDQyxJQUFMLENBQVUsVUFBVixFQUFzQlAsTUFBdEI7RUFDRDs7RUFDRCxJQUFJQyxLQUFKLEVBQVc7SUFDVEssSUFBSSxDQUFDQyxJQUFMLENBQVUsU0FBVixFQUFxQk4sS0FBckI7RUFDRDs7RUFDRCxJQUFJVyxHQUFKLEVBQVM7SUFDUE4sSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjtFQUNEOztFQUNELElBQUlHLElBQUosRUFBVTtJQUNSSixJQUFJLENBQUNDLElBQUwsQ0FBVUcsSUFBVjtFQUNEOztFQUNELE1BQU0sS0FBS0YsSUFBTCxDQUFVSCxPQUFWLEVBQW1CQyxJQUFuQixDQUFOO0FBQ0QsQ0F2QkQ7O2VBeUJlVixXIn0=
