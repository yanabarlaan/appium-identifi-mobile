"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IDB = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _index = _interopRequireDefault(require("./tools/index.js"));

var _helpers = require("./helpers");

const DEFAULT_OPTS = {
  udid: null,
  executable: {
    path: _helpers.IDB_EXECUTABLE,
    port: null,
    grpcPort: null,
    defaultArgs: []
  },
  logLevel: null,
  companion: {
    path: _helpers.IDB_COMPANION_EXECUTABLE,
    port: null,
    grpcPort: null,
    logPath: null
  },
  execTimeout: _helpers.DEFAULT_IDB_EXEC_TIMEOUT,
  verbose: false
};

class IDB {
  constructor(opts = {}) {
    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (!this.udid) {
      throw new Error(`UDID must be set for idb`);
    }

    this.executable.defaultArgs.push('--udid', this.udid);

    if (this.logLevel) {
      this.executable.defaultArgs.push('--log', this.logLevel);
    }
  }

}

exports.IDB = IDB;

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  IDB.prototype[fnName] = fn;
}

var _default = IDB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2lkYi5qcyIsIm5hbWVzIjpbIkRFRkFVTFRfT1BUUyIsInVkaWQiLCJleGVjdXRhYmxlIiwicGF0aCIsIklEQl9FWEVDVVRBQkxFIiwicG9ydCIsImdycGNQb3J0IiwiZGVmYXVsdEFyZ3MiLCJsb2dMZXZlbCIsImNvbXBhbmlvbiIsIklEQl9DT01QQU5JT05fRVhFQ1VUQUJMRSIsImxvZ1BhdGgiLCJleGVjVGltZW91dCIsIkRFRkFVTFRfSURCX0VYRUNfVElNRU9VVCIsInZlcmJvc2UiLCJJREIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJfIiwiZGVmYXVsdHNEZWVwIiwiY2xvbmVEZWVwIiwiRXJyb3IiLCJwdXNoIiwiZm5OYW1lIiwiZm4iLCJ0b1BhaXJzIiwibWV0aG9kcyIsInByb3RvdHlwZSJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9pZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBtZXRob2RzIGZyb20gJy4vdG9vbHMvaW5kZXguanMnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9JREJfRVhFQ19USU1FT1VULFxuICBJREJfRVhFQ1VUQUJMRSwgSURCX0NPTVBBTklPTl9FWEVDVVRBQkxFLFxufSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIHVkaWQ6IG51bGwsXG4gIGV4ZWN1dGFibGU6IHtcbiAgICBwYXRoOiBJREJfRVhFQ1VUQUJMRSxcbiAgICBwb3J0OiBudWxsLFxuICAgIGdycGNQb3J0OiBudWxsLFxuICAgIGRlZmF1bHRBcmdzOiBbXSxcbiAgfSxcbiAgbG9nTGV2ZWw6IG51bGwsXG4gIGNvbXBhbmlvbjoge1xuICAgIHBhdGg6IElEQl9DT01QQU5JT05fRVhFQ1VUQUJMRSxcbiAgICBwb3J0OiBudWxsLFxuICAgIGdycGNQb3J0OiBudWxsLFxuICAgIGxvZ1BhdGg6IG51bGwsXG4gIH0sXG4gIGV4ZWNUaW1lb3V0OiBERUZBVUxUX0lEQl9FWEVDX1RJTUVPVVQsXG4gIHZlcmJvc2U6IGZhbHNlLFxufTtcblxuY2xhc3MgSURCIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG4gICAgXy5kZWZhdWx0c0RlZXAodGhpcywgXy5jbG9uZURlZXAoREVGQVVMVF9PUFRTKSk7XG5cbiAgICBpZiAoIXRoaXMudWRpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVRElEIG11c3QgYmUgc2V0IGZvciBpZGJgKTtcbiAgICB9XG4gICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy0tdWRpZCcsIHRoaXMudWRpZCk7XG5cbiAgICBpZiAodGhpcy5sb2dMZXZlbCkge1xuICAgICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy0tbG9nJywgdGhpcy5sb2dMZXZlbCk7XG4gICAgfVxuICB9XG59XG5cbi8vIGFkZCBhbGwgdGhlIG1ldGhvZHMgdG8gdGhlIElEQiBwcm90b3R5cGVcbmZvciAoY29uc3QgW2ZuTmFtZSwgZm5dIG9mIF8udG9QYWlycyhtZXRob2RzKSkge1xuICBJREIucHJvdG90eXBlW2ZuTmFtZV0gPSBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSURCO1xuZXhwb3J0IHsgSURCIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBS0EsTUFBTUEsWUFBWSxHQUFHO0VBQ25CQyxJQUFJLEVBQUUsSUFEYTtFQUVuQkMsVUFBVSxFQUFFO0lBQ1ZDLElBQUksRUFBRUMsdUJBREk7SUFFVkMsSUFBSSxFQUFFLElBRkk7SUFHVkMsUUFBUSxFQUFFLElBSEE7SUFJVkMsV0FBVyxFQUFFO0VBSkgsQ0FGTztFQVFuQkMsUUFBUSxFQUFFLElBUlM7RUFTbkJDLFNBQVMsRUFBRTtJQUNUTixJQUFJLEVBQUVPLGlDQURHO0lBRVRMLElBQUksRUFBRSxJQUZHO0lBR1RDLFFBQVEsRUFBRSxJQUhEO0lBSVRLLE9BQU8sRUFBRTtFQUpBLENBVFE7RUFlbkJDLFdBQVcsRUFBRUMsaUNBZk07RUFnQm5CQyxPQUFPLEVBQUU7QUFoQlUsQ0FBckI7O0FBbUJBLE1BQU1DLEdBQU4sQ0FBVTtFQUNSQyxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7SUFDdEJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLElBQWQsRUFBb0JGLElBQXBCOztJQUNBRyxnQkFBRUMsWUFBRixDQUFlLElBQWYsRUFBcUJELGdCQUFFRSxTQUFGLENBQVl0QixZQUFaLENBQXJCOztJQUVBLElBQUksQ0FBQyxLQUFLQyxJQUFWLEVBQWdCO01BQ2QsTUFBTSxJQUFJc0IsS0FBSixDQUFXLDBCQUFYLENBQU47SUFDRDs7SUFDRCxLQUFLckIsVUFBTCxDQUFnQkssV0FBaEIsQ0FBNEJpQixJQUE1QixDQUFpQyxRQUFqQyxFQUEyQyxLQUFLdkIsSUFBaEQ7O0lBRUEsSUFBSSxLQUFLTyxRQUFULEVBQW1CO01BQ2pCLEtBQUtOLFVBQUwsQ0FBZ0JLLFdBQWhCLENBQTRCaUIsSUFBNUIsQ0FBaUMsT0FBakMsRUFBMEMsS0FBS2hCLFFBQS9DO0lBQ0Q7RUFDRjs7QUFiTzs7OztBQWlCVixLQUFLLE1BQU0sQ0FBQ2lCLE1BQUQsRUFBU0MsRUFBVCxDQUFYLElBQTJCTixnQkFBRU8sT0FBRixDQUFVQyxjQUFWLENBQTNCLEVBQStDO0VBQzdDYixHQUFHLENBQUNjLFNBQUosQ0FBY0osTUFBZCxJQUF3QkMsRUFBeEI7QUFDRDs7ZUFFY1gsRyJ9
