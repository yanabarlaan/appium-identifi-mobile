"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebInspectorDecoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _support = require("@appium/support");

class WebInspectorDecoder extends _stream.default.Transform {
  constructor(maxLength) {
    super({
      objectMode: true
    });
    this._frameBufferIndex = 0;
    this._frameBuffer = Buffer.allocUnsafeSlow(maxLength);
  }

  _transform(data, encoding, onData) {
    this._decode(data);

    onData();
  }

  _decode(data) {
    if (data.WIRFinalMessageKey) {
      const buffer = data.WIRFinalMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);

      const pref = _support.plist.parsePlist(this._frameBuffer.slice(0, this._frameBufferIndex));

      this.push(pref);

      this._resetBuffers();
    } else {
      const buffer = data.WIRPartialMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);
    }
  }

  _readBytes(src, srcIndex, target, targetIndex, nBytesToBeRead) {
    let availableBytes = Math.min(nBytesToBeRead, src.length - srcIndex);
    src.copy(target, targetIndex, srcIndex, srcIndex + availableBytes);
    return availableBytes;
  }

  _resetBuffers() {
    this._frameBufferIndex = 0;
  }

}

exports.WebInspectorDecoder = WebInspectorDecoder;
var _default = WebInspectorDecoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3dlYmluc3BlY3Rvci90cmFuc2Zvcm1lci93ZWJpbnNwZWN0b3ItZGVjb2Rlci5qcyIsIm5hbWVzIjpbIldlYkluc3BlY3RvckRlY29kZXIiLCJTdHJlYW0iLCJUcmFuc2Zvcm0iLCJjb25zdHJ1Y3RvciIsIm1heExlbmd0aCIsIm9iamVjdE1vZGUiLCJfZnJhbWVCdWZmZXJJbmRleCIsIl9mcmFtZUJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlU2xvdyIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJvbkRhdGEiLCJfZGVjb2RlIiwiV0lSRmluYWxNZXNzYWdlS2V5IiwiYnVmZmVyIiwiX3JlYWRCeXRlcyIsImxlbmd0aCIsInByZWYiLCJwbGlzdCIsInBhcnNlUGxpc3QiLCJzbGljZSIsInB1c2giLCJfcmVzZXRCdWZmZXJzIiwiV0lSUGFydGlhbE1lc3NhZ2VLZXkiLCJzcmMiLCJzcmNJbmRleCIsInRhcmdldCIsInRhcmdldEluZGV4IiwibkJ5dGVzVG9CZVJlYWQiLCJhdmFpbGFibGVCeXRlcyIsIk1hdGgiLCJtaW4iLCJjb3B5Il0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL3dlYmluc3BlY3Rvci90cmFuc2Zvcm1lci93ZWJpbnNwZWN0b3ItZGVjb2Rlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBwbGlzdCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cblxuY2xhc3MgV2ViSW5zcGVjdG9yRGVjb2RlciBleHRlbmRzIFN0cmVhbS5UcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvciAobWF4TGVuZ3RoKSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggPSAwO1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyhtYXhMZW5ndGgpO1xuICB9XG5cbiAgX3RyYW5zZm9ybSAoZGF0YSwgZW5jb2RpbmcsIG9uRGF0YSkge1xuICAgIHRoaXMuX2RlY29kZShkYXRhKTtcbiAgICBvbkRhdGEoKTtcbiAgfVxuXG4gIF9kZWNvZGUgKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5XSVJGaW5hbE1lc3NhZ2VLZXkpIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGRhdGEuV0lSRmluYWxNZXNzYWdlS2V5O1xuICAgICAgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCArPSB0aGlzLl9yZWFkQnl0ZXMoYnVmZmVyLCAwLCB0aGlzLl9mcmFtZUJ1ZmZlciwgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCwgYnVmZmVyLmxlbmd0aCk7XG4gICAgICBjb25zdCBwcmVmID0gcGxpc3QucGFyc2VQbGlzdCh0aGlzLl9mcmFtZUJ1ZmZlci5zbGljZSgwLCB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4KSk7XG4gICAgICB0aGlzLnB1c2gocHJlZik7XG4gICAgICB0aGlzLl9yZXNldEJ1ZmZlcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnVmZmVyID0gZGF0YS5XSVJQYXJ0aWFsTWVzc2FnZUtleTtcbiAgICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggKz0gdGhpcy5fcmVhZEJ5dGVzKGJ1ZmZlciwgMCwgdGhpcy5fZnJhbWVCdWZmZXIsIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXgsIGJ1ZmZlci5sZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIF9yZWFkQnl0ZXMgKHNyYywgc3JjSW5kZXgsIHRhcmdldCwgdGFyZ2V0SW5kZXgsIG5CeXRlc1RvQmVSZWFkKSB7XG4gICAgbGV0IGF2YWlsYWJsZUJ5dGVzID0gTWF0aC5taW4obkJ5dGVzVG9CZVJlYWQsIHNyYy5sZW5ndGggLSBzcmNJbmRleCk7XG4gICAgc3JjLmNvcHkodGFyZ2V0LCB0YXJnZXRJbmRleCwgc3JjSW5kZXgsIHNyY0luZGV4ICsgYXZhaWxhYmxlQnl0ZXMpO1xuICAgIHJldHVybiBhdmFpbGFibGVCeXRlcztcbiAgfVxuXG4gIF9yZXNldEJ1ZmZlcnMgKCkge1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggPSAwO1xuICB9XG59XG5cbmV4cG9ydCB7IFdlYkluc3BlY3RvckRlY29kZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFdlYkluc3BlY3RvckRlY29kZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsbUJBQU4sU0FBa0NDLGdCQUFPQyxTQUF6QyxDQUFtRDtFQUNqREMsV0FBVyxDQUFFQyxTQUFGLEVBQWE7SUFDdEIsTUFBTTtNQUFFQyxVQUFVLEVBQUU7SUFBZCxDQUFOO0lBQ0EsS0FBS0MsaUJBQUwsR0FBeUIsQ0FBekI7SUFDQSxLQUFLQyxZQUFMLEdBQW9CQyxNQUFNLENBQUNDLGVBQVAsQ0FBdUJMLFNBQXZCLENBQXBCO0VBQ0Q7O0VBRURNLFVBQVUsQ0FBRUMsSUFBRixFQUFRQyxRQUFSLEVBQWtCQyxNQUFsQixFQUEwQjtJQUNsQyxLQUFLQyxPQUFMLENBQWFILElBQWI7O0lBQ0FFLE1BQU07RUFDUDs7RUFFREMsT0FBTyxDQUFFSCxJQUFGLEVBQVE7SUFDYixJQUFJQSxJQUFJLENBQUNJLGtCQUFULEVBQTZCO01BQzNCLE1BQU1DLE1BQU0sR0FBR0wsSUFBSSxDQUFDSSxrQkFBcEI7TUFDQSxLQUFLVCxpQkFBTCxJQUEwQixLQUFLVyxVQUFMLENBQWdCRCxNQUFoQixFQUF3QixDQUF4QixFQUEyQixLQUFLVCxZQUFoQyxFQUE4QyxLQUFLRCxpQkFBbkQsRUFBc0VVLE1BQU0sQ0FBQ0UsTUFBN0UsQ0FBMUI7O01BQ0EsTUFBTUMsSUFBSSxHQUFHQyxlQUFNQyxVQUFOLENBQWlCLEtBQUtkLFlBQUwsQ0FBa0JlLEtBQWxCLENBQXdCLENBQXhCLEVBQTJCLEtBQUtoQixpQkFBaEMsQ0FBakIsQ0FBYjs7TUFDQSxLQUFLaUIsSUFBTCxDQUFVSixJQUFWOztNQUNBLEtBQUtLLGFBQUw7SUFDRCxDQU5ELE1BTU87TUFDTCxNQUFNUixNQUFNLEdBQUdMLElBQUksQ0FBQ2Msb0JBQXBCO01BQ0EsS0FBS25CLGlCQUFMLElBQTBCLEtBQUtXLFVBQUwsQ0FBZ0JELE1BQWhCLEVBQXdCLENBQXhCLEVBQTJCLEtBQUtULFlBQWhDLEVBQThDLEtBQUtELGlCQUFuRCxFQUFzRVUsTUFBTSxDQUFDRSxNQUE3RSxDQUExQjtJQUNEO0VBQ0Y7O0VBRURELFVBQVUsQ0FBRVMsR0FBRixFQUFPQyxRQUFQLEVBQWlCQyxNQUFqQixFQUF5QkMsV0FBekIsRUFBc0NDLGNBQXRDLEVBQXNEO0lBQzlELElBQUlDLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNILGNBQVQsRUFBeUJKLEdBQUcsQ0FBQ1IsTUFBSixHQUFhUyxRQUF0QyxDQUFyQjtJQUNBRCxHQUFHLENBQUNRLElBQUosQ0FBU04sTUFBVCxFQUFpQkMsV0FBakIsRUFBOEJGLFFBQTlCLEVBQXdDQSxRQUFRLEdBQUdJLGNBQW5EO0lBQ0EsT0FBT0EsY0FBUDtFQUNEOztFQUVEUCxhQUFhLEdBQUk7SUFDZixLQUFLbEIsaUJBQUwsR0FBeUIsQ0FBekI7RUFDRDs7QUFqQ2dEOzs7ZUFxQ3BDTixtQiJ9
