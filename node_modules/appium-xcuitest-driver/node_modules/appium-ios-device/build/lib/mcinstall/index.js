"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MC_INSTALL_SERVICE_NAME = exports.MCInstallProxyService = void 0;

require("source-map-support/register");

var _baseService = require("../base-service");

var _support = require("@appium/support");

const MC_INSTALL_SERVICE_NAME = 'com.apple.mobile.MCInstall';
exports.MC_INSTALL_SERVICE_NAME = MC_INSTALL_SERVICE_NAME;
const ACKNOWLEDGED = 'Acknowledged';

function checkACK(res, name) {
  if (res.Status !== ACKNOWLEDGED) {
    throw new Error(`${name} error: ${JSON.stringify(res)}`);
  }

  return res;
}

class MCInstallProxyService extends _baseService.BaseServicePlist {
  constructor(socketClient) {
    super(socketClient);
  }

  async getProfileList() {
    const res = await this._plistService.sendPlistAndReceive({
      RequestType: 'GetProfileList'
    });
    return checkACK(res, 'getProfileList');
  }

  async installProfile(path) {
    const payload = await _support.fs.readFile(path);
    const res = await this._plistService.sendPlistAndReceive({
      'RequestType': 'InstallProfile',
      'Payload': payload
    });
    return checkACK(res, 'installProfile');
  }

  async removeProfile(ident) {
    const profiles = await this.getProfileList();
    const meta = profiles.ProfileMetadata[ident];

    if (!meta) {
      throw new Error(`not find installed profile ident:${ident}`);
    }

    const data = _support.plist.createBinaryPlist({
      'PayloadType': 'Configuration',
      'PayloadIdentifier': ident,
      'PayloadUUID': meta.PayloadUUID,
      'PayloadVersion': meta.PayloadVersion
    });

    const res = await this._plistService.sendPlistAndReceive({
      'RequestType': 'RemoveProfile',
      'ProfileIdentifier': data
    });
    return checkACK(res, 'removeProfile');
  }

}

exports.MCInstallProxyService = MCInstallProxyService;
var _default = MCInstallProxyService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL21jaW5zdGFsbC9pbmRleC5qcyIsIm5hbWVzIjpbIk1DX0lOU1RBTExfU0VSVklDRV9OQU1FIiwiQUNLTk9XTEVER0VEIiwiY2hlY2tBQ0siLCJyZXMiLCJuYW1lIiwiU3RhdHVzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiTUNJbnN0YWxsUHJveHlTZXJ2aWNlIiwiQmFzZVNlcnZpY2VQbGlzdCIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiZ2V0UHJvZmlsZUxpc3QiLCJfcGxpc3RTZXJ2aWNlIiwic2VuZFBsaXN0QW5kUmVjZWl2ZSIsIlJlcXVlc3RUeXBlIiwiaW5zdGFsbFByb2ZpbGUiLCJwYXRoIiwicGF5bG9hZCIsImZzIiwicmVhZEZpbGUiLCJyZW1vdmVQcm9maWxlIiwiaWRlbnQiLCJwcm9maWxlcyIsIm1ldGEiLCJQcm9maWxlTWV0YWRhdGEiLCJkYXRhIiwicGxpc3QiLCJjcmVhdGVCaW5hcnlQbGlzdCIsIlBheWxvYWRVVUlEIiwiUGF5bG9hZFZlcnNpb24iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvbWNpbnN0YWxsL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmFzZVNlcnZpY2VQbGlzdH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7ZnMsIHBsaXN0fSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmNvbnN0IE1DX0lOU1RBTExfU0VSVklDRV9OQU1FID0gJ2NvbS5hcHBsZS5tb2JpbGUuTUNJbnN0YWxsJztcbmNvbnN0IEFDS05PV0xFREdFRCA9ICdBY2tub3dsZWRnZWQnO1xuXG5mdW5jdGlvbiBjaGVja0FDSyAocmVzLCBuYW1lKSB7XG4gIGlmIChyZXMuU3RhdHVzICE9PSBBQ0tOT1dMRURHRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gZXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5jbGFzcyBNQ0luc3RhbGxQcm94eVNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVBsaXN0IHtcbiAgY29uc3RydWN0b3IgKHNvY2tldENsaWVudCkge1xuICAgIHN1cGVyKHNvY2tldENsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUHJvZmlsZUxpc3RcbiAgICogQHByb3BlcnR5IHtBcnJheX0gT3JkZXJlZElkZW50aWZpZXJzIGxpc3Qgb2YgYWxsIHByb2ZpbGUgaWRlbnRcbiAgICogQHByb3BlcnR5IHtPYmplY3R9IFByb2ZpbGVNYW5pZmVzdFxuICAgKiBAcHJvcGVydHkge09iamVjdH0gUHJvZmlsZU1ldGFkYXRhXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBTdGF0dXNcbiAgICovXG5cbiAgLyoqXG4gICAqIEdldCBhbGwgcHJvZmlsZXMgb2YgaU9TIGRldmljZXNcbiAgICogQHJldHVybnMge1Byb2ZpbGVMaXN0fVxuICAgKiBlLmcuXG4gICAqIHtcbiAgICogICBPcmRlcmVkSWRlbnRpZmllcnM6IFsgJzJmYWMxYzJiM2Q2ODQ4NDMxODliMjk4MWM3MThiMDEzMjg1NGE4NDdhJyBdLFxuICAgKiAgIFByb2ZpbGVNYW5pZmVzdDoge1xuICAgKiAgICAgJzJmYWMxYzJiM2Q2ODQ4NDMxODliMjk4MWM3MThiMDEzMjg1NGE4NDdhJzoge1xuICAgKiAgICAgICBEZXNjcmlwdGlvbjogJ0NoYXJsZXMgUHJveHkgQ0EgKDcgRGVjIDIwMjAsIE1hY0Jvb2stUHJvLmxvY2FsKScsXG4gICAqICAgICAgIElzQWN0aXZlOiB0cnVlXG4gICAqICAgICB9XG4gICAqICAgfSxcbiAgICogICBQcm9maWxlTWV0YWRhdGE6IHtcbiAgICogICAgICcyZmFjMWMyYjNkNjg0ODQzMTg5YjI5ODFjNzE4YjAxMzI4NTRhODQ3YSc6IHtcbiAgICogICAgICAgUGF5bG9hZERpc3BsYXlOYW1lOiAnQ2hhcmxlcyBQcm94eSBDQSAoNyBEZWMgMjAyMCwgTWFjQm9vay1Qcm8ubG9jYWwpJyxcbiAgICogICAgICAgUGF5bG9hZFJlbW92YWxEaXNhbGxvd2VkOiBmYWxzZSxcbiAgICogICAgICAgUGF5bG9hZFVVSUQ6ICdCMzAwMDVDQy1CQzczLTRFNDItODU0NS04REE2QzQ0QThBNzEnLFxuICAgKiAgICAgICBQYXlsb2FkVmVyc2lvbjogMVxuICAgKiAgICAgfVxuICAgKiAgIH0sXG4gICAqICAgU3RhdHVzOiAnQWNrbm93bGVkZ2VkJ1xuICAgKiB9XG4gICAqL1xuICBhc3luYyBnZXRQcm9maWxlTGlzdCAoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcGxpc3RTZXJ2aWNlLnNlbmRQbGlzdEFuZFJlY2VpdmUoe1JlcXVlc3RUeXBlOiAnR2V0UHJvZmlsZUxpc3QnfSk7XG4gICAgcmV0dXJuIGNoZWNrQUNLKHJlcywgJ2dldFByb2ZpbGVMaXN0Jyk7XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFsbCBwcm9maWxlIHRvIGlPUyBkZXZpY2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGggIG11c3QgYmUgYSBjZXJ0aWZpY2F0ZSBmaWxlIC5QRU0gLkNFUiBhbmQgbW9yZSBmb3JtYXRzXG4gICAqIGUuZzogL0Rvd25sb2Fkcy9jaGFybGVzLWNlcnRpZmljYXRlLnBlbVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBlLmcuIHtTdGF0dXM6ICdBY2tub3dsZWRnZWQnfVxuICAgKi9cbiAgYXN5bmMgaW5zdGFsbFByb2ZpbGUgKHBhdGgpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgZnMucmVhZEZpbGUocGF0aCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcGxpc3RTZXJ2aWNlLnNlbmRQbGlzdEFuZFJlY2VpdmUoeydSZXF1ZXN0VHlwZSc6ICdJbnN0YWxsUHJvZmlsZScsICdQYXlsb2FkJzogcGF5bG9hZH0pO1xuICAgIHJldHVybiBjaGVja0FDSyhyZXMsICdpbnN0YWxsUHJvZmlsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBwcm9maWxlIGZyb20gaU9TIGRldmljZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWRlbnQgIFF1ZXJ5IGlkZW50aWZpZXIgbGlzdCB0aHJvdWdoIGdldFByb2ZpbGVMaXN0IG1ldGhvZFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBlLmcuIHtTdGF0dXM6ICdBY2tub3dsZWRnZWQnfVxuICAgKi9cbiAgYXN5bmMgcmVtb3ZlUHJvZmlsZSAoaWRlbnQpIHtcbiAgICBjb25zdCBwcm9maWxlcyA9IGF3YWl0IHRoaXMuZ2V0UHJvZmlsZUxpc3QoKTtcbiAgICBjb25zdCBtZXRhID0gcHJvZmlsZXMuUHJvZmlsZU1ldGFkYXRhW2lkZW50XTtcbiAgICBpZiAoIW1ldGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbm90IGZpbmQgaW5zdGFsbGVkIHByb2ZpbGUgaWRlbnQ6JHtpZGVudH1gKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHBsaXN0LmNyZWF0ZUJpbmFyeVBsaXN0KHsnUGF5bG9hZFR5cGUnOiAnQ29uZmlndXJhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGF5bG9hZElkZW50aWZpZXInOiBpZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQYXlsb2FkVVVJRCc6IG1ldGEuUGF5bG9hZFVVSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGF5bG9hZFZlcnNpb24nOiBtZXRhLlBheWxvYWRWZXJzaW9ufSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5fcGxpc3RTZXJ2aWNlLnNlbmRQbGlzdEFuZFJlY2VpdmUoeydSZXF1ZXN0VHlwZSc6ICdSZW1vdmVQcm9maWxlJywgJ1Byb2ZpbGVJZGVudGlmaWVyJzogZGF0YX0pO1xuICAgIHJldHVybiBjaGVja0FDSyhyZXMsICdyZW1vdmVQcm9maWxlJyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgTUNJbnN0YWxsUHJveHlTZXJ2aWNlLCBNQ19JTlNUQUxMX1NFUlZJQ0VfTkFNRSB9O1xuZXhwb3J0IGRlZmF1bHQgTUNJbnN0YWxsUHJveHlTZXJ2aWNlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSx1QkFBdUIsR0FBRyw0QkFBaEM7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHLGNBQXJCOztBQUVBLFNBQVNDLFFBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QjtFQUM1QixJQUFJRCxHQUFHLENBQUNFLE1BQUosS0FBZUosWUFBbkIsRUFBaUM7SUFDL0IsTUFBTSxJQUFJSyxLQUFKLENBQVcsR0FBRUYsSUFBSyxXQUFVRyxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsR0FBZixDQUFvQixFQUFoRCxDQUFOO0VBQ0Q7O0VBQ0QsT0FBT0EsR0FBUDtBQUNEOztBQUVELE1BQU1NLHFCQUFOLFNBQW9DQyw2QkFBcEMsQ0FBcUQ7RUFDbkRDLFdBQVcsQ0FBRUMsWUFBRixFQUFnQjtJQUN6QixNQUFNQSxZQUFOO0VBQ0Q7O0VBaUNtQixNQUFkQyxjQUFjLEdBQUk7SUFDdEIsTUFBTVYsR0FBRyxHQUFHLE1BQU0sS0FBS1csYUFBTCxDQUFtQkMsbUJBQW5CLENBQXVDO01BQUNDLFdBQVcsRUFBRTtJQUFkLENBQXZDLENBQWxCO0lBQ0EsT0FBT2QsUUFBUSxDQUFDQyxHQUFELEVBQU0sZ0JBQU4sQ0FBZjtFQUNEOztFQVFtQixNQUFkYyxjQUFjLENBQUVDLElBQUYsRUFBUTtJQUMxQixNQUFNQyxPQUFPLEdBQUcsTUFBTUMsWUFBR0MsUUFBSCxDQUFZSCxJQUFaLENBQXRCO0lBQ0EsTUFBTWYsR0FBRyxHQUFHLE1BQU0sS0FBS1csYUFBTCxDQUFtQkMsbUJBQW5CLENBQXVDO01BQUMsZUFBZSxnQkFBaEI7TUFBa0MsV0FBV0k7SUFBN0MsQ0FBdkMsQ0FBbEI7SUFDQSxPQUFPakIsUUFBUSxDQUFDQyxHQUFELEVBQU0sZ0JBQU4sQ0FBZjtFQUNEOztFQU9rQixNQUFibUIsYUFBYSxDQUFFQyxLQUFGLEVBQVM7SUFDMUIsTUFBTUMsUUFBUSxHQUFHLE1BQU0sS0FBS1gsY0FBTCxFQUF2QjtJQUNBLE1BQU1ZLElBQUksR0FBR0QsUUFBUSxDQUFDRSxlQUFULENBQXlCSCxLQUF6QixDQUFiOztJQUNBLElBQUksQ0FBQ0UsSUFBTCxFQUFXO01BQ1QsTUFBTSxJQUFJbkIsS0FBSixDQUFXLG9DQUFtQ2lCLEtBQU0sRUFBcEQsQ0FBTjtJQUNEOztJQUNELE1BQU1JLElBQUksR0FBR0MsZUFBTUMsaUJBQU4sQ0FBd0I7TUFBQyxlQUFlLGVBQWhCO01BQ0MscUJBQXFCTixLQUR0QjtNQUVDLGVBQWVFLElBQUksQ0FBQ0ssV0FGckI7TUFHQyxrQkFBa0JMLElBQUksQ0FBQ007SUFIeEIsQ0FBeEIsQ0FBYjs7SUFJQSxNQUFNNUIsR0FBRyxHQUFHLE1BQU0sS0FBS1csYUFBTCxDQUFtQkMsbUJBQW5CLENBQXVDO01BQUMsZUFBZSxlQUFoQjtNQUFpQyxxQkFBcUJZO0lBQXRELENBQXZDLENBQWxCO0lBQ0EsT0FBT3pCLFFBQVEsQ0FBQ0MsR0FBRCxFQUFNLGVBQU4sQ0FBZjtFQUNEOztBQXRFa0Q7OztlQTBFdENNLHFCIn0=
