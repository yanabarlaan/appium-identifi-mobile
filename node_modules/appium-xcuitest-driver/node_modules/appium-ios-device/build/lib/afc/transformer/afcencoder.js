"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AfcEncoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _protocol = require("../protocol");

class AfcEncoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }

  _transform(data, encoding, onData) {
    onData(null, this._encode(data));
  }

  _encode(data) {
    data.content = data.content ? data.content : Buffer.alloc(0);
    const thisLength = _protocol.AFC_PACKET_HEADER_SIZE + data.headerPayload.length;
    const messageLength = thisLength + data.content.length;
    const buffer = Buffer.alloc(messageLength);

    _protocol.MAGIC_NUMBER.copy(buffer);

    this.writeUInt64LE(buffer, 8, messageLength);
    this.writeUInt64LE(buffer, 16, thisLength);
    this.writeUInt64LE(buffer, 24, data.packetNumber);
    this.writeUInt64LE(buffer, 32, data.opCode);
    data.headerPayload.copy(buffer, _protocol.AFC_PACKET_HEADER_SIZE);
    data.content.copy(buffer, thisLength);
    return buffer;
  }

  writeUInt64LE(buffer, index, content) {
    buffer.writeUInt32LE(content, index);
    buffer.writeUInt32LE(0, index + 4);
  }

}

exports.AfcEncoder = AfcEncoder;
var _default = AfcEncoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2FmYy90cmFuc2Zvcm1lci9hZmNlbmNvZGVyLmpzIiwibmFtZXMiOlsiQWZjRW5jb2RlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwib2JqZWN0TW9kZSIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJvbkRhdGEiLCJfZW5jb2RlIiwiY29udGVudCIsIkJ1ZmZlciIsImFsbG9jIiwidGhpc0xlbmd0aCIsIkFGQ19QQUNLRVRfSEVBREVSX1NJWkUiLCJoZWFkZXJQYXlsb2FkIiwibGVuZ3RoIiwibWVzc2FnZUxlbmd0aCIsImJ1ZmZlciIsIk1BR0lDX05VTUJFUiIsImNvcHkiLCJ3cml0ZVVJbnQ2NExFIiwicGFja2V0TnVtYmVyIiwib3BDb2RlIiwiaW5kZXgiLCJ3cml0ZVVJbnQzMkxFIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL2FmYy90cmFuc2Zvcm1lci9hZmNlbmNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IE1BR0lDX05VTUJFUiwgQUZDX1BBQ0tFVF9IRUFERVJfU0laRSB9IGZyb20gJy4uL3Byb3RvY29sJztcblxuXG5jbGFzcyBBZmNFbmNvZGVyIGV4dGVuZHMgU3RyZWFtLlRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICBvbkRhdGEobnVsbCwgdGhpcy5fZW5jb2RlKGRhdGEpKTtcbiAgfVxuXG4gIF9lbmNvZGUgKGRhdGEpIHtcbiAgICBkYXRhLmNvbnRlbnQgPSBkYXRhLmNvbnRlbnQgPyBkYXRhLmNvbnRlbnQgOiBCdWZmZXIuYWxsb2MoMCk7XG5cbiAgICBjb25zdCB0aGlzTGVuZ3RoID0gQUZDX1BBQ0tFVF9IRUFERVJfU0laRSArIGRhdGEuaGVhZGVyUGF5bG9hZC5sZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IHRoaXNMZW5ndGggKyBkYXRhLmNvbnRlbnQubGVuZ3RoO1xuXG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKG1lc3NhZ2VMZW5ndGgpO1xuICAgIE1BR0lDX05VTUJFUi5jb3B5KGJ1ZmZlcik7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgOCwgbWVzc2FnZUxlbmd0aCk7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgMTYsIHRoaXNMZW5ndGgpO1xuICAgIHRoaXMud3JpdGVVSW50NjRMRShidWZmZXIsIDI0LCBkYXRhLnBhY2tldE51bWJlcik7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgMzIsIGRhdGEub3BDb2RlKTtcbiAgICBkYXRhLmhlYWRlclBheWxvYWQuY29weShidWZmZXIsIEFGQ19QQUNLRVRfSEVBREVSX1NJWkUpO1xuICAgIGRhdGEuY29udGVudC5jb3B5KGJ1ZmZlciwgdGhpc0xlbmd0aCk7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIHdyaXRlVUludDY0TEUgKGJ1ZmZlciwgaW5kZXgsIGNvbnRlbnQpIHtcbiAgICAvLyBJZ25vcmUgdGhlIGZpcnN0IDQgYnl0ZXMgc2luY2Ugd2UgZG9uJ3QgZG8gYW55dGhpbmcgd2l0aCBsb25nc1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkxFKGNvbnRlbnQsIGluZGV4KTtcbiAgICBidWZmZXIud3JpdGVVSW50MzJMRSgwLCBpbmRleCArIDQpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgQWZjRW5jb2RlciB9O1xuZXhwb3J0IGRlZmF1bHQgQWZjRW5jb2RlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxVQUFOLFNBQXlCQyxnQkFBT0MsU0FBaEMsQ0FBMEM7RUFFeENDLFdBQVcsR0FBSTtJQUNiLE1BQU07TUFBRUMsVUFBVSxFQUFFO0lBQWQsQ0FBTjtFQUNEOztFQUVEQyxVQUFVLENBQUVDLElBQUYsRUFBUUMsUUFBUixFQUFrQkMsTUFBbEIsRUFBMEI7SUFDbENBLE1BQU0sQ0FBQyxJQUFELEVBQU8sS0FBS0MsT0FBTCxDQUFhSCxJQUFiLENBQVAsQ0FBTjtFQUNEOztFQUVERyxPQUFPLENBQUVILElBQUYsRUFBUTtJQUNiQSxJQUFJLENBQUNJLE9BQUwsR0FBZUosSUFBSSxDQUFDSSxPQUFMLEdBQWVKLElBQUksQ0FBQ0ksT0FBcEIsR0FBOEJDLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLENBQWIsQ0FBN0M7SUFFQSxNQUFNQyxVQUFVLEdBQUdDLG1DQUF5QlIsSUFBSSxDQUFDUyxhQUFMLENBQW1CQyxNQUEvRDtJQUNBLE1BQU1DLGFBQWEsR0FBR0osVUFBVSxHQUFHUCxJQUFJLENBQUNJLE9BQUwsQ0FBYU0sTUFBaEQ7SUFFQSxNQUFNRSxNQUFNLEdBQUdQLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhSyxhQUFiLENBQWY7O0lBQ0FFLHVCQUFhQyxJQUFiLENBQWtCRixNQUFsQjs7SUFDQSxLQUFLRyxhQUFMLENBQW1CSCxNQUFuQixFQUEyQixDQUEzQixFQUE4QkQsYUFBOUI7SUFDQSxLQUFLSSxhQUFMLENBQW1CSCxNQUFuQixFQUEyQixFQUEzQixFQUErQkwsVUFBL0I7SUFDQSxLQUFLUSxhQUFMLENBQW1CSCxNQUFuQixFQUEyQixFQUEzQixFQUErQlosSUFBSSxDQUFDZ0IsWUFBcEM7SUFDQSxLQUFLRCxhQUFMLENBQW1CSCxNQUFuQixFQUEyQixFQUEzQixFQUErQlosSUFBSSxDQUFDaUIsTUFBcEM7SUFDQWpCLElBQUksQ0FBQ1MsYUFBTCxDQUFtQkssSUFBbkIsQ0FBd0JGLE1BQXhCLEVBQWdDSixnQ0FBaEM7SUFDQVIsSUFBSSxDQUFDSSxPQUFMLENBQWFVLElBQWIsQ0FBa0JGLE1BQWxCLEVBQTBCTCxVQUExQjtJQUNBLE9BQU9LLE1BQVA7RUFDRDs7RUFFREcsYUFBYSxDQUFFSCxNQUFGLEVBQVVNLEtBQVYsRUFBaUJkLE9BQWpCLEVBQTBCO0lBRXJDUSxNQUFNLENBQUNPLGFBQVAsQ0FBcUJmLE9BQXJCLEVBQThCYyxLQUE5QjtJQUNBTixNQUFNLENBQUNPLGFBQVAsQ0FBcUIsQ0FBckIsRUFBd0JELEtBQUssR0FBRyxDQUFoQztFQUNEOztBQS9CdUM7OztlQW9DM0J4QixVIn0=
