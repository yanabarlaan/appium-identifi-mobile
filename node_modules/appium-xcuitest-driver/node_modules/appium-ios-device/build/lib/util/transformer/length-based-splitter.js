"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LengthBasedSplitter = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _logger = _interopRequireDefault(require("../../logger"));

class LengthBasedSplitter extends _stream.default.Transform {
  constructor(opts) {
    super();
    const {
      readableStream,
      littleEndian,
      maxFrameLength,
      lengthFieldOffset,
      lengthFieldLength,
      lengthAdjustment
    } = opts;
    this.readableStream = readableStream;
    this.littleEndian = littleEndian;
    this.maxFrameLength = maxFrameLength;
    this.lengthFieldOffset = lengthFieldOffset;
    this.lengthFieldLength = lengthFieldLength;
    this.lengthAdjustment = lengthAdjustment;
    this.isShutdown = false;
    this._frameBufferIndex = 0;
    this._frameBuffer = Buffer.allocUnsafeSlow(maxFrameLength);
  }

  _transform(data, encoding, onData) {
    for (let i = 0; i < data.length; i = this._decode(data, i)) {
      if (this.isShutdown) {
        return this._pushBack(i, data.length, data);
      }
    }

    onData();
  }

  _decode(data, pos) {
    let bufferMarker = pos;
    let bytesToRead = Math.max(this.lengthFieldOffset + this.lengthFieldLength - this._frameBufferIndex, 0);
    let nBytesRead = bytesToRead === 0 ? 0 : this._readBytes(data, bufferMarker, this._frameBuffer, this._frameBufferIndex, bytesToRead);
    bufferMarker += nBytesRead;
    this._frameBufferIndex += nBytesRead;

    if (this._frameBufferIndex < this.lengthFieldOffset) {
      return bufferMarker;
    }

    const messageLength = this._readLength(this._frameBuffer, this.lengthFieldOffset, this.littleEndian);

    if (messageLength > this.maxFrameLength) {
      throw new Error(`The frame is bigger than expected. Length: ${messageLength}, max: ${this.maxFrameLength}`);
    }

    const completeMessageLength = messageLength + this.lengthAdjustment + this.lengthFieldOffset;
    bytesToRead = completeMessageLength - this._frameBufferIndex;
    nBytesRead = bytesToRead === 0 ? 0 : this._readBytes(data, bufferMarker, this._frameBuffer, this._frameBufferIndex, bytesToRead);
    bufferMarker += nBytesRead;
    this._frameBufferIndex += nBytesRead;

    if (this._frameBufferIndex < completeMessageLength) {
      return bufferMarker;
    }

    const message = Buffer.allocUnsafe(this._frameBufferIndex);

    this._frameBuffer.copy(message, 0, 0, this._frameBufferIndex);

    this.push(message);

    this._resetBuffers();

    return bufferMarker;
  }

  _readBytes(src, srcIndex, target, targetIndex, nBytesToBeRead) {
    let availableBytes = Math.min(nBytesToBeRead, src.length - srcIndex);
    src.copy(target, targetIndex, srcIndex, srcIndex + availableBytes);
    return availableBytes;
  }

  _resetBuffers() {
    this._frameBufferIndex = 0;
  }

  _pushBack(start, end, data) {
    if (start > end) {
      _logger.default.error('More data was read than the buffer size. This should not happen');
    }

    if (start === end) {
      return;
    }

    const leftover = Buffer.allocUnsafe(end - start);
    data.copy(leftover, 0, start, end);
    process.nextTick(() => this.readableStream.unshift(leftover));
  }

  shutdown() {
    this.isShutdown = true;
  }

  _readLength(data, index, littleEndian) {
    switch (this.lengthFieldLength) {
      case 4:
        return littleEndian ? data.readUInt32LE(index) : data.readUInt32BE(index);

      case 8:
        return littleEndian ? data.readUInt32LE(index) : data.readUInt32BE(index + 4);

      default:
        throw new Error(`${this.lengthFieldLength} is not supported. Only 4 and 8 are supported at the moment`);
    }
  }

}

exports.LengthBasedSplitter = LengthBasedSplitter;
var _default = LengthBasedSplitter;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3V0aWwvdHJhbnNmb3JtZXIvbGVuZ3RoLWJhc2VkLXNwbGl0dGVyLmpzIiwibmFtZXMiOlsiTGVuZ3RoQmFzZWRTcGxpdHRlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwib3B0cyIsInJlYWRhYmxlU3RyZWFtIiwibGl0dGxlRW5kaWFuIiwibWF4RnJhbWVMZW5ndGgiLCJsZW5ndGhGaWVsZE9mZnNldCIsImxlbmd0aEZpZWxkTGVuZ3RoIiwibGVuZ3RoQWRqdXN0bWVudCIsImlzU2h1dGRvd24iLCJfZnJhbWVCdWZmZXJJbmRleCIsIl9mcmFtZUJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlU2xvdyIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJvbkRhdGEiLCJpIiwibGVuZ3RoIiwiX2RlY29kZSIsIl9wdXNoQmFjayIsInBvcyIsImJ1ZmZlck1hcmtlciIsImJ5dGVzVG9SZWFkIiwiTWF0aCIsIm1heCIsIm5CeXRlc1JlYWQiLCJfcmVhZEJ5dGVzIiwibWVzc2FnZUxlbmd0aCIsIl9yZWFkTGVuZ3RoIiwiRXJyb3IiLCJjb21wbGV0ZU1lc3NhZ2VMZW5ndGgiLCJtZXNzYWdlIiwiYWxsb2NVbnNhZmUiLCJjb3B5IiwicHVzaCIsIl9yZXNldEJ1ZmZlcnMiLCJzcmMiLCJzcmNJbmRleCIsInRhcmdldCIsInRhcmdldEluZGV4IiwibkJ5dGVzVG9CZVJlYWQiLCJhdmFpbGFibGVCeXRlcyIsIm1pbiIsInN0YXJ0IiwiZW5kIiwibG9nIiwiZXJyb3IiLCJsZWZ0b3ZlciIsInByb2Nlc3MiLCJuZXh0VGljayIsInVuc2hpZnQiLCJzaHV0ZG93biIsImluZGV4IiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL3V0aWwvdHJhbnNmb3JtZXIvbGVuZ3RoLWJhc2VkLXNwbGl0dGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vLi4vbG9nZ2VyJztcblxuY2xhc3MgTGVuZ3RoQmFzZWRTcGxpdHRlciBleHRlbmRzIFN0cmVhbS5UcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvciAob3B0cykge1xuICAgIHN1cGVyKCk7XG5cbiAgICBjb25zdCB7XG4gICAgICByZWFkYWJsZVN0cmVhbSxcbiAgICAgIGxpdHRsZUVuZGlhbixcbiAgICAgIG1heEZyYW1lTGVuZ3RoLFxuICAgICAgbGVuZ3RoRmllbGRPZmZzZXQsXG4gICAgICBsZW5ndGhGaWVsZExlbmd0aCxcbiAgICAgIGxlbmd0aEFkanVzdG1lbnQsXG4gICAgfSA9IG9wdHM7XG5cbiAgICB0aGlzLnJlYWRhYmxlU3RyZWFtID0gcmVhZGFibGVTdHJlYW07XG4gICAgdGhpcy5saXR0bGVFbmRpYW4gPSBsaXR0bGVFbmRpYW47XG4gICAgdGhpcy5tYXhGcmFtZUxlbmd0aCA9IG1heEZyYW1lTGVuZ3RoO1xuICAgIHRoaXMubGVuZ3RoRmllbGRPZmZzZXQgPSBsZW5ndGhGaWVsZE9mZnNldDtcbiAgICB0aGlzLmxlbmd0aEZpZWxkTGVuZ3RoID0gbGVuZ3RoRmllbGRMZW5ndGg7XG4gICAgdGhpcy5sZW5ndGhBZGp1c3RtZW50ID0gbGVuZ3RoQWRqdXN0bWVudDtcblxuICAgIHRoaXMuaXNTaHV0ZG93biA9IGZhbHNlO1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggPSAwO1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyhtYXhGcmFtZUxlbmd0aCk7XG4gIH1cblxuICBfdHJhbnNmb3JtIChkYXRhLCBlbmNvZGluZywgb25EYXRhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSA9IHRoaXMuX2RlY29kZShkYXRhLCBpKSkge1xuICAgICAgaWYgKHRoaXMuaXNTaHV0ZG93bikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHVzaEJhY2soaSwgZGF0YS5sZW5ndGgsIGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBvbkRhdGEoKTtcbiAgfVxuXG4gIF9kZWNvZGUgKGRhdGEsIHBvcykge1xuICAgIGxldCBidWZmZXJNYXJrZXIgPSBwb3M7XG5cbiAgICBsZXQgYnl0ZXNUb1JlYWQgPSBNYXRoLm1heCgodGhpcy5sZW5ndGhGaWVsZE9mZnNldCArIHRoaXMubGVuZ3RoRmllbGRMZW5ndGgpIC0gdGhpcy5fZnJhbWVCdWZmZXJJbmRleCwgMCk7XG4gICAgbGV0IG5CeXRlc1JlYWQgPSBieXRlc1RvUmVhZCA9PT0gMCA/IDAgOiB0aGlzLl9yZWFkQnl0ZXMoZGF0YSwgYnVmZmVyTWFya2VyLCB0aGlzLl9mcmFtZUJ1ZmZlciwgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCwgYnl0ZXNUb1JlYWQpO1xuICAgIGJ1ZmZlck1hcmtlciArPSBuQnl0ZXNSZWFkO1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggKz0gbkJ5dGVzUmVhZDtcblxuICAgIGlmICh0aGlzLl9mcmFtZUJ1ZmZlckluZGV4IDwgdGhpcy5sZW5ndGhGaWVsZE9mZnNldCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlck1hcmtlcjtcbiAgICB9XG5cbiAgICBjb25zdCBtZXNzYWdlTGVuZ3RoID0gdGhpcy5fcmVhZExlbmd0aCh0aGlzLl9mcmFtZUJ1ZmZlciwgdGhpcy5sZW5ndGhGaWVsZE9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgIGlmIChtZXNzYWdlTGVuZ3RoID4gdGhpcy5tYXhGcmFtZUxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZnJhbWUgaXMgYmlnZ2VyIHRoYW4gZXhwZWN0ZWQuIExlbmd0aDogJHttZXNzYWdlTGVuZ3RofSwgbWF4OiAke3RoaXMubWF4RnJhbWVMZW5ndGh9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGVNZXNzYWdlTGVuZ3RoID0gbWVzc2FnZUxlbmd0aCArIHRoaXMubGVuZ3RoQWRqdXN0bWVudCArIHRoaXMubGVuZ3RoRmllbGRPZmZzZXQ7XG5cbiAgICBieXRlc1RvUmVhZCA9IGNvbXBsZXRlTWVzc2FnZUxlbmd0aCAtIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXg7XG4gICAgbkJ5dGVzUmVhZCA9IGJ5dGVzVG9SZWFkID09PSAwID8gMCA6IHRoaXMuX3JlYWRCeXRlcyhkYXRhLCBidWZmZXJNYXJrZXIsIHRoaXMuX2ZyYW1lQnVmZmVyLCB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4LCBieXRlc1RvUmVhZCk7XG4gICAgYnVmZmVyTWFya2VyICs9IG5CeXRlc1JlYWQ7XG4gICAgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCArPSBuQnl0ZXNSZWFkO1xuXG4gICAgaWYgKHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggPCBjb21wbGV0ZU1lc3NhZ2VMZW5ndGgpIHtcbiAgICAgIHJldHVybiBidWZmZXJNYXJrZXI7XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSh0aGlzLl9mcmFtZUJ1ZmZlckluZGV4KTtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlci5jb3B5KG1lc3NhZ2UsIDAsIDAsIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXgpO1xuXG4gICAgdGhpcy5wdXNoKG1lc3NhZ2UpO1xuICAgIHRoaXMuX3Jlc2V0QnVmZmVycygpO1xuICAgIHJldHVybiBidWZmZXJNYXJrZXI7XG4gIH1cblxuICBfcmVhZEJ5dGVzIChzcmMsIHNyY0luZGV4LCB0YXJnZXQsIHRhcmdldEluZGV4LCBuQnl0ZXNUb0JlUmVhZCkge1xuICAgIGxldCBhdmFpbGFibGVCeXRlcyA9IE1hdGgubWluKG5CeXRlc1RvQmVSZWFkLCBzcmMubGVuZ3RoIC0gc3JjSW5kZXgpO1xuICAgIHNyYy5jb3B5KHRhcmdldCwgdGFyZ2V0SW5kZXgsIHNyY0luZGV4LCBzcmNJbmRleCArIGF2YWlsYWJsZUJ5dGVzKTtcbiAgICByZXR1cm4gYXZhaWxhYmxlQnl0ZXM7XG4gIH1cbiAgX3Jlc2V0QnVmZmVycyAoKSB7XG4gICAgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCA9IDA7XG4gIH1cblxuICBfcHVzaEJhY2sgKHN0YXJ0LCBlbmQsIGRhdGEpIHtcbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIGxvZy5lcnJvcignTW9yZSBkYXRhIHdhcyByZWFkIHRoYW4gdGhlIGJ1ZmZlciBzaXplLiBUaGlzIHNob3VsZCBub3QgaGFwcGVuJyk7XG4gICAgfVxuICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxlZnRvdmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGVuZCAtIHN0YXJ0KTtcbiAgICBkYXRhLmNvcHkobGVmdG92ZXIsIDAsIHN0YXJ0LCBlbmQpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gdGhpcy5yZWFkYWJsZVN0cmVhbS51bnNoaWZ0KGxlZnRvdmVyKSk7XG4gIH1cblxuICBzaHV0ZG93biAoKSB7XG4gICAgdGhpcy5pc1NodXRkb3duID0gdHJ1ZTtcbiAgfVxuXG4gIF9yZWFkTGVuZ3RoIChkYXRhLCBpbmRleCwgbGl0dGxlRW5kaWFuKSB7XG4gICAgc3dpdGNoICh0aGlzLmxlbmd0aEZpZWxkTGVuZ3RoKSB7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiBsaXR0bGVFbmRpYW4gPyBkYXRhLnJlYWRVSW50MzJMRShpbmRleCkgOiBkYXRhLnJlYWRVSW50MzJCRShpbmRleCk7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHJldHVybiBsaXR0bGVFbmRpYW4gPyBkYXRhLnJlYWRVSW50MzJMRShpbmRleCkgOiBkYXRhLnJlYWRVSW50MzJCRShpbmRleCArIDQpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXMubGVuZ3RoRmllbGRMZW5ndGh9IGlzIG5vdCBzdXBwb3J0ZWQuIE9ubHkgNCBhbmQgOCBhcmUgc3VwcG9ydGVkIGF0IHRoZSBtb21lbnRgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsg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
