"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StreamLogger = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../../logger"));

const MIN_PRINTABLE_CHAR = 32;
const MAX_PRINTABLE_CHAR = 126;
const CHARACTERS_PER_LINE = 19;

class StreamLogger extends _stream.default.Transform {
  constructor(direction, verbose = false) {
    super({
      objectMode: true
    });
    this._direction = direction;
    this._verbose = verbose;
  }

  _transform(data, encoding, onData) {
    if (this._verbose) {
      try {
        this._log(data);
      } catch (err) {
        _logger.default.debug(`Error logging data: ${err.message}`);
      }
    }

    this.push(data);
    onData();
  }

  _log(data) {
    _logger.default.debug(`Data ${this._direction === StreamLogger.SEND ? 'sent' : 'received'}, length: ${data.length}`);

    let i = 0;

    while (i < data.length) {
      let hex = [],
          char = [];

      for (let j = 0; j < CHARACTERS_PER_LINE; j++) {
        if (i >= data.length) {
          hex[j] = '  ';
          continue;
        }

        const charCode = data[i++];
        hex[j] = _lodash.default.padStart(charCode.toString(16).toUpperCase(), 2, '0');
        char[j] = charCode < MIN_PRINTABLE_CHAR || charCode > MAX_PRINTABLE_CHAR ? '.' : String.fromCharCode(charCode);
      }

      _logger.default.debug(`${hex.join(' ')} ${char.join('')}`);
    }
  }

}

exports.StreamLogger = StreamLogger;
StreamLogger.SEND = 0;
StreamLogger.RECEIVE = 1;
var _default = StreamLogger;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3V0aWwvdHJhbnNmb3JtZXIvc3RyZWFtLWxvZ2dlci5qcyIsIm5hbWVzIjpbIk1JTl9QUklOVEFCTEVfQ0hBUiIsIk1BWF9QUklOVEFCTEVfQ0hBUiIsIkNIQVJBQ1RFUlNfUEVSX0xJTkUiLCJTdHJlYW1Mb2dnZXIiLCJTdHJlYW0iLCJUcmFuc2Zvcm0iLCJjb25zdHJ1Y3RvciIsImRpcmVjdGlvbiIsInZlcmJvc2UiLCJvYmplY3RNb2RlIiwiX2RpcmVjdGlvbiIsIl92ZXJib3NlIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9sb2ciLCJlcnIiLCJsb2ciLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJwdXNoIiwiU0VORCIsImxlbmd0aCIsImkiLCJoZXgiLCJjaGFyIiwiaiIsImNoYXJDb2RlIiwiXyIsInBhZFN0YXJ0IiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJSRUNFSVZFIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL3V0aWwvdHJhbnNmb3JtZXIvc3RyZWFtLWxvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi8uLi9sb2dnZXInO1xuXG5cbmNvbnN0IE1JTl9QUklOVEFCTEVfQ0hBUiA9IDMyO1xuY29uc3QgTUFYX1BSSU5UQUJMRV9DSEFSID0gMTI2O1xuXG5jb25zdCBDSEFSQUNURVJTX1BFUl9MSU5FID0gMTk7XG5cbmNsYXNzIFN0cmVhbUxvZ2dlciBleHRlbmRzIFN0cmVhbS5UcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvciAoZGlyZWN0aW9uLCB2ZXJib3NlID0gZmFsc2UpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG5cbiAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgdGhpcy5fdmVyYm9zZSA9IHZlcmJvc2U7XG4gIH1cblxuICBfdHJhbnNmb3JtIChkYXRhLCBlbmNvZGluZywgb25EYXRhKSB7XG4gICAgaWYgKHRoaXMuX3ZlcmJvc2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX2xvZyhkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBpbiBjYXNlIHNvbWV0aGluZyBnb2VzIHdyb25nLCBsb2cgaXQgc28gd2UgY2FuIGZpeCB0aGUgcGFyc2luZ1xuICAgICAgICAvLyBhbmQgYWxzbyBhbGxvdyBldmVyeXRoaW5nIHRvIGNvbnRpbnVlIHdpdGhvdXQgaW50ZXJydXB0aW9uXG4gICAgICAgIGxvZy5kZWJ1ZyhgRXJyb3IgbG9nZ2luZyBkYXRhOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucHVzaChkYXRhKTtcbiAgICBvbkRhdGEoKTtcbiAgfVxuXG4gIF9sb2cgKGRhdGEpIHtcbiAgICBsb2cuZGVidWcoYERhdGEgJHt0aGlzLl9kaXJlY3Rpb24gPT09IFN0cmVhbUxvZ2dlci5TRU5EID8gJ3NlbnQnIDogJ3JlY2VpdmVkJ30sIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTtcblxuICAgIC8vIGZvcm1hdCBhcyB1c2VkIGJ5IGlvcy13ZWJraXQtZGVidWctcHJveHkgYXMgd2VsbCBhcyB0b29scyBsaWtlIHNvY2F0XG4gICAgLy8gcHJpbnQgb3V0IHRoZSBkYXRhIGluIHR3byBzZWN0aW9ucywgb25lIHRoZSBoZXhhZGVjaW1hbCByZW5kZXJpbmdzIG9mIHRoZSBjaGFyYWN0ZXJzLFxuICAgIC8vIHRoZSBvdGhlciB0aGUgcHJpbnRhYmxlIGNoYXJhY3RlcnMgKHdpdGggJy4nIGZvciB1bnByaW50YWJsZSBjaGFyYWN0ZXJzKS5cbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBkYXRhLmxlbmd0aCkge1xuICAgICAgbGV0IGhleCA9IFtdLCBjaGFyID0gW107XG4gICAgICAvLyBjcmVhdGUgZWFjaCBsaW5lIG9mIHRleHQgdG8gb3V0cHV0XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IENIQVJBQ1RFUlNfUEVSX0xJTkU7IGorKykge1xuICAgICAgICBpZiAoaSA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGZpbGwgaW4gdGhlIGNoYXJjb2RlIHNlY3Rpb24gd2l0aCBibGFua3MsIGZvciBmb3JtYXR0aW5nLFxuICAgICAgICAgIC8vIHdoZW4gdGhlcmUgaXMgbm8gbW9yZSBkYXRhXG4gICAgICAgICAgaGV4W2pdID0gJyAgJztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFyQ29kZSA9IGRhdGFbaSsrXTtcbiAgICAgICAgLy8gaGV4YWRlY2ltYWwgcmVwcmVzZW50YXRpb24sIGZvcmNlZCBpbnRvIDIgcGxhY2VzXG4gICAgICAgIGhleFtqXSA9IF8ucGFkU3RhcnQoY2hhckNvZGUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCksIDIsICcwJyk7XG4gICAgICAgIC8vIGNoYXJhY3RlciByZXByZXNlbnRhdGlvbiwgd2l0aCAnLicgd2hlbiB1bnByaW50YWJsZVxuICAgICAgICBjaGFyW2pdID0gY2hhckNvZGUgPCBNSU5fUFJJTlRBQkxFX0NIQVIgfHwgY2hhckNvZGUgPiBNQVhfUFJJTlRBQkxFX0NIQVJcbiAgICAgICAgICA/ICcuJ1xuICAgICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gICAgICB9XG4gICAgICBsb2cuZGVidWcoYCR7aGV4LmpvaW4oJyAnKX0gJHtjaGFyLmpvaW4oJycpfWApO1xuICAgIH1cbiAgfVxufVxuXG5TdHJlYW1Mb2dnZXIuU0VORCA9IDA7XG5TdHJlYW1Mb2dnZXIuUkVDRUlWRSA9IDE7XG5cbmV4cG9ydCB7IFN0cmVhbUxvZ2dlciB9O1xuZXhwb3J0IGRlZmF1bHQgU3RyZWFtTG9nZ2VyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7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
