"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Lockdown = exports.LOCKDOWN_PORT = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseService = require("../base-service");

const LOCKDOWN_PORT = 62078;
exports.LOCKDOWN_PORT = LOCKDOWN_PORT;
const LABEL = 'usbmuxd';
const PROTOCOL_VERSION = 2;

class Lockdown extends _baseService.BaseServicePlist {
  async queryType(timeout = 5000) {
    const data = await this._plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'QueryType'
    }, timeout);

    if (data.Request === 'QueryType' && data.Type === 'com.apple.mobile.lockdown') {
      return data;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async startSession(hostID, systemBUID, timeout = 5000) {
    const data = await this._plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'StartSession',
      HostID: hostID,
      SystemBUID: systemBUID
    }, timeout);

    if (data.Request === 'StartSession' && data.SessionID) {
      return {
        sessionID: data.SessionID,
        enableSessionSSL: data.EnableSessionSSL
      };
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this._plistService.enableSessionSSL(hostPrivateKey, hostCertificate);
  }

  async getValue(query = {}, timeout = 5000) {
    const plist = Object.assign({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'GetValue'
    }, query);
    const data = await this._plistService.sendPlistAndReceive(plist, timeout);

    if ((data === null || data === void 0 ? void 0 : data.Request) === 'GetValue' && !_lodash.default.isNil(data === null || data === void 0 ? void 0 : data.Value)) {
      return data.Value;
    }

    throw new Error(`Unexpected data received for ${JSON.stringify(query)} request: ` + JSON.stringify(data));
  }

  async startService(serviceName, timeout = 5000) {
    const data = await this._plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'StartService',
      Service: serviceName
    }, timeout);

    if (data.Error) {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    } else {
      return data;
    }
  }

}

exports.Lockdown = Lockdown;
var _default = Lockdown;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
