"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableSSLHandshakeOnly = enableSSLHandshakeOnly;
exports.upgradeToSSL = upgradeToSSL;

require("source-map-support/register");

var _tls = _interopRequireDefault(require("tls"));

var _net = _interopRequireDefault(require("net"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const HANDSHAKE_TIMEOUT_MS = 10000;

function upgradeToSSL(socket, key, cert) {
  return new _tls.default.TLSSocket(socket, {
    rejectUnauthorized: false,
    secureContext: _tls.default.createSecureContext({
      key,
      cert
    })
  });
}

async function enableSSLHandshakeOnly(socket, key, cert) {
  const sslSocket = _tls.default.connect({
    socket,
    secureContext: _tls.default.createSecureContext({
      key,
      cert
    }),
    rejectUnauthorized: false
  });

  await new _bluebird.default((resolve, reject) => {
    const timeoutHandler = setTimeout(() => {
      if (!sslSocket.destroyed) {
        sslSocket.end();
      }

      return reject(new Error('ssl handshake error'));
    }, HANDSHAKE_TIMEOUT_MS);
    sslSocket.once('secureConnect', () => {
      clearTimeout(timeoutHandler);

      sslSocket._handle.readStop();

      return resolve();
    });
  });
  return _net.default.Socket({
    fd: socket._handle.fd
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3NzbC1oZWxwZXIuanMiLCJuYW1lcyI6WyJIQU5EU0hBS0VfVElNRU9VVF9NUyIsInVwZ3JhZGVUb1NTTCIsInNvY2tldCIsImtleSIsImNlcnQiLCJ0bHMiLCJUTFNTb2NrZXQiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJzZWN1cmVDb250ZXh0IiwiY3JlYXRlU2VjdXJlQ29udGV4dCIsImVuYWJsZVNTTEhhbmRzaGFrZU9ubHkiLCJzc2xTb2NrZXQiLCJjb25uZWN0IiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJ0aW1lb3V0SGFuZGxlciIsInNldFRpbWVvdXQiLCJkZXN0cm95ZWQiLCJlbmQiLCJFcnJvciIsIm9uY2UiLCJjbGVhclRpbWVvdXQiLCJfaGFuZGxlIiwicmVhZFN0b3AiLCJuZXQiLCJTb2NrZXQiLCJmZCJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9zc2wtaGVscGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0bHMgZnJvbSAndGxzJztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgSEFORFNIQUtFX1RJTUVPVVRfTVMgPSAxMDAwMDtcblxuZnVuY3Rpb24gdXBncmFkZVRvU1NMIChzb2NrZXQsIGtleSwgY2VydCkge1xuICByZXR1cm4gbmV3IHRscy5UTFNTb2NrZXQoc29ja2V0LCB7XG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZSxcbiAgICBzZWN1cmVDb250ZXh0OiB0bHMuY3JlYXRlU2VjdXJlQ29udGV4dCh7XG4gICAgICBrZXksXG4gICAgICBjZXJ0XG4gICAgfSlcbiAgfSk7XG59XG5cbi8qKlxuICogQWZ0ZXIgdGhlIHNzbCBwcm90b2NvbCBpcyBzdWNjZXNzZnVsbHkgaGFuZHNoYWtlLCBjbG9zZSB0aGUgc3NsIHByb3RvY29sIGNoYW5uZWwgYW5kIHVzZSB0ZXh0IHRyYW5zbWlzc2lvblxuICogQHBhcmFtIHNvY2tldFxuICogQHBhcmFtIGtleVxuICogQHBhcmFtIGNlcnRcbiAqIEByZXR1cm5zIHtQcm9taXNlPFNvY2tldD59IER1cGxpY2F0ZSB0aGUgaW5wdXQgc29ja2V0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVuYWJsZVNTTEhhbmRzaGFrZU9ubHkgKHNvY2tldCwga2V5LCBjZXJ0KSB7XG4gIGNvbnN0IHNzbFNvY2tldCA9IHRscy5jb25uZWN0KHtcbiAgICBzb2NrZXQsXG4gICAgc2VjdXJlQ29udGV4dDogdGxzLmNyZWF0ZVNlY3VyZUNvbnRleHQoe1xuICAgICAga2V5LFxuICAgICAgY2VydFxuICAgIH0pLFxuICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UsXG4gIH0pO1xuXG4gIC8vIHN0b3AgcmVjZWl2aW5nIGRhdGEgYWZ0ZXIgc3VjY2Vzc2Z1bCBoYW5kc2hha2VcbiAgYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHRpbWVvdXRIYW5kbGVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIXNzbFNvY2tldC5kZXN0cm95ZWQpIHtcbiAgICAgICAgc3NsU29ja2V0LmVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ3NzbCBoYW5kc2hha2UgZXJyb3InKSk7XG4gICAgfSwgSEFORFNIQUtFX1RJTUVPVVRfTVMpO1xuXG4gICAgc3NsU29ja2V0Lm9uY2UoJ3NlY3VyZUNvbm5lY3QnLCAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZXIpO1xuICAgICAgc3NsU29ja2V0Ll9oYW5kbGUucmVhZFN0b3AoKTtcbiAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xuICAvLyBEdXBsaWNhdGUgdGhlIHNvY2tldC4gUmV0dXJuIGEgbmV3IHNvY2tldCBvYmplY3QgY29ubmVjdGVkIHRvIHRoZSBzYW1lIHN5c3RlbSByZXNvdXJjZVxuICByZXR1cm4gbmV0LlNvY2tldCh7ZmQ6IHNvY2tldC5faGFuZGxlLmZkfSk7XG59XG5cblxuZXhwb3J0IHsgdXBncmFkZVRvU1NMLCBlbmFibGVTU0xIYW5kc2hha2VPbmx5IH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLG9CQUFvQixHQUFHLEtBQTdCOztBQUVBLFNBQVNDLFlBQVQsQ0FBdUJDLE1BQXZCLEVBQStCQyxHQUEvQixFQUFvQ0MsSUFBcEMsRUFBMEM7RUFDeEMsT0FBTyxJQUFJQyxhQUFJQyxTQUFSLENBQWtCSixNQUFsQixFQUEwQjtJQUMvQkssa0JBQWtCLEVBQUUsS0FEVztJQUUvQkMsYUFBYSxFQUFFSCxhQUFJSSxtQkFBSixDQUF3QjtNQUNyQ04sR0FEcUM7TUFFckNDO0lBRnFDLENBQXhCO0VBRmdCLENBQTFCLENBQVA7QUFPRDs7QUFTRCxlQUFlTSxzQkFBZixDQUF1Q1IsTUFBdkMsRUFBK0NDLEdBQS9DLEVBQW9EQyxJQUFwRCxFQUEwRDtFQUN4RCxNQUFNTyxTQUFTLEdBQUdOLGFBQUlPLE9BQUosQ0FBWTtJQUM1QlYsTUFENEI7SUFFNUJNLGFBQWEsRUFBRUgsYUFBSUksbUJBQUosQ0FBd0I7TUFDckNOLEdBRHFDO01BRXJDQztJQUZxQyxDQUF4QixDQUZhO0lBTTVCRyxrQkFBa0IsRUFBRTtFQU5RLENBQVosQ0FBbEI7O0VBVUEsTUFBTSxJQUFJTSxpQkFBSixDQUFNLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtJQUMvQixNQUFNQyxjQUFjLEdBQUdDLFVBQVUsQ0FBQyxNQUFNO01BQ3RDLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxTQUFmLEVBQTBCO1FBQ3hCUCxTQUFTLENBQUNRLEdBQVY7TUFDRDs7TUFDRCxPQUFPSixNQUFNLENBQUMsSUFBSUssS0FBSixDQUFVLHFCQUFWLENBQUQsQ0FBYjtJQUNELENBTGdDLEVBSzlCcEIsb0JBTDhCLENBQWpDO0lBT0FXLFNBQVMsQ0FBQ1UsSUFBVixDQUFlLGVBQWYsRUFBZ0MsTUFBTTtNQUNwQ0MsWUFBWSxDQUFDTixjQUFELENBQVo7O01BQ0FMLFNBQVMsQ0FBQ1ksT0FBVixDQUFrQkMsUUFBbEI7O01BQ0EsT0FBT1YsT0FBTyxFQUFkO0lBQ0QsQ0FKRDtFQUtELENBYkssQ0FBTjtFQWVBLE9BQU9XLGFBQUlDLE1BQUosQ0FBVztJQUFDQyxFQUFFLEVBQUV6QixNQUFNLENBQUNxQixPQUFQLENBQWVJO0VBQXBCLENBQVgsQ0FBUDtBQUNEIn0=
