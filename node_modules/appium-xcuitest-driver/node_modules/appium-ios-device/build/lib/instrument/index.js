"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InstrumentService = exports.INSTRUMENT_SERVICE_NAME_VERSION_14 = exports.INSTRUMENT_SERVICE_NAME = exports.INSTRUMENT_CHANNEL = void 0;

require("source-map-support/register");

var _baseService = require("../base-service");

var _headers = require("./headers");

var _dtxEncode = require("./transformer/dtx-encode");

var _dtxDecode = require("./transformer/dtx-decode");

var _events = _interopRequireDefault(require("events"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

const CHECK_FREQ_MS = 500;
const WAIT_REPLY_TIME_MS = 10000;
const EMPTY_MESSAGE_SIZE = 16;
const CHANNEL_CANCELED = '_channelCanceled';
const CHANNEL_OFFSET = 2 ** 32;
const INSTRUMENT_SERVICE_NAME_VERSION_14 = 'com.apple.instruments.remoteserver.DVTSecureSocketProxy';
exports.INSTRUMENT_SERVICE_NAME_VERSION_14 = INSTRUMENT_SERVICE_NAME_VERSION_14;
const INSTRUMENT_SERVICE_NAME = 'com.apple.instruments.remoteserver';
exports.INSTRUMENT_SERVICE_NAME = INSTRUMENT_SERVICE_NAME;
const INSTRUMENT_CHANNEL = Object.freeze({
  DEVICE_INFO: 'com.apple.instruments.server.services.deviceinfo',
  PROCESS_CONTROL: 'com.apple.instruments.server.services.processcontrol',
  SYSMONTAP: 'com.apple.instruments.server.services.sysmontap',
  NETWORKING: 'com.apple.instruments.server.services.networking',
  MOBILE_NOTIFICATIONS: 'com.apple.instruments.server.services.mobilenotifications',
  GRAPHICS_OPENGL: 'com.apple.instruments.server.services.graphics.opengl',
  APPLICATION_LISTING: 'com.apple.instruments.server.services.device.applictionListing',
  CONDITION_INDUCER: 'com.apple.instruments.server.services.ConditionInducer'
});
exports.INSTRUMENT_CHANNEL = INSTRUMENT_CHANNEL;

function defaultDict(createValue) {
  return new Proxy(Object.create(null), {
    get(storage, property) {
      if (!(property in storage)) {
        storage[property] = createValue(property);
      }

      return storage[property];
    }

  });
}

class InstrumentService extends _baseService.BaseServiceSocket {
  constructor(socketClient, event) {
    super(socketClient);
    this._undefinedCallback = event;
    this._callbacks = new _events.default.EventEmitter();
    this._channelCallbacks = new _events.default.EventEmitter();
    this._replyQueues = defaultDict(() => []);
    this._channels = {};
    this._nextIdentifier = 1;
    this._encoder = new _dtxEncode.DTXEncoder();

    this._encoder.pipe(this._socketClient);

    this._assignClientFailureHandlers(this._encoder);

    this._decoder = new _dtxDecode.DTXDecoder();

    this._socketClient.pipe(this._decoder);

    this._decoder.on('data', this._handleData.bind(this));
  }

  registerSelectorCallback(selector, event) {
    this._callbacks.addListener(selector, event);
  }

  registerUndefinedCallback(event) {
    this._undefinedCallback = event;
  }

  async registerChannelCallback(channel, event) {
    const channelId = await this.makeChannel(channel);

    this._channelCallbacks.addListener(channelId, event);
  }

  async makeChannel(channel) {
    if (channel in this._channels) {
      return this._channels[channel];
    }

    const channelCode = Object.keys(this._channels).length + 1;
    await this._callChannel(true, 0, '_requestChannelWithCode:identifier:', channelCode, channel);
    this._channels[channel] = channelCode;
    return channelCode;
  }

  async callChannel(channel, selector, ...auxiliaries) {
    const channelCode = await this.makeChannel(channel);
    return await this._callChannel(true, channelCode, selector, ...auxiliaries);
  }

  async _callChannel(sync, channelCode, selector, ...auxiliaries) {
    const identifier = this._nextIdentifier;

    this._encoder.write({
      sync,
      channelCode,
      selector,
      auxiliaries,
      identifier
    });

    ++this._nextIdentifier;

    if (sync) {
      try {
        return await (0, _asyncbox.waitForCondition)(() => {
          const queue = this._replyQueues[identifier];
          const data = queue.shift();

          if (!_lodash.default.isUndefined(data)) {
            return data;
          }
        }, {
          waitMs: WAIT_REPLY_TIME_MS,
          intervalMs: CHECK_FREQ_MS,
          error: 'reply channel data timeout'
        });
      } catch (err) {
        this.close();
        throw new Error(err);
      }
    }
  }

  _handleData(data) {
    if (_lodash.default.includes(data.selector, CHANNEL_CANCELED)) {
      this.close();
    }

    if (data.conversationIndex === 1) {
      this._replyQueues[data.identifier].push(data);
    } else if (this._channelCallbacks.listenerCount(CHANNEL_OFFSET - data.channelCode) > 0) {
      this._channelCallbacks.emit(CHANNEL_OFFSET - data.channelCode, data);
    } else {
      const selector = data.selector;

      if (_lodash.default.isString(selector) && this._callbacks.listenerCount(selector) > 0) {
        this._callbacks.emit(selector, data);
      } else if (this._undefinedCallback) {
        this._undefinedCallback(data);
      }

      if (data.expectsReply) {
        this._replyAck(data);
      }
    }
  }

  _replyAck(data) {
    const reply = new _headers.DTXMessage({
      identifier: data.identifier,
      channelCode: data.channelCode,
      selector: Buffer.alloc(EMPTY_MESSAGE_SIZE),
      conversationIndex: data.conversationIndex + 1,
      flags: _headers.FLAG_TYPES.reply
    });

    this._socketClient.write(reply.build());
  }

}

exports.InstrumentService = InstrumentService;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
