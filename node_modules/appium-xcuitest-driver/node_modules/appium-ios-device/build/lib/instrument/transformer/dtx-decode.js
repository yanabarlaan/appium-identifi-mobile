"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DTXDecoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _headers = require("../headers");

class DTXDecoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
    this._dtxManager = {};
    this.buffer = Buffer.allocUnsafe(0);
    this.cursor = 0;
    this.header = undefined;
  }

  _transform(data, encoding, onData) {
    this._decode(data);

    onData();
  }

  _decode(data) {
    this.buffer = Buffer.concat([this.buffer.slice(this.cursor, this.buffer.length), data]);
    this.cursor = 0;

    while (this.cursor < this.buffer.length) {
      const magic = this._recv(_headers.DTX_MESSAGE_HEADER_MAGIC_LEN);

      if (!magic) {
        return;
      }

      this.cursor -= _headers.DTX_MESSAGE_HEADER_MAGIC_LEN;

      if (magic && magic.readUInt32LE(0) === _headers.DTX_MESSAGE_HEADER_MAGIC) {
        const headerBuffer = this._recv(_headers.DTX_MESSAGE_HEADER_LENGTH);

        if (!headerBuffer) {
          return;
        }

        this.header = _headers.DTXMessageHeader.parse(headerBuffer);

        if (this.header.fragmentId === 0) {
          if (!(this.header.channel in this._dtxManager)) {
            this._dtxManager[this.header.channel] = {
              headerBuffer,
              payloadBuffer: new Buffer.allocUnsafe(0)
            };
          }

          if (this.header.fragmentCount > 1) {
            continue;
          }
        }
      }

      const bodyBuffer = this._recv(this.header.payloadLength);

      if (!bodyBuffer) {
        return;
      }

      if (this._dtxManager[this.header.channel]) {
        this._dtxManager[this.header.channel].payloadBuffer = Buffer.concat([this._dtxManager[this.header.channel].payloadBuffer, bodyBuffer]);
      }

      if (this.header.fragmentId === this.header.fragmentCount - 1) {
        data = this._dtxManager[this.header.channel];
        delete this._dtxManager[this.header.channel];

        if (data) {
          this.push(_headers.DTXMessage.parse(data.headerBuffer, data.payloadBuffer));
        }
      }
    }

    this.cursor = 0;
    this.buffer = Buffer.allocUnsafe(0);
  }

  _recv(length) {
    if (this.buffer.length < this.cursor + length) {
      return null;
    }

    const buf = this.buffer.slice(this.cursor, this.cursor + length);
    this.cursor += length;
    return buf;
  }

}

exports.DTXDecoder = DTXDecoder;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2luc3RydW1lbnQvdHJhbnNmb3JtZXIvZHR4LWRlY29kZS5qcyIsIm5hbWVzIjpbIkRUWERlY29kZXIiLCJTdHJlYW0iLCJUcmFuc2Zvcm0iLCJjb25zdHJ1Y3RvciIsIm9iamVjdE1vZGUiLCJfZHR4TWFuYWdlciIsImJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiY3Vyc29yIiwiaGVhZGVyIiwidW5kZWZpbmVkIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9kZWNvZGUiLCJjb25jYXQiLCJzbGljZSIsImxlbmd0aCIsIm1hZ2ljIiwiX3JlY3YiLCJEVFhfTUVTU0FHRV9IRUFERVJfTUFHSUNfTEVOIiwicmVhZFVJbnQzMkxFIiwiRFRYX01FU1NBR0VfSEVBREVSX01BR0lDIiwiaGVhZGVyQnVmZmVyIiwiRFRYX01FU1NBR0VfSEVBREVSX0xFTkdUSCIsIkRUWE1lc3NhZ2VIZWFkZXIiLCJwYXJzZSIsImZyYWdtZW50SWQiLCJjaGFubmVsIiwicGF5bG9hZEJ1ZmZlciIsImZyYWdtZW50Q291bnQiLCJib2R5QnVmZmVyIiwicGF5bG9hZExlbmd0aCIsInB1c2giLCJEVFhNZXNzYWdlIiwiYnVmIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiIsInNvdXJjZXMiOlsibGliL2luc3RydW1lbnQvdHJhbnNmb3JtZXIvZHR4LWRlY29kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBEVFhfTUVTU0FHRV9IRUFERVJfTEVOR1RILCBEVFhfTUVTU0FHRV9IRUFERVJfTUFHSUMsIERUWF9NRVNTQUdFX0hFQURFUl9NQUdJQ19MRU4sXG4gICAgICAgICBEVFhNZXNzYWdlSGVhZGVyLCBEVFhNZXNzYWdlfSBmcm9tICcuLi9oZWFkZXJzJztcblxuY2xhc3MgRFRYRGVjb2RlciBleHRlbmRzIFN0cmVhbS5UcmFuc2Zvcm0ge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG4gICAgdGhpcy5fZHR4TWFuYWdlciA9IHt9O1xuICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApO1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLmhlYWRlciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICB0aGlzLl9kZWNvZGUoZGF0YSk7XG4gICAgb25EYXRhKCk7XG4gIH1cblxuICBfZGVjb2RlIChkYXRhKSB7XG4gICAgLy8gTWVyZ2UgcGFja2V0c1xuICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbdGhpcy5idWZmZXIuc2xpY2UodGhpcy5jdXJzb3IsIHRoaXMuYnVmZmVyLmxlbmd0aCksIGRhdGFdKTtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgd2hpbGUgKHRoaXMuY3Vyc29yIDwgdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBtYWdpYyA9IHRoaXMuX3JlY3YoRFRYX01FU1NBR0VfSEVBREVSX01BR0lDX0xFTik7XG4gICAgICBpZiAoIW1hZ2ljKSB7IHJldHVybjsgfVxuICAgICAgdGhpcy5jdXJzb3IgLT0gRFRYX01FU1NBR0VfSEVBREVSX01BR0lDX0xFTjtcbiAgICAgIGlmIChtYWdpYyAmJiBtYWdpYy5yZWFkVUludDMyTEUoMCkgPT09IERUWF9NRVNTQUdFX0hFQURFUl9NQUdJQykge1xuICAgICAgICBjb25zdCBoZWFkZXJCdWZmZXIgPSB0aGlzLl9yZWN2KERUWF9NRVNTQUdFX0hFQURFUl9MRU5HVEgpO1xuICAgICAgICBpZiAoIWhlYWRlckJ1ZmZlcikgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5oZWFkZXIgPSBEVFhNZXNzYWdlSGVhZGVyLnBhcnNlKGhlYWRlckJ1ZmZlcik7XG4gICAgICAgIGlmICh0aGlzLmhlYWRlci5mcmFnbWVudElkID09PSAwKSB7XG4gICAgICAgICAgLy8gb25seSB0aGUgMHRoIGZyYWdtZW50IGNvbnRhaW5zIGEgbWVzc2FnZSBoZWFkZXJcbiAgICAgICAgICBpZiAoISh0aGlzLmhlYWRlci5jaGFubmVsIGluIHRoaXMuX2R0eE1hbmFnZXIpKSB7XG4gICAgICAgICAgICB0aGlzLl9kdHhNYW5hZ2VyW3RoaXMuaGVhZGVyLmNoYW5uZWxdID0ge2hlYWRlckJ1ZmZlciwgcGF5bG9hZEJ1ZmZlcjogbmV3IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKX07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmhlYWRlci5mcmFnbWVudENvdW50ID4gMSkge1xuICAgICAgICAgICAgLy8gQ29udGludWUgdG8gZ2V0IHRoZSBuZXh0IG1lc3NhZ2UgZnJhZ21lbnRzXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGJvZHlCdWZmZXIgPSB0aGlzLl9yZWN2KHRoaXMuaGVhZGVyLnBheWxvYWRMZW5ndGgpO1xuICAgICAgaWYgKCFib2R5QnVmZmVyKSB7IHJldHVybjsgfVxuICAgICAgaWYgKHRoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF0pIHtcbiAgICAgICAgdGhpcy5fZHR4TWFuYWdlclt0aGlzLmhlYWRlci5jaGFubmVsXS5wYXlsb2FkQnVmZmVyID0gQnVmZmVyLmNvbmNhdChbdGhpcy5fZHR4TWFuYWdlclt0aGlzLmhlYWRlci5jaGFubmVsXS5wYXlsb2FkQnVmZmVyLCBib2R5QnVmZmVyXSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5oZWFkZXIuZnJhZ21lbnRJZCA9PT0gKHRoaXMuaGVhZGVyLmZyYWdtZW50Q291bnQgLSAxKSkge1xuICAgICAgICBkYXRhID0gdGhpcy5fZHR4TWFuYWdlclt0aGlzLmhlYWRlci5jaGFubmVsXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF07XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgdGhpcy5wdXNoKERUWE1lc3NhZ2UucGFyc2UoZGF0YS5oZWFkZXJCdWZmZXIsIGRhdGEucGF5bG9hZEJ1ZmZlcikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgfVxuXG4gIF9yZWN2IChsZW5ndGgpIHtcbiAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDwgdGhpcy5jdXJzb3IgKyBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBidWYgPSB0aGlzLmJ1ZmZlci5zbGljZSh0aGlzLmN1cnNvciwgdGhpcy5jdXJzb3IgKyBsZW5ndGgpO1xuICAgIHRoaXMuY3Vyc29yICs9IGxlbmd0aDtcbiAgICByZXR1cm4gYnVmO1xuICB9XG59XG5cbmV4cG9ydCB7IERUWERlY29kZXIgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxVQUFOLFNBQXlCQyxnQkFBT0MsU0FBaEMsQ0FBMEM7RUFFeENDLFdBQVcsR0FBSTtJQUNiLE1BQU07TUFBRUMsVUFBVSxFQUFFO0lBQWQsQ0FBTjtJQUNBLEtBQUtDLFdBQUwsR0FBbUIsRUFBbkI7SUFDQSxLQUFLQyxNQUFMLEdBQWNDLE1BQU0sQ0FBQ0MsV0FBUCxDQUFtQixDQUFuQixDQUFkO0lBQ0EsS0FBS0MsTUFBTCxHQUFjLENBQWQ7SUFDQSxLQUFLQyxNQUFMLEdBQWNDLFNBQWQ7RUFDRDs7RUFFREMsVUFBVSxDQUFFQyxJQUFGLEVBQVFDLFFBQVIsRUFBa0JDLE1BQWxCLEVBQTBCO0lBQ2xDLEtBQUtDLE9BQUwsQ0FBYUgsSUFBYjs7SUFDQUUsTUFBTTtFQUNQOztFQUVEQyxPQUFPLENBQUVILElBQUYsRUFBUTtJQUViLEtBQUtQLE1BQUwsR0FBY0MsTUFBTSxDQUFDVSxNQUFQLENBQWMsQ0FBQyxLQUFL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
