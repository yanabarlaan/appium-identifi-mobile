"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FLAG_TYPES = exports.DTX_MESSAGE_PAYLOAD_HEADER_LENGTH = exports.DTX_MESSAGE_HEADER_MAGIC_LEN = exports.DTX_MESSAGE_HEADER_MAGIC = exports.DTX_MESSAGE_HEADER_LENGTH = exports.DTXMessagePayloadHeader = exports.DTXMessageHeader = exports.DTXMessageAuxBuffer = exports.DTXMessageAux = exports.DTXMessage = void 0;

require("source-map-support/register");

var _nskeyed = require("./transformer/nskeyed");

var _bplistParser = _interopRequireDefault(require("bplist-parser"));

var _lodash = _interopRequireDefault(require("lodash"));

const DTX_MESSAGE_PAYLOAD_HEADER_LENGTH = 16;
exports.DTX_MESSAGE_PAYLOAD_HEADER_LENGTH = DTX_MESSAGE_PAYLOAD_HEADER_LENGTH;
const DTX_MESSAGE_HEADER_LENGTH = 32;
exports.DTX_MESSAGE_HEADER_LENGTH = DTX_MESSAGE_HEADER_LENGTH;
const DTX_MESSAGE_HEADER_MAGIC = 0x1F3D5B79;
exports.DTX_MESSAGE_HEADER_MAGIC = DTX_MESSAGE_HEADER_MAGIC;
const DTX_MESSAGE_HEADER_MAGIC_LEN = 4;
exports.DTX_MESSAGE_HEADER_MAGIC_LEN = DTX_MESSAGE_HEADER_MAGIC_LEN;
const DTX_MESSAGE_AUX_HEADER = 0x01F0;
const DTX_AUXILIARY_MAGIC = 0xa;
const FLAG_TYPES = Object.freeze({
  recv: 1,
  send: 2,
  reply: 3
});
exports.FLAG_TYPES = FLAG_TYPES;
const AUX_TYPES = Object.freeze({
  NSKeyed: 2,
  UInt32LE: 3,
  BigUInt64LE: 4,
  BigInt64LE: 6
});

class DTXMessageHeader {
  static build(data) {
    const messageHeader = Buffer.alloc(DTX_MESSAGE_HEADER_LENGTH);
    messageHeader.writeUInt32LE(DTX_MESSAGE_HEADER_MAGIC, 0);
    messageHeader.writeUInt32LE(DTX_MESSAGE_HEADER_LENGTH, 4);
    messageHeader.writeUInt16LE(0, 8);
    messageHeader.writeUInt16LE(1, 10);
    messageHeader.writeUInt32LE(data.payloadLength, 12);
    messageHeader.writeUInt32LE(data.identifier, 16);
    messageHeader.writeUInt32LE(data.conversationIndex, 20);
    messageHeader.writeUInt32LE(data.channelCode, 24);
    messageHeader.writeUInt32LE(data.expectsReply, 28);
    return messageHeader;
  }

  static parse(headerBuffer) {
    return {
      magic: headerBuffer.readUInt32LE(0),
      headerLength: headerBuffer.readUInt32LE(4),
      fragmentId: headerBuffer.readUInt16LE(8),
      fragmentCount: headerBuffer.readUInt16LE(10),
      payloadLength: headerBuffer.readUInt32LE(12),
      identifier: headerBuffer.readUInt32LE(16),
      conversationIndex: headerBuffer.readUInt32LE(20),
      channel: headerBuffer.readUInt32LE(24),
      expectsReply: headerBuffer.readUInt32LE(28)
    };
  }

}

exports.DTXMessageHeader = DTXMessageHeader;

class DTXMessagePayloadHeader {
  static build(data) {
    const messageHeader = Buffer.alloc(DTX_MESSAGE_PAYLOAD_HEADER_LENGTH);
    messageHeader.writeUInt32LE(data.flags, 0);
    messageHeader.writeUInt32LE(data.auxLength, 4);
    messageHeader.writeBigUInt64LE(data.totalLength, 8);
    return messageHeader;
  }

  static parse(headerBuffer) {
    return {
      flags: headerBuffer.readUInt32LE(0),
      auxLength: headerBuffer.readUInt32LE(4),
      totalLength: headerBuffer.readBigInt64LE(8)
    };
  }

}

exports.DTXMessagePayloadHeader = DTXMessagePayloadHeader;

class DTXMessageAux {
  constructor(data = []) {
    this.data = data;
  }

  build() {
    const messageAux = new DTXMessageAuxBuffer();
    let buf = Buffer.alloc(0);

    if (this.data.length === 0) {
      return buf;
    }

    for (const arg of this.data) {
      if (arg instanceof DTXMessageAuxBuffer) {
        buf = Buffer.concat([buf, arg.getBytes()]);
      } else if (_lodash.default.isNumber(arg)) {
        messageAux.appendInt(arg);
      } else if (typeof arg == 'bigint') {
        messageAux.appendLong(arg);
      } else {
        messageAux.appendObject(arg);
      }
    }

    return Buffer.concat([buf, messageAux.getBytes()]);
  }

  static parse(headerBuffer) {
    let cursor = 0;
    const data = [];
    const length = headerBuffer.readBigInt64LE(8);
    cursor += 16;

    while (cursor <= length) {
      const m = headerBuffer.readUInt32LE(cursor);

      if (m !== DTX_AUXILIARY_MAGIC) {
        throw new Error(`incorrect auxiliary magic: ${m}`);
      }

      const type = headerBuffer.readUInt32LE(cursor + 4);
      cursor += 8;

      switch (type) {
        case AUX_TYPES.NSKeyed:
          {
            const strLen = headerBuffer.readUInt32LE(cursor);
            cursor += 4;
            const archived_data = headerBuffer.slice(cursor, cursor + strLen);
            data.push((0, _nskeyed.unarchive)(archived_data));
            cursor += strLen;
            break;
          }

        case AUX_TYPES.UInt32LE:
          data.push(headerBuffer.readUInt32LE(cursor));
          cursor += 4;
          break;

        case AUX_TYPES.BigUInt64LE:
          data.push(headerBuffer.readBigUInt64LE(cursor));
          cursor += 8;
          break;

        case AUX_TYPES.BigInt64LE:
          data.push(headerBuffer.readBigInt64LE(cursor));
          cursor += 8;
          break;

        default:
          throw new Error(`Unknown type ${type}`);
      }
    }

    return data;
  }

}

exports.DTXMessageAux = DTXMessageAux;

class InstrumentRPCParseError {
  constructor(data) {
    this.data = data;
  }

}

class DTXMessageAuxBuffer {
  constructor() {
    this._buf = Buffer.alloc(0);
  }

  appendInt(value) {
    const buf = Buffer.alloc(12);
    buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);
    buf.writeUInt32LE(3, 4);
    buf.writeUInt32LE(value, 8);
    this._buf = Buffer.concat([this._buf, buf]);
  }

  appendLong(value) {
    const buf = Buffer.alloc(16);
    buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);
    buf.writeUInt32LE(4, 4);
    buf.writeBigUInt64LE(value, 8);
    this._buf = Buffer.concat([this._buf, buf]);
  }

  appendSignedInt(value) {
    const buf = Buffer.alloc(12);
    buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);
    buf.writeUInt32LE(3, 4);
    buf.writeInt32LE(value, 8);
    this._buf = Buffer.concat([this._buf, buf]);
  }

  appendSignedLong(value) {
    const buf = Buffer.alloc(16);

    this._buf.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);

    this._buf.writeUInt32LE(6, 4);

    this._buf.writeBigInt64LE(value, 8);

    this._buf = Buffer.concat([this._buf, buf]);
  }

  appendObject(value) {
    const buf = (0, _nskeyed.archive)(value);
    const buf2 = Buffer.alloc(12);
    buf2.writeUInt32LE(DTX_AUXILIARY_MAGIC, 0);
    buf2.writeUInt32LE(2, 4);
    buf2.writeUInt32LE(buf.length, 8);
    this._buf = Buffer.concat([this._buf, buf2, buf]);
  }

  getBytes() {
    const out = Buffer.alloc(16);
    out.writeUInt32LE(DTX_MESSAGE_AUX_HEADER, 0);
    out.writeUInt32LE(this._buf.length, 8);
    return Buffer.concat([out, this._buf]);
  }

}

exports.DTXMessageAuxBuffer = DTXMessageAuxBuffer;

class DTXMessage {
  constructor(opts = {}) {
    const {
      identifier,
      channelCode,
      selector,
      expectsReply,
      conversationIndex = 0,
      flags = FLAG_TYPES.send
    } = opts;
    this._messageHeader = undefined;
    this._payloadHeader = undefined;
    this._identifier = identifier;
    this._channelCode = channelCode;
    this._expectsReply = expectsReply;
    this._selector = selector;
    this._conversationIndex = conversationIndex;
    this._flags = flags;
    this.auxiliaries = new DTXMessageAux();
  }

  get identifier() {
    var _this$_messageHeader;

    return (_this$_messageHeader = this._messageHeader) === null || _this$_messageHeader === void 0 ? void 0 : _this$_messageHeader.identifier;
  }

  get channelCode() {
    var _this$_messageHeader2;

    return (_this$_messageHeader2 = this._messageHeader) === null || _this$_messageHeader2 === void 0 ? void 0 : _this$_messageHeader2.channel;
  }

  get expectsReply() {
    var _this$_messageHeader3;

    return (_this$_messageHeader3 = this._messageHeader) === null || _this$_messageHeader3 === void 0 ? void 0 : _this$_messageHeader3.expectsReply;
  }

  get selector() {
    return this._selector;
  }

  set selector(data) {
    this._selector = data;
  }

  get conversationIndex() {
    var _this$_messageHeader4;

    return (_this$_messageHeader4 = this._messageHeader) === null || _this$_messageHeader4 === void 0 ? void 0 : _this$_messageHeader4.conversationIndex;
  }

  build() {
    const sel = this._selector ? (0, _nskeyed.archive)(this._selector) : Buffer.alloc(0);
    const aux = this.auxiliaries.build();
    const payloadHeader = DTXMessagePayloadHeader.build({
      flags: this._flags,
      auxLength: aux.length,
      totalLength: BigInt(aux.length + sel.length)
    });
    const messageHeader = DTXMessageHeader.build({
      payloadLength: DTX_MESSAGE_PAYLOAD_HEADER_LENGTH + aux.length + sel.length,
      identifier: this._identifier,
      conversationIndex: this._conversationIndex,
      channelCode: this._channelCode,
      expectsReply: this._expectsReply
    });
    return Buffer.concat([messageHeader, payloadHeader, aux, sel]);
  }

  static parse(headerBuf, payloadBuf) {
    let cursor = 0;
    const ret = new DTXMessage();
    ret._messageHeader = DTXMessageHeader.parse(headerBuf);

    if (ret._messageHeader.payloadLength === 0) {
      return ret;
    }

    ret._payloadHeader = DTXMessagePayloadHeader.parse(payloadBuf.slice(cursor, DTX_MESSAGE_PAYLOAD_HEADER_LENGTH));
    cursor += DTX_MESSAGE_PAYLOAD_HEADER_LENGTH;

    if (ret._payloadHeader.totalLength === 0n) {
      return ret;
    }

    if (ret._payloadHeader.auxLength > 0) {
      ret.auxiliaries = DTXMessageAux.parse(payloadBuf.slice(cursor, cursor + ret._payloadHeader.auxLength));
      cursor += ret._payloadHeader.auxLength;
    }

    const data = payloadBuf.slice(cursor, cursor + payloadBuf.length);

    for (const fun of [_nskeyed.unarchive, _bplistParser.default.parseBuffer]) {
      try {
        ret.selector = fun(data);
        break;
      } catch (e) {
        ret.selector = new InstrumentRPCParseError(data);
      }
    }

    return ret;
  }

}

exports.DTXMessage = DTXMessage;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
