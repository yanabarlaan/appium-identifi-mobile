"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HouseArrestService = exports.HOUSE_ARREST_SERVICE_NAME = void 0;

require("source-map-support/register");

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _constants = require("../constants");

var _afc = _interopRequireDefault(require("../afc"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _baseService = require("../base-service");

const HOUSE_ARREST_SERVICE_NAME = 'com.apple.mobile.house_arrest';
exports.HOUSE_ARREST_SERVICE_NAME = HOUSE_ARREST_SERVICE_NAME;
const MAX_FRAME_SIZE = 1 * _constants.KB;

class HouseArrestService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);

    this._assignClientFailureHandlers(this._encoder);
  }

  async vendContainer(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendContainer',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application container. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  async vendDocuments(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendDocuments',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application documents. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  _receivePlistPromise(timeout = 10000) {
    return new _bluebird.default((resolve, reject) => {
      this._decoder.once('data', resolve);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
  }

}

exports.HouseArrestService = HouseArrestService;
var _default = HouseArrestService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2hvdXNlLWFycmVzdC9pbmRleC5qcyIsIm5hbWVzIjpbIkhPVVNFX0FSUkVTVF9TRVJWSUNFX05BTUUiLCJNQVhfRlJBTUVfU0laRSIsIktCIiwiSG91c2VBcnJlc3RTZXJ2aWNlIiwiQmFzZVNlcnZpY2VTb2NrZXQiLCJjb25zdHJ1Y3RvciIsInNvY2tldENsaWVudCIsIl9kZWNvZGVyIiwiUGxpc3RTZXJ2aWNlRGVjb2RlciIsIl9zcGxpdHRlciIsIkxlbmd0aEJhc2VkU3BsaXR0ZXIiLCJyZWFkYWJsZVN0cmVhbSIsImxpdHRsZUVuZGlhbiIsIm1heEZyYW1lTGVuZ3RoIiwibGVuZ3RoRmllbGRPZmZzZXQiLCJsZW5ndGhGaWVsZExlbmd0aCIsImxlbmd0aEFkanVzdG1lbnQiLCJfc29ja2V0Q2xpZW50IiwicGlwZSIsIl9lbmNvZGVyIiwiUGxpc3RTZXJ2aWNlRW5jb2RlciIsIl9hc3NpZ25DbGllbnRGYWlsdXJlSGFuZGxlcnMiLCJ2ZW5kQ29udGFpbmVyIiwiYnVuZGxlSWQiLCJyZXNwb25zZVByb21pc2UiLCJfcmVjZWl2ZVBsaXN0UHJvbWlzZSIsIndyaXRlIiwiQ29tbWFuZCIsIklkZW50aWZpZXIiLCJyZXNwb25zZSIsIlN0YXR1cyIsIkVycm9yIiwidW5waXBlIiwiQWZjU2VydmljZSIsInZlbmREb2N1bWVudHMiLCJ0aW1lb3V0IiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJvbmNlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9ob3VzZS1hcnJlc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBsaXN0U2VydmljZURlY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWRlY29kZXInO1xuaW1wb3J0IFBsaXN0U2VydmljZUVuY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWVuY29kZXInO1xuaW1wb3J0IExlbmd0aEJhc2VkU3BsaXR0ZXIgZnJvbSAnLi4vdXRpbC90cmFuc2Zvcm1lci9sZW5ndGgtYmFzZWQtc3BsaXR0ZXInO1xuaW1wb3J0IHsgS0IgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IEFmY1NlcnZpY2UgZnJvbSAnLi4vYWZjJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IEJhc2VTZXJ2aWNlU29ja2V0IH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcblxuXG5jb25zdCBIT1VTRV9BUlJFU1RfU0VSVklDRV9OQU1FID0gJ2NvbS5hcHBsZS5tb2JpbGUuaG91c2VfYXJyZXN0JztcbmNvbnN0IE1BWF9GUkFNRV9TSVpFID0gMSAqIEtCO1xuXG5jbGFzcyBIb3VzZUFycmVzdFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICBzdXBlcihzb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgdGhpcy5fc3BsaXR0ZXIgPSBuZXcgTGVuZ3RoQmFzZWRTcGxpdHRlcih7XG4gICAgICByZWFkYWJsZVN0cmVhbTogc29ja2V0Q2xpZW50LFxuICAgICAgbGl0dGxlRW5kaWFuOiBmYWxzZSxcbiAgICAgIG1heEZyYW1lTGVuZ3RoOiBNQVhfRlJBTUVfU0laRSxcbiAgICAgIGxlbmd0aEZpZWxkT2Zmc2V0OiAwLFxuICAgICAgbGVuZ3RoRmllbGRMZW5ndGg6IDQsXG4gICAgICBsZW5ndGhBZGp1c3RtZW50OiA0LFxuICAgIH0pO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuXG4gICAgdGhpcy5fZW5jb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VFbmNvZGVyKCk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fYXNzaWduQ2xpZW50RmFpbHVyZUhhbmRsZXJzKHRoaXMuX2VuY29kZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlbmRzIGludG8gdGhlIGFwcGxpY2F0aW9uIGNvbnRhaW5lciBhbmQgcmV0dXJucyBhbiBBZmNTZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgY29udGFpbmVyIHRoYXQgd2Ugd2lsbCBlbnRlciB0b1xuICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgaG91c2UgYXJyZXN0IGZhaWxzIHRvIGFjY2VzcyB0aGUgYXBwbGljYXRpb24ncyBjb250YWluZXJcbiAgICogQHJldHVybnMge0FmY1NlcnZpY2V9XG4gICAqL1xuICBhc3luYyB2ZW5kQ29udGFpbmVyIChidW5kbGVJZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHRoaXMuX3JlY2VpdmVQbGlzdFByb21pc2UoKTtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdWZW5kQ29udGFpbmVyJyxcbiAgICAgIElkZW50aWZpZXI6IGJ1bmRsZUlkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmIChyZXNwb25zZS5TdGF0dXMgIT09ICdDb21wbGV0ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHZlbmQgaW50byB0aGUgYXBwbGljYXRpb24gY29udGFpbmVyLiBFcnJvcjogJHtyZXNwb25zZS5FcnJvcn1gKTtcbiAgICB9XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHJldHVybiBuZXcgQWZjU2VydmljZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlbmRzIGludG8gdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50cyBhbmQgcmV0dXJucyBhbiBBZmNTZXJ2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgZG9jdW1lbnRzIHRoYXQgd2Ugd2lsbCBlbnRlciB0b1xuICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgaG91c2UgYXJyZXN0IGZhaWxzIHRvIGFjY2VzcyB0aGUgYXBwbGljYXRpb24ncyBkb2N1bWVudHNcbiAgICogQHJldHVybnMge0FmY1NlcnZpY2V9XG4gICAqL1xuICBhc3luYyB2ZW5kRG9jdW1lbnRzIChidW5kbGVJZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHRoaXMuX3JlY2VpdmVQbGlzdFByb21pc2UoKTtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdWZW5kRG9jdW1lbnRzJyxcbiAgICAgIElkZW50aWZpZXI6IGJ1bmRsZUlkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmIChyZXNwb25zZS5TdGF0dXMgIT09ICdDb21wbGV0ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHZlbmQgaW50byB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnRzLiBFcnJvcjogJHtyZXNwb25zZS5FcnJvcn1gKTtcbiAgICB9XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHJldHVybiBuZXcgQWZjU2VydmljZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgX3JlY2VpdmVQbGlzdFByb21pc2UgKHRpbWVvdXQgPSAxMDAwMCkge1xuICAgIHJldHVybiBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9kZWNvZGVyLm9uY2UoJ2RhdGEnLCByZXNvbHZlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIHJlY2VpdmUgYW55IGRhdGEgd2l0aGluIHRoZSB0aW1lb3V0OiAke3RpbWVvdXR9YCkpLCB0aW1lb3V0KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBIb3VzZUFycmVzdFNlcnZpY2UsIEhPVVNFX0FSUkVTVF9TRVJWSUNFX05BTUUgfTtcbmV4cG9ydCBkZWZhdWx0IEhvdXNlQXJyZXN0U2VydmljZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSx5QkFBeUIsR0FBRywrQkFBbEM7O0FBQ0EsTUFBTUMsY0FBYyxHQUFHLElBQUlDLGFBQTNCOztBQUVBLE1BQU1DLGtCQUFOLFNBQWlDQyw4QkFBakMsQ0FBbUQ7RUFDakRDLFdBQVcsQ0FBRUMsWUFBRixFQUFnQjtJQUN6QixNQUFNQSxZQUFOO0lBRUEsS0FBS0MsUUFBTCxHQUFnQixJQUFJQyw0QkFBSixFQUFoQjtJQUNBLEtBQUtDLFNBQUwsR0FBaUIsSUFBSUMsNEJBQUosQ0FBd0I7TUFDdkNDLGNBQWMsRUFBRUwsWUFEdUI7TUFFdkNNLFlBQVksRUFBRSxLQUZ5QjtNQUd2Q0MsY0FBYyxFQUFFWixjQUh1QjtNQUl2Q2EsaUJBQWlCLEVBQUUsQ0FKb0I7TUFLdkNDLGlCQUFpQixFQUFFLENBTG9CO01BTXZDQyxnQkFBZ0IsRUFBRTtJQU5xQixDQUF4QixDQUFqQjs7SUFRQSxLQUFLQyxhQUFMLENBQW1CQyxJQUFuQixDQUF3QixLQUFLVCxTQUE3QixFQUF3Q1MsSUFBeEMsQ0FBNkMsS0FBS1gsUUFBbEQ7O0lBRUEsS0FBS1ksUUFBTCxHQUFnQixJQUFJQyw0QkFBSixFQUFoQjs7SUFDQSxLQUFLRCxRQUFMLENBQWNELElBQWQsQ0FBbUIsS0FBS0QsYUFBeEI7O0lBQ0EsS0FBS0ksNEJBQUwsQ0FBa0MsS0FBS0YsUUFBdkM7RUFDRDs7RUFRa0IsTUFBYkcsYUFBYSxDQUFFQyxRQUFGLEVBQVk7SUFDN0IsTUFBTUMsZUFBZSxHQUFHLEtBQUtDLG9CQUFMLEVBQXhCOztJQUNBLEtBQUtOLFFBQUwsQ0FBY08sS0FBZCxDQUFvQjtNQUNsQkMsT0FBTyxFQUFFLGVBRFM7TUFFbEJDLFVBQVUsRUFBRUw7SUFGTSxDQUFwQjs7SUFJQSxNQUFNTSxRQUFRLEdBQUcsTUFBTUwsZUFBdkI7O0lBQ0EsSUFBSUssUUFBUSxDQUFDQyxNQUFULEtBQW9CLFVBQXhCLEVBQW9DO01BQ2xDLE1BQU0sSUFBSUMsS0FBSixDQUFXLHlEQUF3REYsUUFBUSxDQUFDRSxLQUFNLEVBQWxGLENBQU47SUFDRDs7SUFDRCxLQUFLZCxhQUFMLENBQW1CZSxNQUFuQixDQUEwQixLQUFLdkIsU0FBL0I7O0lBQ0EsS0FBS0EsU0FBTCxDQUFldUIsTUFBZixDQUFzQixLQUFLekIsUUFBM0I7O0lBQ0EsT0FBTyxJQUFJMEIsWUFBSixDQUFlLEtBQUtoQixhQUFwQixDQUFQO0VBQ0Q7O0VBUWtCLE1BQWJpQixhQUFhLENBQUVYLFFBQUYsRUFBWTtJQUM3QixNQUFNQyxlQUFlLEdBQUcsS0FBS0Msb0JBQUwsRUFBeEI7O0lBQ0EsS0FBS04sUUFBTCxDQUFjTyxLQUFkLENBQW9CO01BQ2xCQyxPQUFPLEVBQUUsZUFEUztNQUVsQkMsVUFBVSxFQUFFTDtJQUZNLENBQXBCOztJQUlBLE1BQU1NLFFBQVEsR0FBRyxNQUFNTCxlQUF2Qjs7SUFDQSxJQUFJSyxRQUFRLENBQUNDLE1BQVQsS0FBb0IsVUFBeEIsRUFBb0M7TUFDbEMsTUFBTSxJQUFJQyxLQUFKLENBQVcseURBQXdERixRQUFRLENBQUNFLEtBQU0sRUFBbEYsQ0FBTjtJQUNEOztJQUNELEtBQUtkLGFBQUwsQ0FBbUJlLE1BQW5CLENBQTBCLEtBQUt2QixTQUEvQjs7SUFDQSxLQUFLQSxTQUFMLENBQWV1QixNQUFmLENBQXNCLEtBQUt6QixRQUEzQjs7SUFDQSxPQUFPLElBQUkwQixZQUFKLENBQWUsS0FBS2hCLGFBQXBCLENBQVA7RUFDRDs7RUFFRFEsb0JBQW9CLENBQUVVLE9BQU8sR0FBRyxLQUFaLEVBQW1CO0lBQ3JDLE9BQU8sSUFBSUMsaUJBQUosQ0FBTSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7TUFDaEMsS0FBSy9CLFFBQUwsQ0FBY2dDLElBQWQsQ0FBbUIsTUFBbkIsRUFBMkJGLE9BQTNCOztNQUNBRyxVQUFVLENBQUMsTUFBTUYsTUFBTSxDQUFDLElBQUlQLEtBQUosQ0FBVyxrREFBaURJLE9BQVEsRUFBcEUsQ0FBRCxDQUFiLEVBQXVGQSxPQUF2RixDQUFWO0lBQ0QsQ0FITSxDQUFQO0VBSUQ7O0FBbkVnRDs7O2VBdUVwQ2hDLGtCIn0=
